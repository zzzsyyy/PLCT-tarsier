!Libmicro_#:                                            0.4.1-rh.31
!Options:             -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000
!Machine_name:                                    openeuler-riscv64
!OS_name:                                                     Linux
!OS_release:                          6.4.0-8.0.0.17.oe2309.riscv64
!OS_build:                      #1 SMP Mon Sep 18 19:09:13 UTC 2023
!IPV4_address:                                            10.0.2.15
!IPV4_address:                                           172.17.0.1
!IPV6_address:                              fec0::5054:ff:fe12:3456
!IPV6_address:                              fe80::5054:ff:fe12:3456
!Run_by:                                                       root
!Date:                                               09/22/23 18:50
!Compiler:                                                      gcc
!Compiler Ver.:                                                  12
!Libc Ver.:                                              glibc 2.38
!Libpthread Ver.:                                         NPTL 2.38
!sizeof(long):                                                    8
!extra_CFLAGS:                                               [none]
!TimerRes:                                                100 nsecs
!TimerOverhead:                                          1429 nsecs
!Location /tmp:                                                /tmp
!Location /var/tmp:                                               /
!CPU_NAME:                                                         
!Boot cmd line:       root=/dev/vda2 rw console=ttyS0 systemd.default_timeout_start_sec=600 selinux=0 highres=off earlycon no4lvl
!Processor:                                                 riscv64
!Byte_Order:                                          Little_Endian
!#CPUs:                                                           4
!On-line_CPUs_list:                                             0-3
!NUMA_nodes:                                                      1
!NUMA_node0_CPUs:                                               0-3
!Memory:                                                      0,0,0
!kernel.sched_autogroup_enabled:                                  1
!kernel.sched_cfs_bandwidth_slice_us:                          5000
!kernel.sched_child_runs_first:                                   0
!kernel.sched_deadline_period_max_us:                       4194304
!kernel.sched_deadline_period_min_us:                           100
!kernel.sched_rr_timeslice_ms:                                  100
!kernel.sched_rt_period_us:                                 1000000
!kernel.sched_rt_runtime_us:                                 950000
!kernel.sched_schedstats:                                         0
!Trans. Huge Page:                           always madvise [never]
!THP Defrag:             always defer defer+madvise [madvise] never
!THP khpd.alloc_sleep_millisecs:                              60000
!THP khpd.defrag:                                                 1
!THP khpd.full_scans:                                             2
!THP khpd.max_ptes_none:                                        511
!THP khpd.max_ptes_shared:                                      256
!THP khpd.max_ptes_swap:                                         64
!THP khpd.pages_collapsed:                                       25
!THP khpd.pages_to_scan:                                       4096
!THP khpd.scan_sleep_millisecs:                               10000
!vm.admin_reserve_kbytes:                                      8192
!vm.compaction_proactiveness:                                    20
!vm.compact_memory:                                                
!vm.compact_unevictable_allowed:                                  1
!vm.dirty_background_bytes:                                       0
!vm.dirty_background_ratio:                                      90
!vm.dirty_bytes:                                                  0
!vm.dirty_expire_centisecs:                                    2500
!vm.dirty_ratio:                                                 90
!vm.dirtytime_expire_seconds:                                 43200
!vm.dirty_writeback_centisecs:                                    0
!vm.drop_caches:                                                   
!vm.extfrag_threshold:                                          500
!vm.hugepage_mig_noalloc:                                         0
!vm.hugepage_pmem_allocall:                                       0
!vm.hugetlb_optimize_vmemmap:                                     0
!vm.hugetlb_shm_group:                                            0
!vm.laptop_mode:                                                  0
!vm.legacy_va_layout:                                             0
!vm.lowmem_reserve_ratio:                                  256 32 0
!vm.max_map_count:                                            65530
!vm.memfd_noexec:                                                 0
!vm.min_free_kbytes:                                           7932
!vm.min_slab_ratio:                                               5
!vm.min_unmapped_ratio:                                           1
!vm.mmap_min_addr:                                             4096
!vm.mmap_rnd_bits:                                               18
!vm.mmap_rnd_compat_bits:                                        11
!vm.nr_hugepages:                                                 0
!vm.nr_hugepages_mempolicy:                                       0
!vm.nr_overcommit_hugepages:                                      0
!vm.numa_stat:                                                    1
!vm.numa_zonelist_order:                                       Node
!vm.oom_dump_tasks:                                               1
!vm.oom_kill_allocating_task:                                     0
!vm.overcommit_kbytes:                                            0
!vm.overcommit_memory:                                            0
!vm.overcommit_ratio:                                            50
!vm.page-cluster:                                                 3
!vm.page_lock_unfairness:                                         5
!vm.panic_on_oom:                                                 0
!vm.percpu_pagelist_high_fraction:                                0
!vm.stat_interval:                                                1
!vm.stat_refresh:                                                  
!vm.swappiness:                                                  10
!vm.unprivileged_userfaultfd:                                     0
!vm.user_reserve_kbytes:                                     124630
!vm.vfs_cache_pressure:                                         100
!vm.watermark_boost_factor:                                   15000
!vm.watermark_scale_factor:                                      10
!vm.zone_reclaim_mode:                                            0
!nh:available: 1 nodes (0)
!nh:node:free:size:0
!nh:0:711:3906:10
     prc thr      nsecs/call      samples   errors cnt/samp 
atoi   1   1             149        20773        0     5060 
# bin/../bin-riscv64/atoi -N atoi -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       143                        143
#                        max    119107                        165
#                       mean       167.01026                  150.59616
#                     median       149                        149*
#                     stddev      1057.72333                    4.67576
#             standard error         7.04992                    0.03244
#       99% confidence level        18.16060                    0.08357
#                       skew       106.42085                    1.56874
#                   kurtosis     11386.86286                    1.35752
#           time correlation         0.00484                    0.00066
#
#               elapsed time        20.00510
#                   run time        17.50775
#          getnsecs overhead      1429
#
#          number of samples     22510
#         number of outliers      1737
#    number of final samples     20773
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             143 |*                                             -
#                  3             144 |*                                             -
#                150             145 |*                                             -
#               1125             146 |********                                      -
#               3119             147 |***********************                       -
#               4192             148 |********************************              -
#               3857             149 |*****************************                 -
#               2632             150 |********************                          -
#               1235             151 |*********                                     -
#                553             152 |****                                          -
#                252             153 |*                                             -
#                143             154 |*                                             -
#                 90             155 |*                                             -
#                116             156 |*                                             -
#                321             157 |**                                            -
#                479             158 |***                                           -
#                543             159 |****                                          -
#                476             160 |***                                           -
#                419             161 |***                                           -
#                 28             162 |*                                             -
#
#               1039           > 95% |*******                               163.25409
#
#        mean of 95%       149.92972
#          95th %ile             162
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: atoi
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'atoi')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# note: measures atoi()
     prc thr      nsecs/call      samples   errors cnt/samp 
bind   1   1           70521           64        0     1024 
# bin/../bin-riscv64/bind -N bind -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     66836                      66836
#                        max    193308                     145600
#                       mean     84492.80303                81467.01562
#                     median     70609                      70521*
#                     stddev     27697.76818                21909.66696
#             standard error      3409.35958                 2738.70837
#       99% confidence level      8782.51028                 7054.91276
#                       skew         1.97124                    1.66000
#                   kurtosis         3.35558                    1.32456
#           time correlation      1114.15499                  928.77035
#
#               elapsed time        25.07367
#                   run time         5.71045
#          getnsecs overhead      1429
#
#          number of samples        66
#         number of outliers         2
#    number of final samples        64
#             ops per sample      1024.00000 (-B 1024)
#
#       recommended -B value        12
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 20           66836 |********************************    68123.70000
#                 17           69000 |***************************         69818.64706
#                  3           71164 |****                                71772.66667
#                  3           73328 |****                                74262.00000
#                  3           75492 |****                                76469.33333
#                  1           77656 |*                                   78257.00000
#                  1           79820 |*                                   81772.00000
#                  1           81984 |*                                   82540.00000
#                  1           84148 |*                                   84594.00000
#                  0           86312 |                                              -
#                  1           88476 |*                                   89262.00000
#                  0           90640 |                                              -
#                  0           92804 |                                              -
#                  0           94968 |                                              -
#                  1           97132 |*                                   97151.00000
#                  0           99296 |                                              -
#                  0          101460 |                                              -
#                  2          103624 |***                                105177.50000
#                  1          105788 |*                                  107905.00000
#                  1          107952 |*                                  108871.00000
#                  0          110116 |                                              -
#                  0          112280 |                                              -
#                  0          114444 |                                              -
#                  0          116608 |                                              -
#                  0          118772 |                                              -
#                  1          120936 |*                                  122498.00000
#                  1          123100 |*                                  124339.00000
#                  2          125264 |***                                126253.50000
#
#                  4           > 95% |******                             139233.75000
#
#        mean of 95%     77615.90000
#          95th %ile          136070
#
# WARNINGS
#     Too few samples, 66 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 22.8% of elapsed time.
#
# Usage: bind
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'bind')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-z bind to port 0 rather than seq. number
# notes: measures bind() on TCP
         prc thr      nsecs/call      samples   errors cnt/samp 
c_cond_1   1   1            1774        18391        0      497 
# bin/../bin-riscv64/cascade_cond -N c_cond_1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1707                       1707
#                        max    243486                       1990
#                       mean      1868.30478                 1799.27133
#                     median      1778                       1774*
#                     stddev      1968.29584                   63.42437
#             standard error        14.03065                    0.46769
#       99% confidence level        36.14296                    1.20476
#                       skew       106.33740                    1.28849
#                   kurtosis     12297.67873                    0.43627
#           time correlation         0.02925                    0.01058
#
#               elapsed time        20.00504
#                   run time        17.93053
#          getnsecs overhead      1429
#
#          number of samples     19680
#         number of outliers      1289
#    number of final samples     18391
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4            1707 |*                                    1709.75000
#                 28            1715 |*                                    1720.57143
#                174            1723 |**                                   1727.58621
#                612            1731 |********                             1735.09641
#               1306            1739 |*****************                    1742.91424
#               2025            1747 |***************************          1750.74815
#               2375            1755 |********************************     1758.49600
#               1953            1763 |**************************           1766.43113
#               1505            1771 |********************                 1774.36013
#               1235            1779 |****************                     1782.39514
#               1127            1787 |***************                      1790.38066
#                868            1795 |***********                          1798.35829
#                620            1803 |********                             1806.12097
#                336            1811 |****                                 1814.14286
#                222            1819 |**                                   1821.95495
#                104            1827 |*                                    1829.93269
#                 69            1835 |*                                    1837.86957
#                 48            1843 |*                                    1846.56250
#                 73            1851 |*                                    1854.78082
#                 97            1859 |*                                    1862.36082
#                161            1867 |**                                   1870.96273
#                217            1875 |**                                   1878.81567
#                310            1883 |****                                 1886.43226
#                430            1891 |*****                                1894.71395
#                423            1899 |*****                                1902.45154
#                411            1907 |*****                                1910.62530
#                322            1915 |****                                 1918.67702
#                283            1923 |***                                  1926.34276
#                133            1931 |*                                    1932.48120
#
#                920           > 95% |************                         1957.22826
#
#        mean of 95%      1790.95352
#          95th %ile            1935
#
# Usage: cascade_cond
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_cond')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-o] (do signal outside mutex)
#     [-s] (force PTHREAD_PROCESS_SHARED)
# notes: thread cascade using pthread_cond_wait()/pthread_cond_signal()
          prc thr      nsecs/call      samples   errors cnt/samp 
c_cond_o1   1   1             718        19360        0     1157 
# bin/../bin-riscv64/cascade_cond -N c_cond_o1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -o 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       698                        698
#                        max    295636                        806
#                       mean       772.86511                  729.62020
#                     median       719                        718*
#                     stddev      2215.24156                   25.32050
#             standard error        15.38103                    0.18198
#       99% confidence level        39.62152                    0.46878
#                       skew       121.27287                    1.31216
#                   kurtosis     15539.30283                    0.37421
#           time correlation         0.01552                    0.00394
#
#               elapsed time        20.00456
#                   run time        17.80775
#          getnsecs overhead      1429
#
#          number of samples     20743
#         number of outliers      1383
#    number of final samples     19360
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             698 |*                                     698.00000
#                 59             701 |*                                     702.54237
#                372             704 |***                                   705.34409
#               1307             707 |************                          708.25708
#               3129             710 |******************************        711.13455
#               3317             713 |********************************      713.95990
#               1968             716 |******************                    716.80793
#               1196             719 |***********                           719.93060
#               1103             722 |**********                            723.01360
#                955             725 |*********                             725.92775
#                615             728 |*****                                 728.89919
#                368             731 |***                                   731.87500
#                239             734 |**                                    735.05439
#                193             737 |*                                     738.06736
#                167             740 |*                                     740.87425
#                101             743 |*                                     744.02970
#                 61             746 |*                                     746.90164
#                 71             749 |*                                     750.02817
#                 52             752 |*                                     753.13462
#                113             755 |*                                     756.16814
#                210             758 |**                                    759.19524
#                376             761 |***                                   762.10106
#                482             764 |****                                  764.98755
#                421             767 |****                                  767.87886
#                359             770 |***                                   770.95822
#                389             773 |***                                   773.98972
#                356             776 |***                                   776.97191
#                266             779 |**                                    779.95489
#                146             782 |*                                     782.46575
#
#                968           > 95% |*********                             792.60537
#
#        mean of 95%       726.30519
#          95th %ile             783
#
# Usage: cascade_cond
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_cond')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-o] (do signal outside mutex)
#     [-s] (force PTHREAD_PROCESS_SHARED)
# notes: thread cascade using pthread_cond_wait()/pthread_cond_signal()
           prc thr      nsecs/call      samples   errors cnt/samp 
c_cond_os1   1   1             869        18311        0      974 
# bin/../bin-riscv64/cascade_cond -N c_cond_os1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -o -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       842                        842
#                        max    223536                        963
#                       mean       928.63206                  880.21512
#                     median       871                        869*
#                     stddev      1963.91146                   27.56871
#             standard error        13.79517                    0.20373
#       99% confidence level        35.53637                    0.52481
#                       skew       102.31288                    1.36701
#                   kurtosis     10733.89885                    0.64575
#           time correlation         0.01731                    0.00456
#
#               elapsed time        20.00515
#                   run time        17.74033
#          getnsecs overhead      1429
#
#          number of samples     20267
#         number of outliers      1956
#    number of final samples     18311
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4             842 |*                                     844.00000
#                 65             846 |*                                     848.07692
#                369             850 |****                                  852.08943
#               1413             854 |*****************                     855.78839
#               2580             858 |*******************************       859.60194
#               2596             862 |********************************      863.46957
#               2456             866 |******************************        867.47883
#               1848             870 |**********************                871.33658
#               1091             874 |*************                         875.33547
#                755             878 |*********                             879.36026
#                559             882 |******                                883.37746
#                374             886 |****                                  887.45455
#                249             890 |***                                   891.46586
#                188             894 |**                                    895.44681
#                131             898 |*                                     899.35878
#                 86             902 |*                                     903.65116
#                100             906 |*                                     907.68000
#                160             910 |*                                     911.82500
#                329             914 |****                                  915.68997
#                394             918 |****                                  919.46193
#                334             922 |****                                  923.39820
#                374             926 |****                                  927.70588
#                401             930 |****                                  931.39900
#                317             934 |***                                   935.47319
#                222             938 |**                                    939.01351
#
#                916           > 95% |***********                           950.69105
#
#        mean of 95%       876.50394
#          95th %ile             941
#
# Usage: cascade_cond
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_cond')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-o] (do signal outside mutex)
#     [-s] (force PTHREAD_PROCESS_SHARED)
# notes: thread cascade using pthread_cond_wait()/pthread_cond_signal()
          prc thr      nsecs/call      samples   errors cnt/samp 
c_cond_s1   1   1             858        19756        0      981 
# bin/../bin-riscv64/cascade_cond -N c_cond_s1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       838                        838
#                        max    307736                        952
#                       mean       915.46374                  870.21411
#                     median       859                        858*
#                     stddev      2303.59679                   27.16493
#             standard error        15.93279                    0.19327
#       99% confidence level        41.04286                    0.49786
#                       skew       120.83726                    1.50406
#                   kurtosis     15477.69680                    0.91144
#           time correlation         0.01624                    0.00401
#
#               elapsed time        20.00483
#                   run time        18.07898
#          getnsecs overhead      1429
#
#          number of samples     20904
#         number of outliers      1148
#    number of final samples     19756
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6             838 |*                                     839.16667
#                 59             841 |*                                     842.44068
#                381             844 |****                                  845.29659
#               1456             847 |***************                       848.25069
#               2689             850 |****************************          851.03756
#               2987             853 |********************************      854.00000
#               2357             856 |*************************             856.93509
#               1520             859 |****************                      859.91579
#               1153             862 |************                          862.94970
#               1072             865 |***********                           866.02799
#                940             868 |**********                            868.96170
#                655             871 |*******                               871.89771
#                358             874 |***                                   874.79609
#                161             877 |*                                     877.90062
#                 95             880 |*                                     881.03158
#                 62             883 |*                                     883.95161
#                 57             886 |*                                     886.91228
#                 34             889 |*                                     889.97059
#                 34             892 |*                                     892.88235
#                 30             895 |*                                     896.20000
#                 54             898 |*                                     899.16667
#                 72             901 |*                                     902.09722
#                117             904 |*                                     905.17949
#                203             907 |**                                    908.00000
#                294             910 |***                                   911.12585
#                366             913 |***                                   913.96995
#                347             916 |***                                   916.97695
#                313             919 |***                                   919.94888
#                300             922 |***                                   923.01333
#                272             925 |**                                    926.01471
#                250             928 |**                                    929.06400
#                 74             931 |*                                     931.10811
#
#                988           > 95% |**********                            940.61943
#
#        mean of 95%       866.50778
#          95th %ile             932
#
# Usage: cascade_cond
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_cond')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-o] (do signal outside mutex)
#     [-s] (force PTHREAD_PROCESS_SHARED)
# notes: thread cascade using pthread_cond_wait()/pthread_cond_signal()
          prc thr      nsecs/call      samples   errors cnt/samp 
c_fcntl_1   1   1          347436        15040        0        2 
# bin/../bin-riscv64/cascade_fcntl -N c_fcntl_1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    329586                     329586
#                        max   2566636                    1518286
#                       mean    549344.05194               541499.56383
#                     median    347536                     347436*
#                     stddev    340722.02176               326306.86350
#             standard error      2769.73161                 2660.73909
#       99% confidence level      7134.82864                 6854.06391
#                       skew         1.40364                    1.27956
#                   kurtosis         0.74552                   -0.12268
#           time correlation        62.11902                   60.12781
#
#               elapsed time        20.00358
#                   run time        16.64806
#          getnsecs overhead      1429
#
#          number of samples     15133
#         number of outliers        93
#    number of final samples     15040
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#               9062          329586 |********************************   342666.53410
#                293          356462 |*                                  366611.59727
#                683          383338 |**                                 397472.38360
#                369          410214 |*                                  422070.68835
#                463          437090 |*                                  450620.01728
#                226          463966 |*                                  474015.64602
#                 63          490842 |*                                  501270.92063
#                 35          517718 |*                                  529807.42857
#                 44          544594 |*                                  558828.04545
#                 66          571470 |*                                  584315.54545
#                 43          598346 |*                                  610090.65116
#                 21          625222 |*                                  636840.76190
#                 18          652098 |*                                  663852.66667
#                 22          678974 |*                                  691651.90909
#                 12          705850 |*                                  721427.66667
#                 22          732726 |*                                  748772.36364
#                 66          759602 |*                                  772867.06061
#                 46          786478 |*                                  798600.13043
#                 27          813354 |*                                  827393.40741
#                 44          840230 |*                                  856363.27273
#                 60          867106 |*                                  879238.50000
#                 56          893982 |*                                  906550.28571
#                 35          920858 |*                                  933258.85714
#                 37          947734 |*                                  961036.00000
#                 15          974610 |*                                  986432.66667
#                157         1001486 |*                                 1021077.08280
#                768         1028362 |**                                1043558.98177
#                365         1055238 |*                                 1064834.35616
#                 89         1082114 |*                                 1093606.78652
#                251         1108990 |*                                 1126189.58566
#                467         1135866 |*                                 1149188.46253
#                363         1162742 |*                                 1175622.77686
#
#                752           > 95% |**                                1270175.22872
#
#        mean of 95%    503148.21305
#          95th %ile         1189586
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: cascade_fcntl
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_fcntl')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-d directory for temp file (default /tmp)]
# notes: thread cascade using fcntl region locking
        prc thr      nsecs/call      samples   errors cnt/samp 
c_flock   1   1           30453        16932        0       26 
# bin/../bin-riscv64/cascade_flock -N c_flock -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     29028                      29028
#                        max    457236                      36710
#                       mean     35416.64056                31180.28207
#                     median     30580                      30453*
#                     stddev     17295.02034                 1843.48955
#             standard error       124.76408                   14.16728
#       99% confidence level       321.39228                   36.49492
#                       skew         6.16047                    1.65337
#                   kurtosis        59.19645                    1.39157
#           time correlation         1.45780                    0.30975
#
#               elapsed time        20.00492
#                   run time        17.78044
#          getnsecs overhead      1429
#
#          number of samples     19216
#         number of outliers      2284
#    number of final samples     16932
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13           29028 |*                                   29147.23077
#                152           29233 |**                                  29357.38816
#                583           29438 |*******                             29553.32419
#               1258           29643 |****************                    29755.34579
#               1898           29848 |*************************           29953.82719
#               2419           30053 |********************************    30157.54196
#               2240           30258 |*****************************       30356.69866
#               1694           30463 |**********************              30558.83235
#               1320           30668 |*****************                   30766.52424
#                897           30873 |***********                         30967.30435
#                559           31078 |*******                             31174.75671
#                383           31283 |*****                               31377.88512
#                222           31488 |**                                  31588.16216
#                165           31693 |**                                  31790.81212
#                110           31898 |*                                   31998.29091
#                 87           32103 |*                                   32194.74713
#                 71           32308 |*                                   32410.64789
#                 60           32513 |*                                   32606.91667
#                 48           32718 |*                                   32820.95833
#                 52           32923 |*                                   33027.50000
#                 65           33128 |*                                   33234.86154
#                 57           33333 |*                                   33437.24561
#                 59           33538 |*                                   33632.23729
#                 57           33743 |*                                   33839.28070
#                 77           33948 |*                                   34054.45455
#                125           34153 |*                                   34260.56000
#                199           34358 |**                                  34459.55779
#                251           34563 |***                                 34669.00797
#                242           34768 |***                                 34871.60744
#                269           34973 |***                                 35075.42007
#                251           35178 |***                                 35279.97211
#                202           35383 |**                                  35487.22277
#
#                847           > 95% |***********                         36089.56907
#
#        mean of 95%     30921.77003
#          95th %ile           35585
#
# Usage: cascade_flock
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_flock')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-d directory for temp files (default /tmp)]
# notes: thread cascade using flock file locking
          prc thr      nsecs/call      samples   errors cnt/samp 
c_lockf_1   1   1          298486        17663        0        2 
# bin/../bin-riscv64/cascade_lockf -N c_lockf_1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    283236                     283236
#                        max   6702686                    1218636
#                       mean    444820.83588               437135.90375
#                     median    298586                     298486*
#                     stddev    278929.43102               260547.90374
#             standard error      2091.13445                 1960.44810
#       99% confidence level      5386.76233                 5050.11430
#                       skew         2.32580                    1.57925
#                   kurtosis        16.64163                    0.78408
#           time correlation        40.26773                   38.52349
#
#               elapsed time        20.00461
#                   run time        15.85391
#          getnsecs overhead      1429
#
#          number of samples     17792
#         number of outliers       129
#    number of final samples     17663
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#              11387          283236 |********************************   295142.90261
#                548          306218 |*                                  311534.44891
#                554          329200 |*                                  343754.68231
#                512          352182 |*                                  361561.87891
#                241          375164 |*                                  388050.52282
#                421          398146 |*                                  408832.91211
#                155          421128 |*                                  431832.45161
#                 71          444110 |*                                  454757.12676
#                 69          467092 |*                                  480662.81159
#                 80          490074 |*                                  501446.62500
#                 50          513056 |*                                  523848.00000
#                 45          536038 |*                                  547830.44444
#                 37          559020 |*                                  567611.67568
#                 19          582002 |*                                  592767.57895
#                 13          604984 |*                                  614805.23077
#                 37          627966 |*                                  642086.00000
#                 49          650948 |*                                  661353.34694
#                 19          673930 |*                                  682791.26316
#                 22          696912 |*                                  709258.72727
#                 45          719894 |*                                  733518.22222
#                 76          742876 |*                                  753370.86842
#                 33          765858 |*                                  775916.30303
#                 35          788840 |*                                  801564.57143
#                 26          811822 |*                                  822268.69231
#                 32          834804 |*                                  844926.62500
#                 78          857786 |*                                  872680.23077
#                713          880768 |**                                 894338.87518
#                673          903750 |*                                  912890.97771
#                121          926732 |*                                  934865.75207
#                 59          949714 |*                                  962238.54237
#                206          972696 |*                                  986146.67961
#                353          995678 |*                                 1006733.02550
#
#                884           > 95% |**                                1085080.96606
#
#        mean of 95%    402998.98051
#          95th %ile         1018636
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 79.3% of elapsed time.
#
# Usage: cascade_lockf
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_lockf')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-d directory for temp files (default /tmp)]
# notes: thread cascade using lockf file locking
          prc thr      nsecs/call      samples   errors cnt/samp 
c_mutex_1   1   1             343        20048        0     2368 
# bin/../bin-riscv64/cascade_mutex -N c_mutex_1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       329                        329
#                        max    181586                        382
#                       mean       372.97093                  348.41690
#                     median       344                        343*
#                     stddev      1312.78249                   11.13161
#             standard error         8.97504                    0.07862
#       99% confidence level        23.11972                    0.20252
#                       skew       127.84834                    1.49516
#                   kurtosis     17198.64739                    0.88993
#           time correlation         0.00813                    0.00162
#
#               elapsed time        20.00603
#                   run time        17.98241
#          getnsecs overhead      1429
#
#          number of samples     21395
#         number of outliers      1347
#    number of final samples     20048
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             329 |*                                     329.00000
#                  6             331 |*                                     331.66667
#                  8             333 |*                                     334.00000
#                 47             335 |*                                     335.72340
#                342             337 |**                                    337.75146
#               2372             339 |*************                         339.68634
#               5451             341 |********************************      341.50890
#               3186             343 |******************                    343.35154
#               1503             345 |********                              345.48170
#               1604             347 |*********                             347.52369
#               1212             349 |*******                               349.40099
#                385             351 |**                                    351.32727
#                142             353 |*                                     353.36620
#                 64             355 |*                                     355.40625
#                 52             357 |*                                     357.57692
#                101             359 |*                                     359.50495
#                 61             361 |*                                     361.60656
#                192             363 |*                                     363.64062
#                526             365 |***                                   365.63308
#                582             367 |***                                   367.43814
#                509             369 |**                                    369.49116
#                471             371 |**                                    371.46072
#                228             373 |*                                     373.00439
#
#               1003           > 95% |*****                                 377.05783
#
#        mean of 95%       346.90853
#          95th %ile             374
#
# Usage: cascade_mutex
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_mutex')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s] (force PTHREAD_PROCESS_SHARED)
# notes: thread cascade using pthread_mutexes
           prc thr      nsecs/call      samples   errors cnt/samp 
c_mutex_s1   1   1             380        20038        0     2166 
# bin/../bin-riscv64/cascade_mutex -N c_mutex_s1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       370                        370
#                        max    178736                        423
#                       mean       408.77442                  385.64722
#                     median       380                        380*
#                     stddev      1392.34097                   12.30942
#             standard error         9.60921                    0.08696
#       99% confidence level        24.75332                    0.22400
#                       skew       114.48018                    1.40504
#                   kurtosis     13780.91818                    0.63697
#           time correlation         0.00815                    0.00182
#
#               elapsed time        20.00453
#                   run time        17.71707
#          getnsecs overhead      1429
#
#          number of samples     20995
#         number of outliers       957
#    number of final samples     20038
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14             370 |*                                     370.85714
#                 99             372 |*                                     372.80808
#                866             374 |******                                374.74711
#               4056             376 |*****************************         376.59739
#               4350             378 |********************************      378.42299
#               2130             380 |***************                       380.40376
#               1459             382 |**********                            382.54489
#               1372             384 |**********                            384.46064
#                772             386 |*****                                 386.37565
#                370             388 |**                                    388.40541
#                335             390 |**                                    390.44179
#                206             392 |*                                     392.33010
#                 80             394 |*                                     394.38750
#                 85             396 |*                                     396.56471
#                107             398 |*                                     398.47664
#                116             400 |*                                     400.65517
#                373             402 |**                                    402.60590
#                579             404 |****                                  404.51123
#                573             406 |****                                  406.47818
#                444             408 |***                                   408.47748
#                413             410 |***                                   410.46489
#                237             412 |*                                     412.13924
#
#               1002           > 95% |*******                               416.80140
#
#        mean of 95%       384.00735
#          95th %ile             413
#
# Usage: cascade_mutex
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'cascade_mutex')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s] (force PTHREAD_PROCESS_SHARED)
# notes: thread cascade using pthread_mutexes
          prc thr      nsecs/call      samples   errors cnt/samp  dirs  gets
chdir_tmp   1   1          285057        18747        0        2     2     n
# bin/../bin-riscv64/chdir -N chdir_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 /tmp/libmicro.2370/0/1/2/3/4/5/6/7/8/9 /tmp/libmicro.2370/1/2/3/4/5/6/7/8/9/0 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    273690                     273690
#                        max   1196271                     327390
#                       mean    298470.76970               290815.66880
#                     median    285657                     285057*
#                     stddev     45450.54315                12196.83591
#             standard error       318.05379                   89.08022
#       99% confidence level       819.30656                  229.47065
#                       skew        10.02579                    1.69723
#                   kurtosis       128.33358                    1.25493
#           time correlation         3.49730                    1.74456
#
#               elapsed time        20.00372
#                   run time        17.76083
#          getnsecs overhead      1429
#
#          number of samples     20421
#         number of outliers      1674
#    number of final samples     18747
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          273690 |*                                  273690.00000
#                  0          275100 |                                              -
#                  2          276510 |*                                  277457.00000
#                  1          277920 |*                                  279290.00000
#                  6          279330 |*                                  280133.33333
#                177          280740 |*                                  281855.18644
#               3247          282150 |******************                 283069.51617
#               5724          283560 |********************************   284214.17994
#               1826          284970 |**********                         285585.97700
#               1968          286380 |***********                        287133.09654
#               1390          287790 |*******                            288368.76331
#                517          289200 |**                                 289825.92650
#                277          290610 |*                                  291229.24549
#                147          292020 |*                                  292681.46939
#                 67          293430 |*                                  294065.82090
#                 59          294840 |*                                  295535.01695
#                 40          296250 |*                                  296918.82500
#                 25          297660 |*                                  298284.04000
#                 11          299070 |*                                  299850.63636
#                 18          300480 |*                                  301215.05556
#                 14          301890 |*                                  302602.35714
#                 14          303300 |*                                  304106.35714
#                  8          304710 |*                                  305406.00000
#                 13          306120 |*                                  306736.69231
#                 21          307530 |*                                  308514.14286
#                 80          308940 |*                                  309801.12500
#                242          310350 |*                                  311144.61570
#                375          311760 |**                                 312521.18667
#                425          313170 |**                                 313913.67529
#                482          314580 |**                                 315269.03527
#                376          315990 |**                                 316660.30053
#                256          317400 |*                                  318071.58984
#
#                938           > 95% |*****                              322615.86887
#
#        mean of 95%    289140.75232
#          95th %ile          318790
#
# Usage: chdir
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'chdir')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g] (do getcwd() also)
# directory ... (default = /)
# notes: measures chdir() and (optionally) getcwd()
          prc thr      nsecs/call      samples   errors cnt/samp  dirs  gets
chdir_usr   1   1          308936        13894        0        2     2     n
# bin/../bin-riscv64/chdir -N chdir_usr -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 /var/tmp/libmicro.2370/0/1/2/3/4/5/6/7/8/9 /var/tmp/libmicro.2370/1/2/3/4/5/6/7/8/9/0 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    295190                     301757
#                        max  10761186                     317886
#                       mean    328690.33978               309824.05981
#                     median    311857                     308936*
#                     stddev     87614.34059                 2692.27243
#             standard error       595.82294                   22.84049
#       99% confidence level      1534.83990                   58.83709
#                       skew        79.82040                    0.86294
#                   kurtosis      9307.24487                    0.18740
#           time correlation         4.46807                    0.63419
#
#               elapsed time        20.00411
#                   run time        17.54022
#          getnsecs overhead      1429
#
#          number of samples     21623
#         number of outliers      7729
#    number of final samples     13894
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13          301757 |*                                  301954.46154
#                 15          302177 |*                                  302366.66667
#                  9          302597 |*                                  302761.66667
#                  3          303017 |*                                  303357.00000
#                  8          303437 |*                                  303646.00000
#                 10          303857 |*                                  304012.70000
#                  6          304277 |*                                  304440.33333
#                  7          304697 |*                                  304902.71429
#                 20          305117 |*                                  305319.90000
#                 45          305537 |*                                  305805.68889
#                139          305957 |***                                306222.89928
#                467          306377 |**********                         306617.96146
#                909          306797 |*******************                307031.09021
#               1286          307217 |****************************       307436.32737
#               1070          307637 |***********************            307848.67290
#               1468          308057 |********************************   308264.63624
#               1358          308477 |*****************************      308681.72386
#                953          308897 |********************               309098.80168
#                691          309317 |***************                    309533.80608
#                507          309737 |***********                        309934.98422
#                482          310157 |**********                         310349.54564
#                434          310577 |*********                          310778.67972
#                377          310997 |********                           311209.19098
#                452          311417 |*********                          311627.30752
#                400          311837 |********                           312041.64000
#                407          312257 |********                           312459.05897
#                359          312677 |*******                            312884.60167
#                317          313097 |******                             313304.25552
#                312          313517 |******                             313726.86859
#                257          313937 |*****                              314155.91829
#                200          314357 |****                               314557.41500
#                218          314777 |****                               314987.44037
#
#                695           > 95% |***************                    316399.19856
#
#        mean of 95%    309477.84256
#          95th %ile          315190
#
# Usage: chdir
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'chdir')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g] (do getcwd() also)
# directory ... (default = /)
# notes: measures chdir() and (optionally) getcwd()
            prc thr      nsecs/call      samples   errors cnt/samp  dirs  gets
chgetwd_tmp   1   1          327936        19365        0        1     2     y
# bin/../bin-riscv64/chdir -N chgetwd_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -g /tmp/libmicro.2370/0/1/2/3/4/5/6/7/8/9 /tmp/libmicro.2370/1/2/3/4/5/6/7/8/9/0 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    314336                     320386
#                        max   1441271                     337486
#                       mean    346375.24539               328871.39169
#                     median    328886                     327936*
#                     stddev     58270.08597                 2881.03248
#             standard error       370.00796                   20.70329
#       99% confidence level       953.14050                   53.33168
#                       skew         8.10932                    0.93126
#                   kurtosis        88.89360                   -0.02051
#           time correlation         3.94585                    0.48537
#
#               elapsed time        20.00401
#                   run time        17.07962
#          getnsecs overhead      1429
#
#          number of samples     24801
#         number of outliers      5436
#    number of final samples     19365
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2          320386 |*                                  320436.00000
#                  0          320830 |                                              -
#                  0          321274 |                                              -
#                  2          321718 |*                                  321936.00000
#                  1          322162 |*                                  322486.00000
#                  2          322606 |*                                  322786.00000
#                 12          323050 |*                                  323344.33333
#                 17          323494 |*                                  323780.11765
#                 38          323938 |*                                  324186.00000
#                108          324382 |*                                  324635.07407
#                368          324826 |*****                              325086.13587
#                835          325270 |************                       325493.96407
#               1255          325714 |******************                 325943.56972
#               1419          326158 |*********************              326392.34249
#               1769          326602 |**************************         326842.89655
#               2116          327046 |********************************   327288.24480
#               1662          327490 |*************************          327705.43442
#               1435          327934 |*********************              328125.86063
#               1253          328378 |******************                 328573.94892
#                898          328822 |*************                      329031.76837
#                601          329266 |*********                          329467.86356
#                403          329710 |******                             329926.94293
#                355          330154 |*****                              330390.08451
#                363          330598 |*****                              330836.96419
#                310          331042 |****                               331248.25806
#                411          331486 |******                             331700.35523
#                498          331930 |*******                            332127.56627
#                523          332374 |*******                            332577.39579
#                535          332818 |********                           333031.42056
#                468          333262 |*******                            333484.61111
#                392          333706 |*****                              333936.89286
#                345          334150 |*****                              334372.52174
#
#                969           > 95% |**************                     335737.97110
#
#        mean of 95%    328509.69809
#          95th %ile          334586
#
# Usage: chdir
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'chdir')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g] (do getcwd() also)
# directory ... (default = /)
# notes: measures chdir() and (optionally) getcwd()
            prc thr      nsecs/call      samples   errors cnt/samp  dirs  gets
chgetwd_usr   1   1          375786         7835        0        1     2     y
# bin/../bin-riscv64/chdir -N chgetwd_usr -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -g /var/tmp/libmicro.2370/0/1/2/3/4/5/6/7/8/9 /var/tmp/libmicro.2370/1/2/3/4/5/6/7/8/9/0 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    356436                     356436
#                        max  16811986                     456486
#                       mean    396374.25758               385185.55712
#                     median    376086                     375786*
#                     stddev    194599.33171                23768.06088
#             standard error      2151.08977                  268.51852
#       99% confidence level      5541.20724                  691.70372
#                       skew        73.80537                    1.42415
#                   kurtosis      6187.18117                    0.76985
#           time correlation        15.99025                    9.04819
#
#               elapsed time        20.00766
#                   run time         6.31588
#          getnsecs overhead      1429
#
#          number of samples      8184
#         number of outliers       349
#    number of final samples      7835
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          356436 |*                                  356869.33333
#                  6          359015 |*                                  361311.00000
#                428          361594 |**********                         363371.59579
#                978          364173 |*************************          365453.27505
#                503          366752 |************                       367993.70378
#                411          369331 |**********                         370643.94404
#                904          371910 |***********************            373484.97677
#               1250          374489 |********************************   375717.63200
#                577          377068 |**************                     378197.25650
#                409          379647 |**********                         380885.03423
#                325          382226 |********                           383283.13846
#                127          384805 |***                                385879.85827
#                 71          387384 |*                                  388597.26761
#                 48          389963 |*                                  391138.18750
#                 36          392542 |*                                  393751.27778
#                 38          395121 |*                                  396593.89474
#                 22          397700 |*                                  398876.22727
#                 76          400279 |*                                  401938.23684
#                 93          402858 |**                                 404195.40860
#                 84          405437 |**                                 406770.40476
#                 81          408016 |**                                 409436.61728
#                 72          410595 |*                                  411915.79167
#                 66          413174 |*                                  414503.12121
#                 67          415753 |*                                  416986.82090
#                 61          418332 |*                                  419535.59016
#                 73          420911 |*                                  422390.45205
#                109          423490 |**                                 424928.84404
#                124          426069 |***                                427285.47581
#                 95          428648 |**                                 429904.42105
#                 90          431227 |**                                 432536.38889
#                101          433806 |**                                 435117.68317
#                115          436385 |**                                 437543.26087
#
#                392           > 95% |**********                         446161.70153
#
#        mean of 95%    381974.13046
#          95th %ile          438936
#
# WARNINGS
#     Actual benchmark run time only accounts for 31.6% of elapsed time.
#
# Usage: chdir
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'chdir')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g] (do getcwd() also)
# directory ... (default = /)
# notes: measures chdir() and (optionally) getcwd()
              prc thr      nsecs/call      samples   errors cnt/samp 
clock_gettime   1   1            3685         6125        0      246 
# bin/../bin-riscv64/clock_gettime -N clock_gettime -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      3471                       3471
#                        max     53997                       4151
#                       mean      3858.13283                 3709.79771
#                     median      3687                       3685*
#                     stddev      1116.15092                  146.92077
#             standard error        13.91173                    1.87728
#       99% confidence level        35.83662                    4.83589
#                       skew        19.85370                    0.85905
#                   kurtosis       712.99694                    0.10142
#           time correlation         0.20265                    0.07846
#
#               elapsed time        20.00460
#                   run time         6.03753
#          getnsecs overhead      1429
#
#          number of samples      6437
#         number of outliers       312
#    number of final samples      6125
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 19            3471 |*                                    3481.26316
#                109            3488 |****                                 3496.87156
#                187            3505 |*******                              3513.46524
#                274            3522 |**********                           3530.66788
#                318            3539 |************                         3547.65409
#                334            3556 |************                         3562.70958
#                191            3573 |*******                              3580.53403
#                136            3590 |*****                                3597.78676
#                127            3607 |****                                 3614.62205
#                150            3624 |*****                                3632.90667
#                373            3641 |**************                       3650.51475
#                407            3658 |***************                      3665.81081
#                830            3675 |********************************     3683.97952
#                386            3692 |**************                       3699.20984
#                307            3709 |***********                          3717.56026
#                309            3726 |***********                          3732.20065
#                128            3743 |****                                 3750.83594
#                141            3760 |*****                                3767.46809
#                 80            3777 |***                                  3785.05000
#                 74            3794 |**                                   3802.36486
#                 48            3811 |*                                    3819.22917
#                 48            3828 |*                                    3836.06250
#                 31            3845 |*                                    3852.58065
#                 49            3862 |*                                    3870.20408
#                 55            3879 |**                                   3886.76364
#                 86            3896 |***                                  3904.90698
#                123            3913 |****                                 3921.09756
#                179            3930 |******                               3938.38547
#                125            3947 |****                                 3954.45600
#                105            3964 |****                                 3971.60952
#                 78            3981 |***                                  3989.25641
#                 11            3998 |*                                    3999.63636
#
#                307           > 95% |***********                          4059.87296
#
#        mean of 95%      3691.32520
#          95th %ile            4001
#
# WARNINGS
#     Actual benchmark run time only accounts for 30.2% of elapsed time.
#
# Usage: clock_gettime
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_gettime')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# note: measures clock_gettime(CLOCK_REALTIME)
                prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep   1   1         3851671         4756        0        1        1      rel     real        no     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    957771                    3152871
#                        max   6657471                    4576671
#                       mean   3868255.74385              3864835.06644
#                     median   3852471                    3851671*
#                     stddev    358752.76673               237876.58301
#             standard error      5075.05303                 3449.29841
#       99% confidence level     13073.33660                 8885.39271
#                       skew        -0.34146                    0.15239
#                   kurtosis        13.92828                    0.53785
#           time correlation       206.38649                  165.72848
#
#               elapsed time        20.01420
#                   run time        19.33990
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       241
#    number of final samples      4756
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 20         3152871 |*                                 3171046.00000
#                 14         3188284 |*                                 3206106.71429
#                 21         3223697 |*                                 3243104.33333
#                 27         3259110 |**                                3276300.62963
#                 20         3294523 |*                                 3315356.00000
#                 12         3329936 |*                                 3347362.66667
#                 16         3365349 |*                                 3384846.00000
#                 21         3400762 |*                                 3419656.71429
#                 57         3436175 |****                              3452676.26316
#                 46         3471588 |***                               3491273.17391
#                 97         3507001 |*******                           3526556.56701
#                 93         3542414 |******                            3561549.49462
#                139         3577827 |**********                        3596187.54676
#                165         3613240 |************                      3632043.12121
#                204         3648653 |***************                   3666266.09804
#                208         3684066 |***************                   3703293.59615
#                238         3719479 |*****************                 3737466.79832
#                318         3754892 |***********************           3771532.63522
#                344         3790305 |*************************         3808325.06977
#                428         3825718 |********************************  3843768.19626
#                367         3861131 |***************************       3878057.37602
#                310         3896544 |***********************           3913145.83871
#                269         3931957 |********************              3948456.87361
#                198         3967370 |**************                    3984952.81818
#                142         4002783 |**********                        4018817.47887
#                146         4038196 |**********                        4054301.13699
#                113         4073609 |********                          4090576.30973
#                112         4109022 |********                          4124893.32143
#                 99         4144435 |*******                           4161726.55556
#                112         4179848 |********                          4196929.92857
#                 93         4215261 |******                            4232834.44086
#                 69         4250674 |*****                             4266733.31884
#
#                238           > 95% |*****************                 4400373.52101
#
#        mean of 95%   3836623.87738
#          95th %ile         4286071
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                    prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_d10   1   1         3847971         4791        0        1       10      rel     real        no     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_d10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    878271                    3134271
#                        max   6592471                    4595771
#                       mean   3866712.33954              3865076.82655
#                     median   3849271                    3847971*
#                     stddev    354049.83010               243645.40659
#             standard error      5008.02242                 3520.02009
#       99% confidence level     12900.66575                 9067.57176
#                       skew        -0.42381                    0.23005
#                   kurtosis        15.74011                    0.45162
#           time correlation       204.36663                  168.51990
#
#               elapsed time        20.01390
#                   run time        19.33670
#          getnsecs overhead      1429
#
#          number of samples      4998
#         number of outliers       207
#    number of final samples      4791
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6         3134271 |*                                 3158104.33333
#                 15         3170903 |*                                 3187984.33333
#                 15         3207535 |*                                 3221477.66667
#                 18         3244167 |*                                 3266359.88889
#                 34         3280799 |**                                3301585.70588
#                 27         3317431 |**                                3337393.22222
#                 18         3354063 |*                                 3369937.66667
#                 41         3390695 |***                               3411892.95122
#                 61         3427327 |****                              3447241.49180
#                 48         3463959 |***                               3482777.25000
#                 72         3500591 |*****                             3518530.72222
#                 90         3537223 |*******                           3555122.11111
#                107         3573855 |********                          3592345.76636
#                173         3610487 |*************                     3630160.59538
#                206         3647119 |****************                  3666350.61165
#                298         3683751 |***********************           3703881.06711
#                296         3720383 |***********************           3739374.76689
#                290         3757015 |***********************           3775579.62069
#                384         3793647 |******************************    3812966.31250
#                403         3830279 |********************************  3848393.82878
#                360         3866911 |****************************      3885576.55556
#                289         3903543 |**********************            3921689.68512
#                298         3940175 |***********************           3956127.37584
#                165         3976807 |*************                     3993380.69697
#                132         4013439 |**********                        4031427.06061
#                123         4050071 |*********                         4067107.58537
#                110         4086703 |********                          4106367.36364
#                 96         4123335 |*******                           4142255.37500
#                102         4159967 |********                          4178481.78431
#                 93         4196599 |*******                           4214062.39785
#                101         4233231 |********                          4249675.95050
#                 80         4269863 |******                            4286412.25000
#
#                240           > 95% |*******************               4415612.66667
#
#        mean of 95%   3836043.95430
#          95th %ile         4306471
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                     prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_d100   1   1         3837771         4798        0        1      100      rel     real        no     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_d100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    882371                    3120871
#                        max   8326071                    4597171
#                       mean   3866811.26521              3860038.37495
#                     median   3839471                    3837771*
#                     stddev    347223.65466               247479.82846
#             standard error      4912.44939                 3572.80805
#       99% confidence level     12654.46963                 9203.55354
#                       skew         0.20412                    0.21157
#                   kurtosis        17.71164                    0.58953
#           time correlation       202.32297                  170.01682
#
#               elapsed time        20.00923
#                   run time        19.32983
#          getnsecs overhead      1429
#
#          number of samples      4996
#         number of outliers       198
#    number of final samples      4798
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15         3120871 |*                                 3137851.00000
#                 16         3157575 |*                                 3174608.50000
#                 19         3194279 |*                                 3218871.00000
#                 16         3230983 |*                                 3254214.75000
#                 31         3267687 |**                                3284100.03226
#                 28         3304391 |*                                 3324753.14286
#                 19         3341095 |*                                 3361249.94737
#                 35         3377799 |**                                3398033.85714
#                 46         3414503 |***                               3434034.04348
#                 52         3451207 |***                               3467913.30769
#                 54         3487911 |***                               3506739.51852
#                 89         3524615 |*****                             3542545.15730
#                124         3561319 |********                          3580692.77419
#                165         3598023 |**********                        3618558.87879
#                166         3634727 |**********                        3654063.16867
#                231         3671431 |***************                   3690564.93939
#                292         3708135 |*******************               3727839.83562
#                334         3744839 |**********************            3763919.20359
#                409         3781543 |***************************       3800586.89242
#                483         3818247 |********************************  3836756.92133
#                354         3854951 |***********************           3874085.68927
#                304         3891655 |********************              3909378.56579
#                224         3928359 |**************                    3945096.44643
#                167         3965063 |***********                       3982080.58084
#                102         4001767 |******                            4019475.90196
#                125         4038471 |********                          4055874.20000
#                127         4075175 |********                          4092330.56693
#                122         4111879 |********                          4130757.06557
#                125         4148583 |********                          4166609.40000
#                106         4185287 |*******                           4202758.73585
#                 72         4221991 |****                              4237604.33333
#                106         4258695 |*******                           4277040.81132
#
#                240           > 95% |***************                   4421962.25000
#
#        mean of 95%   3830450.45700
#          95th %ile         4295371
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                      prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_d1000   1   1         3840971         4809        0        1     1000      rel     real        no     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_d1000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 1000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1082171                    3095071
#                        max   6889471                    4625771
#                       mean   3863784.42105              3861641.27760
#                     median   3841871                    3840971*
#                     stddev    335356.37975               255675.38340
#             standard error      4744.07884                 3686.90143
#       99% confidence level     12220.74710                 9497.45810
#                       skew        -0.11917                    0.19462
#                   kurtosis         9.37014                    0.65120
#           time correlation       203.25628                  175.01890
#
#               elapsed time        20.01582
#                   run time        19.31859
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       188
#    number of final samples      4809
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15         3095071 |*                                 3112571.00000
#                 25         3133206 |*                                 3150431.00000
#                 18         3171341 |*                                 3188998.77778
#                 14         3209476 |*                                 3227256.71429
#                 22         3247611 |*                                 3262784.63636
#                 30         3285746 |**                                3307861.00000
#                 22         3323881 |*                                 3346166.45455
#                 37         3362016 |**                                3380011.54054
#                 34         3400151 |**                                3417526.88235
#                 48         3438286 |***                               3461793.91667
#                 68         3476421 |*****                             3496584.23529
#                 83         3514556 |******                            3537733.65060
#                116         3552691 |********                          3571902.03448
#                158         3590826 |***********                       3610846.31646
#                192         3628961 |**************                    3648809.02083
#                223         3667096 |****************                  3686584.90135
#                303         3705231 |**********************            3725199.05281
#                353         3743366 |**************************        3763079.78187
#                403         3781501 |******************************    3800416.16129
#                425         3819636 |********************************  3838725.35294
#                391         3857771 |*****************************     3876533.65985
#                329         3895906 |************************          3914417.80851
#                212         3934041 |***************                   3953022.41509
#                156         3972176 |***********                       3988584.46154
#                140         4010311 |**********                        4028568.14286
#                137         4048446 |**********                        4068267.35036
#                101         4086581 |*******                           4105474.61386
#                124         4124716 |*********                         4145383.90323
#                115         4162851 |********                          4179268.39130
#                105         4200986 |*******                           4219388.14286
#                 91         4239121 |******                            4259197.37363
#                 78         4277256 |*****                             4294835.10256
#
#                241           > 95% |******************                4445585.52282
#
#        mean of 95%   3830833.36099
#          95th %ile         4315371
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                       prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_d10000   1   1         3839071         4777        0        1    10000      rel     real        no     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_d10000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 10000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    912871                    3123971
#                        max   7433071                    4592571
#                       mean   3864787.51621              3857981.90957
#                     median   3841971                    3839071*
#                     stddev    365964.55093               245164.18441
#             standard error      5177.59176                 3547.14878
#       99% confidence level     13337.47638                 9137.45525
#                       skew         0.00918                    0.18258
#                   kurtosis        15.29731                    0.57360
#           time correlation       209.05630                  169.37657
#
#               elapsed time        20.01328
#                   run time        19.32007
#          getnsecs overhead      1429
#
#          number of samples      4996
#         number of outliers       219
#    number of final samples      4777
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 21         3123971 |*                                 3141813.85714
#                 10         3160659 |*                                 3181101.00000
#                 17         3197347 |*                                 3215912.17647
#                 26         3234035 |**                                3256190.23077
#                 24         3270723 |*                                 3285941.83333
#                 22         3307411 |*                                 3324339.18182
#                 38         3344099 |**                                3363684.15789
#                 30         3380787 |**                                3401037.66667
#                 33         3417475 |**                                3438101.30303
#                 39         3454163 |***                               3477891.51282
#                 65         3490851 |*****                             3510018.69231
#                 99         3527539 |*******                           3545260.89899
#                131         3564227 |**********                        3583362.60305
#                164         3600915 |************                      3620639.29268
#                174         3637603 |*************                     3654448.01149
#                260         3674291 |********************              3694130.61538
#                299         3710979 |***********************           3729687.72241
#                329         3747667 |*************************         3766953.06687
#                409         3784355 |********************************  3803220.63325
#                390         3821043 |******************************    3839775.10256
#                330         3857731 |*************************         3876018.87879
#                364         3894419 |****************************      3912458.63736
#                274         3931107 |*********************             3948330.48905
#                161         3967795 |************                      3984599.57143
#                122         4004483 |*********                         4022967.72131
#                113         4041171 |********                          4059366.57522
#                112         4077859 |********                          4096386.17857
#                 98         4114547 |*******                           4133540.38776
#                101         4151235 |*******                           4168569.01980
#                 98         4187923 |*******                           4206131.20408
#                 94         4224611 |*******                           4245867.80851
#                 91         4261299 |*******                           4277709.46154
#
#                239           > 95% |******************                4408825.45607
#
#        mean of 95%   3828970.97796
#          95th %ile         4297971
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                  prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_m   1   1         3814771         4795        0        1        1      rel     mono        no     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    802571                    3104571
#                        max   7267071                    4563371
#                       mean   3834884.89412              3831917.92701
#                     median   3815371                    3814771*
#                     stddev    359421.57851               244211.20364
#             standard error      5085.02313                 3526.72242
#       99% confidence level     13099.01957                 9084.83695
#                       skew        -0.05672                    0.24137
#                   kurtosis        17.12500                    0.47097
#           time correlation       205.70094                  169.00579
#
#               elapsed time        20.01124
#                   run time        19.16973
#          getnsecs overhead      1429
#
#          number of samples      4996
#         number of outliers       201
#    number of final samples      4795
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 17         3104571 |*                                 3123629.82353
#                 13         3141022 |*                                 3156178.69231
#                 16         3177473 |*                                 3194396.00000
#                 16         3213924 |*                                 3233083.50000
#                 15         3250375 |*                                 3264637.66667
#                 17         3286826 |*                                 3304747.47059
#                 33         3323277 |**                                3341671.00000
#                 31         3359728 |**                                3374706.48387
#                 41         3396179 |***                               3416195.39024
#                 61         3432630 |*****                             3450566.08197
#                102         3469081 |********                          3487201.53922
#                 94         3505532 |*******                           3524442.27660
#                153         3541983 |************                      3560415.44444
#                153         3578434 |************                      3597899.10458
#                195         3614885 |****************                  3633842.79487
#                290         3651336 |************************          3669593.75862
#                290         3687787 |************************          3706493.06897
#                325         3724238 |***************************       3743177.46154
#                342         3760689 |****************************      3779976.26316
#                358         3797140 |******************************    3814274.35196
#                334         3833591 |****************************      3851560.52096
#                379         3870042 |********************************  3887163.08443
#                248         3906493 |********************              3924890.75806
#                176         3942944 |**************                    3959969.29545
#                150         3979395 |************                      3996663.66667
#                102         4015846 |********                          4034342.56863
#                114         4052297 |*********                         4069800.82456
#                128         4088748 |**********                        4107340.53125
#                110         4125199 |*********                         4144451.90909
#                 97         4161650 |********                          4180960.69072
#                 86         4198101 |*******                           4216189.60465
#                 69         4234552 |*****                             4253568.10145
#
#                240           > 95% |********************              4389987.66667
#
#        mean of 95%   3802513.59385
#          95th %ile         4270971
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                   prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_mr   1   1         3842371         4774        0        1        1      rel     mono       yes     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_mr -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -m -r 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    972271                    3120971
#                        max   6560271                    4597671
#                       mean   3861099.07985              3859020.47633
#                     median   3843271                    3842371*
#                     stddev    358632.35754               246773.53290
#             standard error      5073.34967                 3571.55524
#       99% confidence level     13068.94876                 9200.32629
#                       skew        -0.47743                    0.20052
#                   kurtosis        12.56824                    0.46187
#           time correlation       208.93497                  170.99471
#
#               elapsed time        20.01164
#                   run time        19.30416
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       223
#    number of final samples      4774
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11         3120971 |*                                 3138389.18182
#                 18         3157859 |*                                 3178459.88889
#                 15         3194747 |*                                 3213644.33333
#                 17         3231635 |*                                 3253935.70588
#                 21         3268523 |*                                 3287671.00000
#                 27         3305411 |**                                3326215.44444
#                 40         3342299 |***                               3362786.00000
#                 39         3379187 |**                                3396653.05128
#                 30         3416075 |**                                3431864.33333
#                 64         3452963 |****                              3472706.93750
#                 76         3489851 |*****                             3509656.52632
#                 98         3526739 |*******                           3547042.42857
#                108         3563627 |********                          3583399.70370
#                163         3600515 |************                      3618474.06748
#                195         3637403 |**************                    3656985.87179
#                248         3674291 |******************                3692726.24194
#                260         3711179 |*******************               3730060.23077
#                309         3748067 |***********************           3768306.27508
#                415         3784955 |*******************************   3803366.90361
#                414         3821843 |*******************************   3840266.41063
#                423         3858731 |********************************  3876769.81797
#                332         3895619 |*************************         3914407.74699
#                205         3932507 |***************                   3949441.24390
#                156         3969395 |***********                       3985988.30769
#                120         4006283 |*********                         4024356.00000
#                103         4043171 |*******                           4062498.18447
#                110         4080059 |********                          4096607.36364
#                121         4116947 |*********                         4135524.71901
#                120         4153835 |*********                         4171523.50000
#                105         4190723 |*******                           4208032.90476
#                 84         4227611 |******                            4246262.66667
#                 88         4264499 |******                            4280636.90909
#
#                239           > 95% |******************                4414257.61088
#
#        mean of 95%   3829758.80595
#          95th %ile         4301371
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                   prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_ms   1   1         3851071         4767        0        1        1      rel     mono        no  syscall
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_ms -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -m -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    806371                    3133171
#                        max   8147371                    4592571
#                       mean   3868115.81782              3867251.63038
#                     median   3851171                    3851071*
#                     stddev    380417.20348               244909.80738
#             standard error      5382.60366                 3547.18305
#       99% confidence level     13865.58703                 9137.54354
#                       skew         0.19011                    0.19862
#                   kurtosis        20.05166                    0.47821
#           time correlation       213.16186                  170.26870
#
#               elapsed time        20.00760
#                   run time        19.33215
#          getnsecs overhead      1429
#
#          number of samples      4995
#         number of outliers       228
#    number of final samples      4767
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14         3133171 |*                                 3152678.14286
#                 12         3169806 |*                                 3193146.00000
#                 16         3206441 |*                                 3226902.25000
#                 20         3243076 |*                                 3264416.00000
#                 21         3279711 |*                                 3296723.38095
#                 25         3316346 |*                                 3331007.00000
#                 35         3352981 |**                                3370253.85714
#                 32         3389616 |**                                3405339.75000
#                 52         3426251 |****                              3445955.61538
#                 53         3462886 |****                              3482259.67925
#                 51         3499521 |***                               3521000.41176
#                104         3536156 |********                          3557390.23077
#                130         3572791 |**********                        3592448.69231
#                178         3609426 |*************                     3629335.60674
#                207         3646061 |****************                  3663290.32367
#                207         3682696 |****************                  3701868.10145
#                288         3719331 |**********************            3738278.98611
#                304         3755966 |***********************           3774927.46382
#                400         3792601 |*******************************   3811653.50000
#                409         3829236 |********************************  3848175.15648
#                400         3865871 |*******************************   3882619.00000
#                291         3902506 |**********************            3920881.99656
#                199         3939141 |***************                   3956631.30151
#                179         3975776 |**************                    3993324.07263
#                157         4012411 |************                      4029753.16561
#                131         4049046 |**********                        4068516.03817
#                141         4085681 |***********                       4103136.24823
#                 96         4122316 |*******                           4140167.87500
#                124         4158951 |*********                         4176410.51613
#                106         4195586 |********                          4214514.39623
#                 66         4232221 |*****                             4251164.93939
#                 80         4268856 |******                            4286804.75000
#
#                239           > 95% |******************                4421403.21757
#
#        mean of 95%   3838002.02142
#          95th %ile         4305471
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                    prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_msr   1   1         2945071         3601        0        1        1      rel     mono       yes  syscall
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_msr -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -m -s -r 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    315271                     315271
#                        max  10965771                    5780871
#                       mean   2827587.49057              2820372.32324
#                     median   2946671                    2945071*
#                     stddev   1045730.57095              1024987.82063
#             standard error     17414.33694                17080.75818
#       99% confidence level     44859.33197                44000.03307
#                       skew         0.04088                   -0.22245
#                   kurtosis         1.24965                   -0.48644
#           time correlation       978.15486                  970.19278
#
#               elapsed time        20.00949
#                   run time        10.20376
#          getnsecs overhead      1429
#
#          number of samples      3606
#         number of outliers         5
#    number of final samples      3601
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 22          315271 |***                                399021.00000
#                 34          441328 |*****                              516047.47059
#                 22          567385 |***                                616716.45455
#                 29          693442 |****                               757164.10345
#                 43          819499 |******                             891001.23256
#                 42          945556 |******                            1002278.14286
#                 63         1071613 |*********                         1138928.14286
#                 67         1197670 |*********                         1257859.05970
#                104         1323727 |***************                   1384434.46154
#                 88         1449784 |************                      1510710.77273
#                 86         1575841 |************                      1641577.97674
#                 93         1701898 |*************                     1766681.75269
#                136         1827955 |********************              1896166.58824
#                 95         1954012 |**************                    2013763.63158
#                 92         2080069 |*************                     2137430.78261
#                112         2206126 |****************                  2267200.15179
#                113         2332183 |****************                  2398209.93805
#                121         2458240 |*****************                 2525232.15702
#                127         2584297 |******************                2650689.11024
#                162         2710354 |***********************           2775097.54321
#                176         2836411 |*************************         2898702.81818
#                179         2962468 |**************************        3029929.10056
#                170         3088525 |*************************         3152975.70588
#                184         3214582 |***************************       3274328.06522
#                217         3340639 |********************************  3404659.94009
#                165         3466696 |************************          3527880.09091
#                150         3592753 |**********************            3657043.66667
#                159         3718810 |***********************           3782738.92453
#                118         3844867 |*****************                 3901979.47458
#                116         3970924 |*****************                 4023945.13793
#                 76         4096981 |***********                       4159023.63158
#                 59         4223038 |********                          4279909.98305
#
#                181           > 95% |**************************        4724948.90055
#
#        mean of 95%   2719574.55702
#          95th %ile         4349071
#
# WARNINGS
#     Actual benchmark run time only accounts for 51.0% of elapsed time.
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                  prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_r   1   1         3859871         4766        0        1        1      rel     real       yes     libc
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    660471                    3225571
#                        max   7267571                    4518471
#                       mean   3873961.50730              3871602.36068
#                     median   3860371                    3859871*
#                     stddev    316518.35867               215886.12303
#             standard error      4477.58903                 3127.14276
#       99% confidence level     11534.26935                 8055.51975
#                       skew        -0.12678                    0.21293
#                   kurtosis        16.05343                    0.73132
#           time correlation       182.22404                  148.10348
#
#               elapsed time        20.01258
#                   run time        19.36904
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       231
#    number of final samples      4766
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 19         3225571 |*                                 3243292.05263
#                 14         3258312 |*                                 3275213.85714
#                 20         3291053 |*                                 3304651.00000
#                 23         3323794 |*                                 3341149.26087
#                 26         3356535 |*                                 3375890.23077
#                 24         3389276 |*                                 3404100.16667
#                 29         3422017 |*                                 3440760.65517
#                 35         3454758 |**                                3471002.42857
#                 34         3487499 |**                                3506085.70588
#                 53         3520240 |***                               3540559.67925
#                 89         3552981 |*****                             3570133.92135
#                114         3585722 |*******                           3604822.75439
#                123         3618463 |*******                           3634190.51220
#                148         3651204 |*********                         3669922.35135
#                186         3683945 |************                      3700117.04839
#                203         3716686 |*************                     3733094.64532
#                238         3749427 |***************                   3767302.93277
#                360         3782168 |***********************           3799099.61111
#                478         3814909 |*******************************   3832424.55649
#                493         3847650 |********************************  3864592.09533
#                442         3880391 |****************************      3896103.12670
#                289         3913132 |******************                3929486.22491
#                223         3945873 |**************                    3961094.76682
#                148         3978614 |*********                         3993721.67568
#                 89         4011355 |*****                             4025910.32584
#                107         4044096 |******                            4059898.10280
#                 98         4076837 |******                            4092494.46939
#                 86         4109578 |*****                             4125896.58140
#                 79         4142319 |*****                             4158281.12658
#                103         4175060 |******                            4191161.29126
#                 77         4207801 |****                              4224146.32468
#                 77         4240542 |****                              4256758.01299
#
#                239           > 95% |***************                   4367363.88703
#
#        mean of 95%   3845428.95560
#          95th %ile         4273271
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                  prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_s   1   1         3839071         4698        0        1        1      rel     real        no  syscall
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_s -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    717471                    3226971
#                        max  25578471                    4478471
#                       mean   3865093.70750              3853059.37058
#                     median   3840271                    3839071*
#                     stddev    523912.81432               208751.81880
#             standard error      7418.15321                 3045.60630
#       99% confidence level     19109.16266                 7845.48182
#                       skew        18.39188                    0.22137
#                   kurtosis       704.81420                    0.71900
#           time correlation       205.88065                  145.35537
#
#               elapsed time        20.01068
#                   run time        19.28962
#          getnsecs overhead      1429
#
#          number of samples      4988
#         number of outliers       290
#    number of final samples      4698
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15         3226971 |*                                 3239804.33333
#                 13         3258734 |*                                 3277255.61538
#                 19         3290497 |*                                 3305739.42105
#                 30         3322260 |*                                 3339974.33333
#                 23         3354023 |*                                 3368753.60870
#                 22         3385786 |*                                 3400710.31818
#                 31         3417549 |*                                 3432448.41935
#                 32         3449312 |**                                3467486.62500
#                 47         3481075 |**                                3497662.48936
#                 47         3512838 |**                                3531168.87234
#                 66         3544601 |****                              3562039.18182
#                 98         3576364 |******                            3592164.87755
#                140         3608127 |********                          3624788.85714
#                170         3639890 |**********                        3657141.58824
#                179         3671653 |***********                       3687577.70391
#                195         3703416 |************                      3720601.76923
#                250         3735179 |***************                   3752286.60000
#                343         3766942 |*********************             3783319.68805
#                477         3798705 |*****************************     3815072.88679
#                510         3830468 |********************************  3845824.92157
#                371         3862231 |***********************           3876969.11321
#                318         3893994 |*******************               3908467.22642
#                190         3925757 |***********                       3940207.84211
#                165         3957520 |**********                        3973132.21212
#                108         3989283 |******                            4005896.00000
#                104         4021046 |******                            4037696.00000
#                 95         4052809 |*****                             4068765.73684
#                 85         4084572 |*****                             4101115.70588
#                 95         4116335 |*****                             4130935.21053
#                 76         4148098 |****                              4165071.00000
#                 74         4179861 |****                              4197553.43243
#                 75         4211624 |****                              4227303.00000
#
#                235           > 95% |**************                    4335488.87234
#
#        mean of 95%   3827656.96572
#          95th %ile         4243371
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
                   prc thr      nsecs/call      samples   errors cnt/samp    delta  abs/rel    clock remainder   method
clock_nanosleep_sr   1   1         3848371         4769        0        1        1      rel     real       yes  syscall
# bin/../bin-riscv64/clock_nanosleep -N clock_nanosleep_sr -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s -r 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1030271                    3152171
#                        max   6707971                    4581771
#                       mean   3866106.37422              3866659.08241
#                     median   3848671                    3848371*
#                     stddev    378319.41362               238853.35969
#             standard error      5351.85025                 3458.73822
#       99% confidence level     13786.36625                 8909.70966
#                       skew        -0.64116                    0.23309
#                   kurtosis        15.41855                    0.51741
#           time correlation       210.40238                  165.07081
#
#               elapsed time        20.01063
#                   run time        19.33061
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       228
#    number of final samples      4769
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13         3152171 |*                                 3171947.92308
#                 15         3188006 |*                                 3206091.00000
#                 18         3223841 |*                                 3244998.77778
#                 19         3259676 |*                                 3285407.84211
#                 19         3295511 |*                                 3311892.05263
#                 37         3331346 |**                                3349243.97297
#                 26         3367181 |*                                 3387332.53846
#                 36         3403016 |**                                3419001.55556
#                 34         3438851 |**                                3459297.47059
#                 52         3474686 |***                               3493792.15385
#                 75         3510521 |*****                             3528588.33333
#                 88         3546356 |******                            3565685.77273
#                118         3582191 |********                          3600464.22034
#                165         3618026 |***********                       3636566.75758
#                207         3653861 |**************                    3673713.02899
#                236         3689696 |****************                  3707976.08475
#                286         3725531 |********************              3743937.78322
#                331         3761366 |***********************           3779842.29909
#                433         3797201 |*******************************   3814759.91455
#                445         3833036 |********************************  3851801.78652
#                367         3868871 |**************************        3885627.67575
#                368         3904706 |**************************        3921812.03261
#                203         3940541 |**************                    3958139.47291
#                126         3976376 |*********                         3994197.98413
#                110         4012211 |*******                           4029170.09091
#                 86         4048046 |******                            4066954.72093
#                115         4083881 |********                          4102169.26087
#                 92         4119716 |******                            4139661.21739
#                107         4155551 |*******                           4173541.09346
#                105         4191386 |*******                           4209340.52381
#                100         4227221 |*******                           4245192.00000
#                 98         4263056 |*******                           4281164.87755
#
#                239           > 95% |*****************                 4401002.65272
#
#        mean of 95%   3838467.44592
#          95th %ile         4298871
#
# Usage: clock_nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'clock_nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -a use absolute time (implies additional calls to clock_gettime)
#     -m use MONOTONIC clock (defaults to REALTIME)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures clock_nanosleep()
          prc thr      nsecs/call      samples   errors cnt/samp 
close_bad   1   1            2010         1131        0     7500 
# bin/../bin-riscv64/close -N close_bad -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 7500 -b 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1862                       1862
#                        max      5982                       3779
#                       mean      2328.68899                 2317.50663
#                     median      2011                       2010*
#                     stddev       574.64895                  542.64177
#             standard error        17.05708                   16.13548
#       99% confidence level        43.93904                   41.56500
#                       skew         1.43452                    0.99257
#                   kurtosis         2.54091                   -0.87498
#           time correlation         1.45763                    1.41360
#
#               elapsed time        20.00916
#                   run time        19.82458
#          getnsecs overhead      1429
#
#          number of samples      1135
#         number of outliers         4
#    number of final samples      1131
#             ops per sample      7500.00000 (-B 7500)
#
#       recommended -B value       431
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                106            1862 |***************                      1892.62264
#                220            1906 |********************************     1926.07273
#                138            1950 |********************                 1975.77536
#                220            1994 |********************************     2013.53636
#                 54            2038 |*******                              2052.92593
#                 27            2082 |***                                  2101.48148
#                 16            2126 |**                                   2143.25000
#                 12            2170 |*                                    2190.91667
#                  3            2214 |*                                    2234.00000
#                  4            2258 |*                                    2285.75000
#                  7            2302 |*                                    2325.71429
#                  4            2346 |*                                    2373.25000
#                  3            2390 |*                                    2417.00000
#                  2            2434 |*                                    2455.50000
#                  3            2478 |*                                    2505.00000
#                  0            2522 |                                              -
#                  2            2566 |*                                    2589.50000
#                  4            2610 |*                                    2627.50000
#                  1            2654 |*                                    2697.00000
#                  3            2698 |*                                    2725.33333
#                  3            2742 |*                                    2765.00000
#                  2            2786 |*                                    2812.50000
#                  2            2830 |*                                    2858.50000
#                  1            2874 |*                                    2914.00000
#                  1            2918 |*                                    2957.00000
#                  1            2962 |*                                    2987.00000
#                  4            3006 |*                                    3028.75000
#                  1            3050 |*                                    3077.00000
#                 37            3094 |*****                                3121.54054
#                 81            3138 |***********                          3158.79012
#                 77            3182 |***********                          3200.24675
#                 35            3226 |*****                                3236.80000
#
#                 57           > 95% |********                             3338.94737
#
#        mean of 95%      2263.29609
#          95th %ile            3254
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: close
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'close')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-close (default /dev/null)]
#     [-b] (try to close an unopened fd)
# notes: measures close()
          prc thr      nsecs/call      samples   errors cnt/samp 
close_tmp   1   1            7960           36        0     2600 
# bin/../bin-riscv64/close -N close_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 2600 -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      7637                       7637
#                        max     10865                      10865
#                       mean      8136.97222                 8136.97222
#                     median      7960                       7960*
#                     stddev       650.56026                  650.56026
#             standard error       108.42671                  108.42671
#       99% confidence level       279.30721                  279.30721
#                       skew         2.88424                    2.88424
#                   kurtosis         8.02066                    8.02066
#           time correlation        42.82484                   42.82484
#
#               elapsed time        25.29095
#                   run time         0.76167
#          getnsecs overhead      1429
#
#          number of samples        36
#         number of outliers         0
#    number of final samples        36
#             ops per sample      2600.00000 (-B 2600)
#
#       recommended -B value       123
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4            7637 |******************                   7672.00000
#                  2            7708 |*********                            7764.50000
#                  4            7779 |******************                   7829.25000
#                  5            7850 |**********************               7875.60000
#                  7            7921 |********************************     7962.42857
#                  2            7992 |*********                            8019.50000
#                  4            8063 |******************                   8108.00000
#                  0            8134 |                                              -
#                  3            8205 |*************                        8229.66667
#                  1            8276 |****                                 8345.00000
#                  0            8347 |                                              -
#                  1            8418 |****                                 8469.00000
#                  0            8489 |                                              -
#                  0            8560 |                                              -
#                  0            8631 |                                              -
#                  0            8702 |                                              -
#                  0            8773 |                                              -
#                  0            8844 |                                              -
#                  0            8915 |                                              -
#                  0            8986 |                                              -
#                  0            9057 |                                              -
#                  0            9128 |                                              -
#                  0            9199 |                                              -
#                  0            9270 |                                              -
#                  0            9341 |                                              -
#                  0            9412 |                                              -
#                  0            9483 |                                              -
#                  1            9554 |****                                 9560.00000
#
#                  2           > 95% |*********                           10374.00000
#
#        mean of 95%      8005.38235
#          95th %ile            9883
#
# WARNINGS
#     Too few samples, 36 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 3.0% of elapsed time.
#
# Usage: close
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'close')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-close (default /dev/null)]
#     [-b] (try to close an unopened fd)
# notes: measures close()
           prc thr      nsecs/call      samples   errors cnt/samp 
close_zero   1   1            8182           46        0     2600 
# bin/../bin-riscv64/close -N close_zero -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 2600 -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      7841                       7841
#                        max     22569                       8537
#                       mean      8786.44231                 8160.93478
#                     median      8217                       8182*
#                     stddev      2401.19798                  190.89106
#             standard error       332.98625                   28.14535
#       99% confidence level       857.77257                   72.50242
#                       skew         4.44678                    0.13434
#                   kurtosis        20.35480                   -1.16564
#           time correlation        77.57197                   14.15621
#
#               elapsed time        25.38495
#                   run time         1.18800
#          getnsecs overhead      1429
#
#          number of samples        52
#         number of outliers         6
#    number of final samples        46
#             ops per sample      2600.00000 (-B 2600)
#
#       recommended -B value       123
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            7841 |**********                           7841.00000
#                  1            7861 |**********                           7874.00000
#                  2            7881 |*********************                7898.00000
#                  0            7901 |                                              -
#                  2            7921 |*********************                7929.00000
#                  3            7941 |********************************     7947.66667
#                  3            7961 |********************************     7976.33333
#                  1            7981 |**********                           7988.00000
#                  2            8001 |*********************                8012.50000
#                  1            8021 |**********                           8021.00000
#                  0            8041 |                                              -
#                  1            8061 |**********                           8071.00000
#                  3            8081 |********************************     8089.66667
#                  1            8101 |**********                           8101.00000
#                  0            8121 |                                              -
#                  1            8141 |**********                           8156.00000
#                  1            8161 |**********                           8168.00000
#                  3            8181 |********************************     8189.33333
#                  1            8201 |**********                           8217.00000
#                  3            8221 |********************************     8230.66667
#                  1            8241 |**********                           8245.00000
#                  1            8261 |**********                           8273.00000
#                  2            8281 |*********************                8284.50000
#                  0            8301 |                                              -
#                  1            8321 |**********                           8339.00000
#                  2            8341 |*********************                8350.00000
#                  2            8361 |*********************                8370.50000
#                  2            8381 |*********************                8383.50000
#                  1            8401 |**********                           8407.00000
#                  0            8421 |                                              -
#                  1            8441 |**********                           8445.00000
#
#                  3           > 95% |********************************     8500.00000
#
#        mean of 95%      8137.27907
#          95th %ile            8464
#
# WARNINGS
#     Too few samples, 52 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 4.7% of elapsed time.
#
# Usage: close
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'close')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-close (default /dev/null)]
#     [-b] (try to close an unopened fd)
# notes: measures close()
             prc thr      nsecs/call      samples   errors cnt/samp 
conn_connect   1   1          247821          302        0      125 
# bin/../bin-riscv64/connection -N conn_connect -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 125 -c 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    228033                     228033
#                        max   1669241                     710240
#                       mean    340115.28710               316713.97682
#                     median    248749                     247821*
#                     stddev    203754.49154               132830.77403
#             standard error     11572.47748                 7643.55213
#       99% confidence level     29810.70198                19689.79029
#                       skew         3.52074                    1.70699
#                   kurtosis        16.38873                    1.56831
#           time correlation      1556.07028                 1202.93241
#
#               elapsed time        20.19199
#                   run time        13.17991
#          getnsecs overhead      1429
#
#          number of samples       310
#         number of outliers         8
#    number of final samples       302
#             ops per sample       125.00000 (-B 125)
#
#       recommended -B value         3
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                118          228033 |********************************   236039.92373
#                 54          241381 |**************                     246281.57407
#                 19          254729 |*****                              259652.94737
#                  9          268077 |**                                 276882.66667
#                 11          281425 |**                                 286897.36364
#                 12          294773 |***                                302157.58333
#                  3          308121 |*                                  312862.33333
#                  3          321469 |*                                  328489.66667
#                  5          334817 |*                                  340799.00000
#                  2          348165 |*                                  354198.50000
#                  0          361513 |                                              -
#                  4          374861 |*                                  383663.25000
#                  2          388209 |*                                  394154.50000
#                  6          401557 |*                                  405121.83333
#                  1          414905 |*                                  427185.00000
#                  2          428253 |*                                  429745.50000
#                  3          441601 |*                                  447952.00000
#                  3          454949 |*                                  461364.00000
#                  2          468297 |*                                  476082.00000
#                  1          481645 |*                                  482588.00000
#                  5          494993 |*                                  502596.40000
#                  0          508341 |                                              -
#                  2          521689 |*                                  529068.00000
#                  2          535037 |*                                  538746.50000
#                  4          548385 |*                                  556877.25000
#                  2          561733 |*                                  568732.00000
#                  0          575081 |                                              -
#                  1          588429 |*                                  594067.00000
#                  2          601777 |*                                  604241.00000
#                  3          615125 |*                                  620631.00000
#                  3          628473 |*                                  637526.00000
#                  2          641821 |*                                  650455.00000
#
#                 16           > 95% |****                               678597.62500
#
#        mean of 95%    296468.73776
#          95th %ile          655146
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 65.3% of elapsed time.
#
# Usage: connection
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'connection')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a] (measure accept() only)
#     [-c] (measure connect() only)
# notes: measures connect()/accept()
    prc thr      nsecs/call      samples   errors cnt/samp 
dup   1   1            2395          586        0     5500 
# bin/../bin-riscv64/dup -N dup -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 5500 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2313                       2313
#                        max      7808                       2528
#                       mean      2433.70300                 2404.07338
#                     median      2400                       2395*
#                     stddev       239.75705                   41.30151
#             standard error         9.52949                    1.70615
#       99% confidence level        24.54796                    4.39504
#                       skew        18.35511                    0.82519
#                   kurtosis       398.73609                    0.20138
#           time correlation         0.45560                    0.23271
#
#               elapsed time        20.03899
#                   run time         8.47376
#          getnsecs overhead      1429
#
#          number of samples       633
#         number of outliers        47
#    number of final samples       586
#             ops per sample      5500.00000 (-B 5500)
#
#       recommended -B value       416
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            2313 |*                                    2313.00000
#                  1            2319 |*                                    2323.00000
#                  1            2325 |*                                    2330.00000
#                  3            2331 |**                                   2332.33333
#                  7            2337 |****                                 2340.14286
#                 11            2343 |*******                              2346.18182
#                 15            2349 |**********                           2351.80000
#                 27            2355 |******************                   2357.66667
#                 30            2361 |********************                 2363.96667
#                 37            2367 |************************             2369.86486
#                 48            2373 |********************************     2375.58333
#                 41            2379 |***************************          2381.60976
#                 37            2385 |************************             2387.83784
#                 46            2391 |******************************       2393.32609
#                 32            2397 |*********************                2400.03125
#                 34            2403 |**********************               2406.02941
#                 28            2409 |******************                   2411.25000
#                 19            2415 |************                         2417.42105
#                 20            2421 |*************                        2423.70000
#                 18            2427 |************                         2429.55556
#                 22            2433 |**************                       2435.13636
#                 10            2439 |******                               2441.20000
#                 14            2445 |*********                            2447.57143
#                 12            2451 |********                             2453.08333
#                  8            2457 |*****                                2460.00000
#                  8            2463 |*****                                2466.62500
#                  7            2469 |****                                 2471.00000
#                  6            2475 |****                                 2478.16667
#                 11            2481 |*******                              2484.27273
#                  2            2487 |*                                    2490.00000
#
#                 30           > 95% |********************                 2504.93333
#
#        mean of 95%      2398.63129
#          95th %ile            2492
#
# WARNINGS
#     Actual benchmark run time only accounts for 42.3% of elapsed time.
#
# Usage: dup
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'dup')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-dup (default /dev/null)]
# notes: measures dup()
     prc thr      nsecs/call      samples   errors cnt/samp 
exec   1   1        42963571          506        0        1 
# bin/../bin-riscv64/exec -N exec -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  17235071                   17235071
#                        max  60307471                   60307471
#                       mean  38952342.27470             38952342.27470
#                     median  42963571                   42963571*
#                     stddev   9061089.01988              9061089.01988
#             standard error    402814.54021               402814.54021
#       99% confidence level   1037650.25559              1037650.25559
#                       skew        -0.96944                   -0.96944
#                   kurtosis        -0.07223                   -0.07223
#           time correlation     56850.59082                56850.59082
#
#               elapsed time        20.03006
#                   run time        19.76073
#          getnsecs overhead      1429
#
#          number of samples       506
#         number of outliers         0
#    number of final samples       506
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2        17235071 |*                                17297571.00000
#                  6        18198650 |**                               18914371.00000
#                 17        19162229 |*******                          19705088.64706
#                 19        20125808 |********                         20644623.63158
#                 22        21089387 |*********                        21533311.90909
#                  3        22052966 |*                                22460704.33333
#                  3        23016545 |*                                23468271.00000
#                  0        23980124 |                                              -
#                  3        24943703 |*                                25480771.00000
#                  3        25907282 |*                                26644071.00000
#                  4        26870861 |*                                27379921.00000
#                  1        27834440 |*                                28361371.00000
#                  4        28798019 |*                                29457071.00000
#                  6        29761598 |**                               30147037.66667
#                  4        30725177 |*                                31203996.00000
#                  7        31688756 |***                              32202628.14286
#                  8        32652335 |***                              33219358.50000
#                  2        33615914 |*                                33883921.00000
#                 17        34579493 |*******                          35086259.23529
#                 18        35543072 |*******                          35943787.66667
#                 18        36506651 |*******                          36919415.44444
#                 16        37470230 |*******                          37916402.25000
#                 10        38433809 |****                             38967001.00000
#                  8        39397388 |***                              40013571.00000
#                 17        40360967 |*******                          40890465.11765
#                 16        41324546 |*******                          41791914.75000
#                 28        42288125 |************                     42815417.42857
#                 73        43251704 |******************************** 43882968.26027
#                 56        44215283 |************************         44676683.50000
#                 49        45178862 |*********************            45604264.87755
#                 23        46142441 |**********                       46450218.82609
#                 17        47106020 |*******                          47577394.52941
#
#                 26           > 95% |***********                      51619635.03846
#
#        mean of 95%  38266197.25000
#          95th %ile        48069571
#
# Usage: exec
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exec')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures execv time of simple process()
      prc thr      nsecs/call      samples   errors cnt/samp 
execw   1   1        44067571          485        0        1 
# bin/../bin-riscv64/execw -N execw -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  17470871                   17470871
#                        max  70067336                   60243371
#                       mean  40780962.90329             40720578.62887
#                     median  44083971                   44067571*
#                     stddev   8341994.81516              8243598.25503
#             standard error    378400.56915               374322.51431
#       99% confidence level    974759.86613               964254.79687
#                       skew        -1.23306                   -1.35105
#                   kurtosis         1.27964                    1.12791
#           time correlation     51971.93329                51545.50799
#
#               elapsed time        20.02988
#                   run time        19.89031
#          getnsecs overhead      1429
#
#          number of samples       486
#         number of outliers         1
#    number of final samples       485
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2        17470871 |*                                17865071.00000
#                  3        18447256 |*                                19253837.66667
#                 15        19423641 |*****                            19975064.33333
#                 16        20400026 |*****                            20774821.00000
#                 10        21376411 |***                              21651101.00000
#                  2        22352796 |*                                22810721.00000
#                  1        23329181 |*                                24252271.00000
#                  1        24305566 |*                                24827071.00000
#                  2        25281951 |*                                25882921.00000
#                  2        26258336 |*                                26721121.00000
#                  1        27234721 |*                                27859171.00000
#                  2        28211106 |*                                28723071.00000
#                  1        29187491 |*                                29382971.00000
#                  2        30163876 |*                                30646471.00000
#                  3        31140261 |*                                31662471.00000
#                  3        32116646 |*                                32906704.33333
#                  5        33093031 |*                                33599411.00000
#                  7        34069416 |**                               34589885.28571
#                 20        35045801 |*******                          35549421.00000
#                 19        36022186 |******                           36375097.31579
#                 10        36998571 |***                              37463041.00000
#                 11        37974956 |***                              38203271.00000
#                 12        38951341 |****                             39453746.00000
#                 14        39927726 |*****                            40392756.71429
#                 12        40904111 |****                             41432437.66667
#                 18        41880496 |******                           42383193.22222
#                 33        42856881 |***********                      43457213.42424
#                 89        43833266 |******************************** 44361250.77528
#                 59        44809651 |*********************            45286055.74576
#                 43        45786036 |***************                  46295433.79070
#                 23        46762421 |********                         47119727.52174
#                 19        47738806 |******                           48175871.00000
#
#                 25           > 95% |********                         51512139.00000
#
#        mean of 95%  40134080.78261
#          95th %ile        48715171
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
           prc thr      nsecs/call      samples   errors cnt/samp 
execw_100r   1   1        84701271          231        0        1 
# bin/../bin-riscv64/execw -N execw_100r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  33789171                   45926171
#                        max 118551671                  118551671
#                       mean  81263402.05372             83348523.44589
#                     median  84267471                   84701271*
#                     stddev  15648573.95865             12652344.00578
#             standard error   1005928.43291               832463.11838
#       99% confidence level   2591271.64319              2144424.99295
#                       skew        -1.12906                   -0.72632
#                   kurtosis         1.27456                    0.73970
#           time correlation    204958.12892               178817.19647
#
#               elapsed time        20.04118
#                   run time        19.74464
#          getnsecs overhead      1429
#
#          number of samples       242
#         number of outliers        11
#    number of final samples       231
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1        45926171 |*                                45926171.00000
#                  2        47626590 |***                              48444571.00000
#                  2        49327009 |***                              50654671.00000
#                  5        51027428 |*********                        51701591.00000
#                  1        52727847 |*                                53997271.00000
#                  2        54428266 |***                              55684871.00000
#                  1        56128685 |*                                57396871.00000
#                  0        57829104 |                                              -
#                  3        59529523 |*****                            60213771.00000
#                  4        61229942 |*******                          61797021.00000
#                  1        62930361 |*                                63997171.00000
#                  1        64630780 |*                                65131371.00000
#                  1        66331199 |*                                67281571.00000
#                  3        68031618 |*****                            68766704.33333
#                  4        69732037 |*******                          70907321.00000
#                  6        71432456 |***********                      72465237.66667
#                  6        73132875 |***********                      74290337.66667
#                  9        74833294 |****************                 75570693.22222
#                 11        76533713 |********************             77108107.36364
#                 11        78234132 |********************             79032063.27273
#                 15        79934551 |****************************     80865537.66667
#                 16        81634970 |******************************   82323452.25000
#                 17        83335389 |******************************** 84437053.35294
#                 15        85035808 |****************************     85844971.00000
#                  7        86736227 |*************                    87747756.71429
#                 12        88436646 |**********************           89354196.00000
#                 16        90137065 |******************************   90945014.75000
#                 14        91837484 |**************************       92570185.28571
#                 10        93537903 |******************               94197401.00000
#                  9        95238322 |****************                 96071582.11111
#                  8        96938741 |***************                  97425471.00000
#                  6        98639160 |***********                      99588737.66667
#
#                 12           > 95% |**********************          105110604.33333
#
#        mean of 95%  82156080.65753
#          95th %ile       100339571
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
            prc thr      nsecs/call      samples   errors cnt/samp 
execw_1024n   1   1       106473871          195        0        1 
# bin/../bin-riscv64/execw -N execw_1024n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 1024 -p 256 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  41341871                   58348171
#                        max 122717871                  122717871
#                       mean  97844332.01990             99413773.89744
#                     median 106022471                  106473871*
#                     stddev  17467028.23936             15207787.55526
#             standard error   1232029.17907              1089052.28696
#       99% confidence level   3173707.16529              2805398.69120
#                       skew        -1.17238                   -0.96118
#                   kurtosis         0.47198                   -0.44657
#           time correlation    269309.56927               245114.27201
#
#               elapsed time        20.07827
#                   run time        19.78087
#          getnsecs overhead      1429
#
#          number of samples       201
#         number of outliers         6
#    number of final samples       195
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1        58348171 |*                                58348171.00000
#                  1        60123806 |*                                60990871.00000
#                  1        61899441 |*                                62759471.00000
#                  0        63675076 |                                              -
#                  1        65450711 |*                                66081471.00000
#                  0        67226346 |                                              -
#                  1        69001981 |*                                70332471.00000
#                  8        70777616 |*********                        71865646.00000
#                 14        72553251 |****************                 73471478.14286
#                  6        74328886 |******                           75140621.00000
#                  4        76104521 |****                             76882246.00000
#                  3        77880156 |***                              78499704.33333
#                  0        79655791 |                                              -
#                  1        81431426 |*                                82998771.00000
#                  5        83207061 |*****                            84574071.00000
#                  1        84982696 |*                                85284671.00000
#                  0        86758331 |                                              -
#                  3        88533966 |***                              89864304.33333
#                  1        90309601 |*                                90810671.00000
#                  2        92085236 |**                               92496521.00000
#                  2        93860871 |**                               94582771.00000
#                  5        95636506 |*****                            96660371.00000
#                  3        97412141 |***                              98419271.00000
#                  2        99187776 |**                               99492771.00000
#                  2       100963411 |**                              101519121.00000
#                 11       102739046 |************                    103741589.18182
#                 19       104514681 |*********************           105399192.05263
#                 28       106290316 |********************************107391113.85714
#                 27       108065951 |******************************  108904167.29630
#                 18       109841586 |********************            110473493.22222
#                  8       111617221 |*********                       112407171.00000
#                  7       113392856 |********                        114394794.57143
#
#                 10           > 95% |***********                     118382671.00000
#
#        mean of 95%  98388428.10811
#          95th %ile       115168471
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
          prc thr      nsecs/call      samples   errors cnt/samp 
execw_10r   1   1        47855471          453        0        1 
# bin/../bin-riscv64/execw -N execw_10r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  20398471                   20398471
#                        max  58869271                   58869271
#                       mean  43761934.05740             43761934.05740
#                     median  47855471                   47855471*
#                     stddev   9303391.51971              9303391.51971
#             standard error    437111.46423               437111.46423
#       99% confidence level   1125999.13186              1125999.13186
#                       skew        -1.10476                   -1.10476
#                   kurtosis         0.09762                    0.09762
#           time correlation     64972.31612                64972.31612
#
#               elapsed time        20.05110
#                   run time        19.87927
#          getnsecs overhead      1429
#
#          number of samples       453
#         number of outliers         0
#    number of final samples       453
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3        20398471 |*                                20852904.33333
#                  7        21416475 |****                             22195085.28571
#                 16        22434479 |*********                        23049846.00000
#                 14        23452483 |********                         24035742.42857
#                  7        24470487 |****                             24968271.00000
#                  7        25488491 |****                             26058756.71429
#                  1        26506495 |*                                27500671.00000
#                  1        27524499 |*                                27567971.00000
#                  0        28542503 |                                              -
#                  6        29560507 |***                              30278737.66667
#                  6        30578511 |***                              31033237.66667
#                  4        31596515 |**                               32107421.00000
#                  0        32614519 |                                              -
#                  4        33632523 |**                               34347521.00000
#                  4        34650527 |**                               35016621.00000
#                  7        35668531 |****                             36248285.28571
#                  3        36686535 |*                                37069637.66667
#                 11        37704539 |******                           38229071.00000
#                 13        38722543 |*******                          39238624.84615
#                 18        39740547 |**********                       40217815.44444
#                 13        40758551 |*******                          41227386.38462
#                  8        41776555 |****                             42328408.50000
#                 17        42794559 |*********                        43270106.29412
#                 11        43812563 |******                           44392534.63636
#                 11        44830567 |******                           45317880.09091
#                 12        45848571 |******                           46310137.66667
#                 24        46866575 |*************                    47393258.50000
#                 33        47884579 |*******************              48492867.96970
#                 55        48902583 |******************************** 49414978.27273
#                 51        49920587 |*****************************    50367923.94118
#                 44        50938591 |*************************        51475375.54545
#                 19        51956595 |***********                      52340776.26316
#
#                 23           > 95% |*************                    54740656.43478
#
#        mean of 95%  43174700.06977
#          95th %ile        52974571
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
           prc thr      nsecs/call      samples   errors cnt/samp 
execw_128n   1   1        52585671          341        0        1 
# bin/../bin-riscv64/execw -N execw_128n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 128 -p 2048 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  20018671                   44251271
#                        max  73386471                   60589371
#                       mean  50334684.99746             52513725.54545
#                     median  52292871                   52585671*
#                     stddev   7263747.68916              2771690.43623
#             standard error    365942.32192               150095.45227
#       99% confidence level    942667.42127               386645.88505
#                       skew        -2.02637                   -0.33060
#                   kurtosis         5.25968                    0.84845
#           time correlation     50641.67863                26480.10834
#
#               elapsed time        20.06194
#                   run time        19.90205
#          getnsecs overhead      1429
#
#          number of samples       394
#         number of outliers        53
#    number of final samples       341
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1        44251271 |*                                44251271.00000
#                  2        44643865 |**                               44904871.00000
#                  2        45036459 |**                               45094171.00000
#                  4        45429053 |****                             45678846.00000
#                  3        45821647 |***                              45958104.33333
#                  1        46214241 |*                                46317871.00000
#                  3        46606835 |***                              46826337.66667
#                  4        46999429 |****                             47259521.00000
#                  5        47392023 |*****                            47546551.00000
#                  4        47784617 |****                             47984196.00000
#                  3        48177211 |***                              48424404.33333
#                  3        48569805 |***                              48724837.66667
#                  7        48962399 |********                         49154385.28571
#                  4        49354993 |****                             49623196.00000
#                  8        49747587 |*********                        49915396.00000
#                  2        50140181 |**                               50497471.00000
#                 15        50532775 |*****************                50753977.66667
#                 13        50925369 |**************                   51133409.46154
#                 24        51317963 |***************************      51524250.16667
#                 28        51710557 |******************************** 51900285.28571
#                 27        52103151 |******************************   52303115.44444
#                 28        52495745 |******************************** 52681021.00000
#                 19        52888339 |*********************            53119934.15789
#                 18        53280933 |********************             53487804.33333
#                 26        53673527 |*****************************    53837971.00000
#                 20        54066121 |**********************           54311391.00000
#                 14        54458715 |****************                 54634428.14286
#                 11        54851309 |************                     55082943.72727
#                  8        55243903 |*********                        55446396.00000
#                  8        55636497 |*********                        55837883.50000
#                  3        56029091 |***                              56164704.33333
#                  5        56421685 |*****                            56544291.00000
#
#                 18           > 95% |********************             58280687.66667
#
#        mean of 95%  52192346.85139
#          95th %ile        56814271
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
            prc thr      nsecs/call      samples   errors cnt/samp 
execw_128nt   1   1       291403171           49        0        1 
# bin/../bin-riscv64/execw -N execw_128nt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 128 -p 2048 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min 204705371                  223479371
#                        max 387177871                  333345871
#                       mean 285563235.01961            285139627.42857
#                     median 291403171                  291403171*
#                     stddev  27418184.39430             20774343.46565
#             standard error   3839313.75475              2967763.35224
#       99% confidence level   9890072.23225              7644958.39536
#                       skew         0.01409                   -1.11473
#                   kurtosis         3.66906                    1.27838
#           time correlation   1504350.96742              1230741.39694
#
#               elapsed time        25.77912
#                   run time        14.84343
#          getnsecs overhead      1429
#
#          number of samples        51
#         number of outliers         2
#    number of final samples        49
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1       223479371 |**                              223479371.00000
#                  0       226139368 |                                              -
#                  0       228799365 |                                              -
#                  0       231459362 |                                              -
#                  0       234119359 |                                              -
#                  2       236779356 |****                            238826571.00000
#                  0       239439353 |                                              -
#                  1       242099350 |**                              243431571.00000
#                  1       244759347 |**                              246963571.00000
#                  0       247419344 |                                              -
#                  0       250079341 |                                              -
#                  2       252739338 |****                            252877521.00000
#                  0       255399335 |                                              -
#                  1       258059332 |**                              259055571.00000
#                  0       260719329 |                                              -
#                  1       263379326 |**                              265345571.00000
#                  0       266039323 |                                              -
#                  0       268699320 |                                              -
#                  0       271359317 |                                              -
#                  0       274019314 |                                              -
#                  1       276679311 |**                              277644271.00000
#                  2       279339308 |****                            280062653.50000
#                  0       281999305 |                                              -
#                  1       284659302 |**                              287102771.00000
#                  5       287319299 |***********                     288351431.00000
#                 14       289979296 |********************************291511699.57143
#                  7       292639293 |****************                293772885.28571
#                  5       295299290 |***********                     296456211.00000
#                  0       297959287 |                                              -
#                  0       300619284 |                                              -
#                  1       303279281 |**                              303813971.00000
#                  1       305939278 |**                              306704071.00000
#
#                  3           > 95% |******                          317718437.66667
#
#        mean of 95% 283014922.41304
#          95th %ile       308599271
#
# WARNINGS
#     Too few samples, 51 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 57.6% of elapsed time.
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
             prc thr      nsecs/call      samples   errors cnt/samp 
execw_128ntv   1   1        37617871          233        0        1 
# bin/../bin-riscv64/execw -N execw_128ntv -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 128 -p 2048 -t -v 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  14612271                   30002971
#                        max  51685571                   42168071
#                       mean  35951539.10150             37195208.33906
#                     median  37511571                   37617871*
#                     stddev   5771472.00091              2429894.76596
#             standard error    353871.65305               159187.69893
#       99% confidence level    911573.37826               410067.51246
#                       skew        -1.81600                   -1.12285
#                   kurtosis         4.46684                    1.30542
#           time correlation     59669.91695                32502.19582
#
#               elapsed time        20.71478
#                   run time         9.61334
#          getnsecs overhead      1429
#
#          number of samples       266
#         number of outliers        33
#    number of final samples       233
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2        30002971 |**                               30015171.00000
#                  5        30326790 |*****                            30547051.00000
#                  2        30650609 |**                               30873371.00000
#                  4        30974428 |****                             31197821.00000
#                  0        31298247 |                                              -
#                  3        31622066 |***                              31726737.66667
#                  1        31945885 |*                                32093271.00000
#                  1        32269704 |*                                32574971.00000
#                  4        32593523 |****                             32771321.00000
#                  0        32917342 |                                              -
#                  3        33241161 |***                              33409304.33333
#                  2        33564980 |**                               33731521.00000
#                  2        33888799 |**                               33963571.00000
#                  1        34212618 |*                                34217671.00000
#                  1        34536437 |*                                34677071.00000
#                  2        34860256 |**                               34877771.00000
#                  4        35184075 |****                             35313896.00000
#                  5        35507894 |*****                            35667991.00000
#                  2        35831713 |**                               36035421.00000
#                  6        36155532 |******                           36318054.33333
#                 14        36479351 |***************                  36646928.14286
#                 19        36803170 |********************             36962718.36842
#                 22        37126989 |************************         37283121.00000
#                 29        37450808 |******************************** 37633229.62069
#                 19        37774627 |********************             37939107.84211
#                 19        38098446 |********************             38237497.31579
#                  8        38422265 |********                         38615096.00000
#                 13        38746084 |**************                   38882555.61538
#                 12        39069903 |*************                    39218471.00000
#                  2        39393722 |**                               39524421.00000
#                  7        39717541 |*******                          39887942.42857
#                  7        40041360 |*******                          40242256.71429
#
#                 12           > 95% |*************                    41094229.33333
#
#        mean of 95%  36983496.79186
#          95th %ile        40365171
#
# WARNINGS
#     Actual benchmark run time only accounts for 46.4% of elapsed time.
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
         prc thr      nsecs/call      samples   errors cnt/samp 
execw_1r   1   1        44476971          494        0        1 
# bin/../bin-riscv64/execw -N execw_1r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 1 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  19520771                   19520771
#                        max  61208871                   61208871
#                       mean  40125896.73887             40125896.73887
#                     median  44476971                   44476971*
#                     stddev   9245582.91487              9245582.91487
#             standard error    415978.44131               415978.44131
#       99% confidence level   1071560.46482              1071560.46482
#                       skew        -0.95810                   -0.95810
#                   kurtosis        -0.08266                   -0.08266
#           time correlation     59421.20844                59421.20844
#
#               elapsed time        20.02454
#                   run time        19.87873
#          getnsecs overhead      1429
#
#          number of samples       494
#         number of outliers         0
#    number of final samples       494
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15        19520771 |******                           20007231.00000
#                 25        20461047 |**********                       20984399.00000
#                 16        21401323 |*******                          21827221.00000
#                  8        22341599 |***                              22534896.00000
#                  3        23281875 |*                                23667271.00000
#                  1        24222151 |*                                24798871.00000
#                  1        25162427 |*                                25683471.00000
#                  2        26102703 |*                                26801321.00000
#                  5        27042979 |**                               27515451.00000
#                  4        27983255 |*                                28387246.00000
#                  4        28923531 |*                                29277221.00000
#                  2        29863807 |*                                30105721.00000
#                  3        30804083 |*                                31369971.00000
#                  2        31744359 |*                                32244421.00000
#                  3        32684635 |*                                32983904.33333
#                  8        33624911 |***                              34016821.00000
#                 16        34565187 |*******                          35045671.00000
#                 11        35505463 |****                             36096898.27273
#                 22        36445739 |*********                        36858189.18182
#                 16        37386015 |*******                          37722546.00000
#                  7        38326291 |***                              38666542.42857
#                  7        39266567 |***                              39620156.71429
#                 16        40206843 |*******                          40698746.00000
#                 10        41147119 |****                             41500481.00000
#                 10        42087395 |****                             42593601.00000
#                 12        43027671 |*****                            43494837.66667
#                 38        43967947 |****************                 44497486.78947
#                 73        44908223 |******************************** 45354624.42466
#                 57        45848499 |************************         46342383.28070
#                 44        46788775 |*******************              47192791.45455
#                 18        47729051 |*******                          48132726.55556
#                 10        48669327 |****                             49046581.00000
#
#                 25           > 95% |**********                       52951703.60000
#
#        mean of 95%  39442218.33475
#          95th %ile        49609571
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
           prc thr      nsecs/call      samples   errors cnt/samp 
execw_256n   1   1        60427771          315        0        1 
# bin/../bin-riscv64/execw -N execw_256n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 256 -p 1024 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  24151271                   49779671
#                        max  72790571                   70424271
#                       mean  59352386.96096             60064952.58730
#                     median  60312571                   60427771*
#                     stddev   5842245.93275              3579242.98290
#             standard error    320153.10498               201667.49571
#       99% confidence level    824714.39842               519495.46896
#                       skew        -2.40995                   -0.60088
#                   kurtosis        10.26840                    0.78303
#           time correlation     48932.64596                36842.22650
#
#               elapsed time        20.01995
#                   run time        19.83736
#          getnsecs overhead      1429
#
#          number of samples       333
#         number of outliers        18
#    number of final samples       315
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2        49779671 |**                               49963221.00000
#                  4        50262900 |****                             50466971.00000
#                  3        50746129 |***                              51140337.66667
#                  2        51229358 |**                               51686071.00000
#                  2        51712587 |**                               52121771.00000
#                  5        52195816 |*****                            52344911.00000
#                  3        52679045 |***                              53036171.00000
#                  1        53162274 |*                                53215271.00000
#                  8        53645503 |*********                        53891796.00000
#                  1        54128732 |*                                54391471.00000
#                  2        54611961 |**                               54780871.00000
#                  3        55095190 |***                              55292004.33333
#                  3        55578419 |***                              55759637.66667
#                  5        56061648 |*****                            56279271.00000
#                  5        56544877 |*****                            56804431.00000
#                  8        57028106 |*********                        57254608.50000
#                  5        57511335 |*****                            57740091.00000
#                 13        57994564 |**************                   58207347.92308
#                 13        58477793 |**************                   58749086.38462
#                 24        58961022 |***************************      59228250.16667
#                 22        59444251 |*************************        59691934.63636
#                 22        59927480 |*************************        60147943.72727
#                 15        60410709 |*****************                60656777.66667
#                 28        60893938 |******************************** 61156513.85714
#                 20        61377167 |**********************           61587291.00000
#                 26        61860396 |*****************************    62109282.53846
#                 18        62343625 |********************             62578365.44444
#                  8        62826854 |*********                        63019958.50000
#                  8        63310083 |*********                        63541096.00000
#                 13        63793312 |**************                   64015871.00000
#                  2        64276541 |**                               64492171.00000
#                  5        64759770 |*****                            64964651.00000
#
#                 16           > 95% |******************               66941202.25000
#
#        mean of 95%  59696992.73913
#          95th %ile        65242971
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
          prc thr      nsecs/call      samples   errors cnt/samp 
execw_32n   1   1        45378971          478        0        1 
# bin/../bin-riscv64/execw -N execw_32n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 32 -p 8192 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  17963071                   17963071
#                        max  60791171                   60791171
#                       mean  41491219.04393             41491219.04393
#                     median  45378971                   45378971*
#                     stddev   8955246.29390              8955246.29390
#             standard error    409603.43150               409603.43150
#       99% confidence level   1055138.43955              1055138.43955
#                       skew        -1.21721                   -1.21721
#                   kurtosis         0.36987                    0.36987
#           time correlation     57733.77826                57733.77826
#
#               elapsed time        20.04292
#                   run time        19.89028
#          getnsecs overhead      1429
#
#          number of samples       478
#         number of outliers         0
#    number of final samples       478
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3        17963071 |*                                18488337.66667
#                  1        18967672 |*                                19315471.00000
#                  8        19972273 |***                              20618071.00000
#                 16        20976874 |******                           21482677.25000
#                 21        21981475 |********                         22448594.80952
#                  9        22986076 |***                              23487871.00000
#                  2        23990677 |*                                24646921.00000
#                  0        24995278 |                                              -
#                  3        25999879 |*                                26434671.00000
#                  2        27004480 |*                                27082821.00000
#                  2        28009081 |*                                28338721.00000
#                  5        29013682 |*                                29601071.00000
#                  1        30018283 |*                                31006771.00000
#                  6        31022884 |**                               31347304.33333
#                  1        32027485 |*                                33007071.00000
#                  5        33032086 |*                                33495351.00000
#                  5        34036687 |*                                34437771.00000
#                  3        35041288 |*                                35520371.00000
#                 12        36045889 |****                             36562204.33333
#                 11        37050490 |****                             37633861.90909
#                 16        38055091 |******                           38564539.75000
#                 12        39059692 |****                             39686679.33333
#                 11        40064293 |****                             40633589.18182
#                  9        41068894 |***                              41497304.33333
#                 21        42073495 |********                         42546790.04762
#                 10        43078096 |***                              43501961.00000
#                 28        44082697 |**********                       44658706.71429
#                 44        45087298 |*****************                45507391.45455
#                 82        46091899 |******************************** 46549190.51220
#                 59        47096500 |***********************          47601959.13559
#                 27        48101101 |**********                       48578937.66667
#                 19        49105702 |*******                          49472665.73684
#
#                 24           > 95% |*********                        52329311.20833
#
#        mean of 95%  40918280.25110
#          95th %ile        50110271
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
           prc thr      nsecs/call      samples   errors cnt/samp 
execw_32nt   1   1       254710671           57        0        1 
# bin/../bin-riscv64/execw -N execw_32nt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 32 -p 8192 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min 193621271                  193621271
#                        max 311382271                  311382271
#                       mean 254749730.91228            254749730.91228
#                     median 254710671                  254710671*
#                     stddev  27758516.97171             27758516.97171
#             standard error   3676705.39132              3676705.39132
#       99% confidence level   9471193.08803              9471193.08803
#                       skew        -0.15556                   -0.15556
#                   kurtosis        -0.87954                   -0.87954
#           time correlation   1659268.11900              1659268.11900
#
#               elapsed time        25.80185
#                   run time        14.80159
#          getnsecs overhead      1429
#
#          number of samples        57
#         number of outliers         0
#    number of final samples        57
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1       193621271 |******                          193621271.00000
#                  0       196822315 |                                              -
#                  0       200023359 |                                              -
#                  2       203224403 |************                    203828921.00000
#                  0       206425447 |                                              -
#                  0       209626491 |                                              -
#                  1       212827535 |******                          215999871.00000
#                  2       216028579 |************                    216469271.00000
#                  4       219229623 |*************************       221000446.00000
#                  0       222430667 |                                              -
#                  3       225631711 |*******************             227730037.66667
#                  0       228832755 |                                              -
#                  3       232033799 |*******************             233845837.66667
#                  0       235234843 |                                              -
#                  2       238435887 |************                    240761671.00000
#                  5       241636931 |********************************243247171.00000
#                  2       244837975 |************                    247641921.00000
#                  2       248039019 |************                    250232421.00000
#                  1       251240063 |******                          252712671.00000
#                  2       254441107 |************                    255633421.00000
#                  1       257642151 |******                          258319371.00000
#                  1       260843195 |******                          262548671.00000
#                  3       264044239 |*******************             265936504.33333
#                  2       267245283 |************                    267476671.00000
#                  3       270446327 |*******************             271910771.00000
#                  4       273647371 |*************************       275332396.00000
#                  0       276848415 |                                              -
#                  1       280049459 |******                          280777286.00000
#                  3       283250503 |*******************             284238237.66667
#                  5       286451547 |********************************288281451.00000
#                  0       289652591 |                                              -
#                  1       292853635 |******                          294572171.00000
#
#                  3           > 95% |*******************             301378704.33333
#
#        mean of 95% 252159232.38889
#          95th %ile       296054671
#
# WARNINGS
#     Too few samples, 57 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 57.4% of elapsed time.
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
            prc thr      nsecs/call      samples   errors cnt/samp 
execw_32ntv   1   1        37452771          273        0        1 
# bin/../bin-riscv64/execw -N execw_32ntv -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 32 -p 8192 -t -v 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15112671                   15112671
#                        max  51565971                   51565971
#                       mean  35515419.58974             35515419.58974
#                     median  37452771                   37452771*
#                     stddev   6921280.74102              6921280.74102
#             standard error    418894.96658               418894.96658
#       99% confidence level   1079073.43391              1079073.43391
#                       skew        -1.24230                   -1.24230
#                   kurtosis         1.57691                    1.57691
#           time correlation     77719.11103                77719.11103
#
#               elapsed time        20.70711
#                   run time         9.74592
#          getnsecs overhead      1429
#
#          number of samples       273
#         number of outliers         0
#    number of final samples       273
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6        15112671 |****                             15524271.00000
#                  4        16035456 |***                              16178296.00000
#                  3        16958241 |**                               17149404.33333
#                  3        17881026 |**                               18429304.33333
#                  1        18803811 |*                                19338071.00000
#                  1        19726596 |*                                20218871.00000
#                  1        20649381 |*                                20747271.00000
#                  2        21572166 |*                                22342421.00000
#                  1        22494951 |*                                23409171.00000
#                  1        23417736 |*                                23432971.00000
#                  6        24340521 |****                             24857187.66667
#                  0        25263306 |                                              -
#                  1        26186091 |*                                26269271.00000
#                  6        27108876 |****                             27618754.33333
#                  5        28031661 |****                             28312691.00000
#                  5        28954446 |****                             29162851.00000
#                  4        29877231 |***                              30469896.00000
#                  3        30800016 |**                               31354437.66667
#                  5        31722801 |****                             32145151.00000
#                 10        32645586 |********                         33128091.00000
#                  7        33568371 |*****                            34263656.71429
#                 15        34491156 |************                     34990131.00000
#                 17        35413941 |*************                    35985141.58824
#                 21        36336726 |*****************                36760790.04762
#                 39        37259511 |******************************** 37705053.05128
#                 36        38182296 |*****************************    38588343.22222
#                 24        39105081 |*******************              39627283.50000
#                 14        40027866 |***********                      40326792.42857
#                  5        40950651 |****                             41304811.00000
#                  7        41873436 |*****                            42330999.57143
#                  2        42796221 |*                                43290971.00000
#                  4        43719006 |***                              44127546.00000
#
#                 14           > 95% |***********                      46654939.92857
#
#        mean of 95%  34913283.35521
#          95th %ile        44641771
#
# WARNINGS
#     Actual benchmark run time only accounts for 47.1% of elapsed time.
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
           prc thr      nsecs/call      samples   errors cnt/samp 
execw_512n   1   1        74267671          282        0        1 
# bin/../bin-riscv64/execw -N execw_512n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 512 -p 512 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  31492171                   40840471
#                        max  91628871                   91628871
#                       mean  69864190.77113             70132949.77660
#                     median  74266271                   74267671*
#                     stddev  11593372.09304             11183377.16700
#             standard error    687940.06783               665960.41898
#       99% confidence level   1772133.61473              1715514.03928
#                       skew        -0.98165                   -0.89646
#                   kurtosis         0.17284                   -0.16611
#           time correlation    131413.11629               128469.88104
#
#               elapsed time        20.09639
#                   run time        19.91972
#          getnsecs overhead      1429
#
#          number of samples       284
#         number of outliers         2
#    number of final samples       282
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2        40840471 |**                               41111371.00000
#                  1        42131068 |*                                43287071.00000
#                  3        43421665 |***                              44306337.66667
#                  8        44712262 |*********                        45560971.00000
#                  6        46002859 |*******                          46611254.33333
#                  2        47293456 |**                               47866821.00000
#                  2        48584053 |**                               49548671.00000
#                  3        49874650 |***                              50465437.66667
#                  0        51165247 |                                              -
#                  4        52455844 |****                             53463171.00000
#                  7        53746441 |********                         54531571.00000
#                  7        55037038 |********                         55847042.42857
#                  7        56327635 |********                         56868613.85714
#                  5        57618232 |*****                            58084511.00000
#                  4        58908829 |****                             59696646.00000
#                  3        60199426 |***                              60516571.00000
#                  4        61490023 |****                             62562996.00000
#                  5        62780620 |*****                            63564271.00000
#                  6        64071217 |*******                          64688687.66667
#                  7        65361814 |********                         66070428.14286
#                  7        66652411 |********                         67100785.28571
#                  5        67943008 |*****                            68466231.00000
#                  4        69233605 |****                             69557371.00000
#                  6        70524202 |*******                          71246454.33333
#                 12        71814799 |**************                   72536204.33333
#                 25        73105396 |*****************************    73880123.00000
#                 21        74395993 |************************         75080218.61905
#                 26        75686590 |******************************   76266659.46154
#                 22        76977187 |**************************       77753244.40909
#                 27        78267784 |******************************** 78847141.37037
#                 14        79558381 |****************                 80299092.42857
#                 12        80848978 |**************                   81306962.66667
#
#                 15           > 95% |*****************                85368311.00000
#
#        mean of 95%  69277030.60674
#          95th %ile        82139571
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
          prc thr      nsecs/call      samples   errors cnt/samp 
execw_64n   1   1        47906971          447        0        1 
# bin/../bin-riscv64/execw -N execw_64n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 64 -p 4096 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  19052871                   19052871
#                        max  63203171                   63203171
#                       mean  44444768.34899             44444768.34899
#                     median  47906971                   47906971*
#                     stddev   8721373.57755              8721373.57755
#             standard error    412506.81529               412506.81529
#       99% confidence level   1062617.55619              1062617.55619
#                       skew        -1.34520                   -1.34520
#                   kurtosis         0.99850                    0.99850
#           time correlation     59504.87807                59504.87807
#
#               elapsed time        20.06300
#                   run time        19.92074
#          getnsecs overhead      1429
#
#          number of samples       447
#         number of outliers         0
#    number of final samples       447
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6        19052871 |***                              19342287.66667
#                  0        20106353 |                                              -
#                  1        21159835 |*                                22136571.00000
#                  7        22213317 |***                              22880771.00000
#                 13        23266799 |******                           23694132.53846
#                 14        24320281 |*******                          24783163.85714
#                  1        25373763 |*                                25508671.00000
#                  2        26427245 |*                                26931771.00000
#                  1        27480727 |*                                27970671.00000
#                  1        28534209 |*                                29246771.00000
#                  1        29587691 |*                                29670971.00000
#                  5        30641173 |**                               31042391.00000
#                  5        31694655 |**                               32113611.00000
#                  5        32748137 |**                               33177091.00000
#                  3        33801619 |*                                34412171.00000
#                  4        34855101 |**                               35041171.00000
#                  7        35908583 |***                              36551456.71429
#                  4        36962065 |**                               37784196.00000
#                  8        38015547 |****                             38475171.00000
#                  5        39069029 |**                               39448391.00000
#                 14        40122511 |*******                          40827885.28571
#                 15        41175993 |*******                          41716677.66667
#                  9        42229475 |****                             42908893.22222
#                 14        43282957 |*******                          43821471.00000
#                 13        44336439 |******                           44795294.07692
#                 20        45389921 |**********                       45918591.00000
#                 24        46443403 |************                     47038837.66667
#                 58        47496885 |*****************************    48045293.41379
#                 63        48550367 |******************************** 49058850.36508
#                 52        49603849 |**************************       50110090.23077
#                 30        50657331 |***************                  51205681.00000
#                 19        51710813 |*********                        52267118.36842
#
#                 23           > 95% |***********                      55266576.00000
#
#        mean of 95%  43857736.33019
#          95th %ile        52764271
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
           prc thr      nsecs/call      samples   errors cnt/samp 
execw_64nt   1   1       269818771           55        0        1 
# bin/../bin-riscv64/execw -N execw_64nt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 64 -p 4096 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min 200107571                  200107571
#                        max 297637571                  297637571
#                       mean 263727290.36364            263727290.36364
#                     median 269818771                  269818771*
#                     stddev  26131066.98263             26131066.98263
#             standard error   3523512.35314              3523512.35314
#       99% confidence level   9076567.82169              9076567.82169
#                       skew        -0.38090                   -0.38090
#                   kurtosis        -1.10207                   -1.10207
#           time correlation   1589265.27850              1589265.27850
#
#               elapsed time        25.83414
#                   run time        14.78264
#          getnsecs overhead      1429
#
#          number of samples        55
#         number of outliers         0
#    number of final samples        55
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1       200107571 |***                             200107571.00000
#                  0       203096459 |                                              -
#                  0       206085347 |                                              -
#                  0       209074235 |                                              -
#                  1       212063123 |***                             212421471.00000
#                  0       215052011 |                                              -
#                  0       218040899 |                                              -
#                  1       221029787 |***                             223777371.00000
#                  1       224018675 |***                             225765871.00000
#                  1       227007563 |***                             229546971.00000
#                  2       229996451 |*******                         231926871.00000
#                  2       232985339 |*******                         234053221.00000
#                  3       235974227 |**********                      236667204.33333
#                  2       238963115 |*******                         241532921.00000
#                  4       241952003 |**************                  243617771.00000
#                  1       244940891 |***                             246482171.00000
#                  2       247929779 |*******                         248339021.00000
#                  2       250918667 |*******                         252294821.00000
#                  2       253907555 |*******                         255122371.00000
#                  0       256896443 |                                              -
#                  1       259885331 |***                             262853171.00000
#                  0       262874219 |                                              -
#                  1       265863107 |***                             267375071.00000
#                  2       268851995 |*******                         270316171.00000
#                  1       271840883 |***                             272332871.00000
#                  2       274829771 |*******                         277484803.50000
#                  0       277818659 |                                              -
#                  3       280807547 |**********                      282065271.00000
#                  1       283796435 |***                             284988171.00000
#                  9       286785323 |********************************288165771.00000
#                  4       289774211 |**************                  290632396.00000
#                  3       292763099 |**********                      293428871.00000
#
#                  3           > 95% |**********                      296744404.33333
#
#        mean of 95% 261822456.86538
#          95th %ile       295751971
#
# WARNINGS
#     Too few samples, 55 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 57.2% of elapsed time.
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
            prc thr      nsecs/call      samples   errors cnt/samp 
execw_64ntv   1   1        37894471          230        0        1 
# bin/../bin-riscv64/execw -N execw_64ntv -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 64 -p 4096 -t -v 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  14792271                   29115171
#                        max  63200186                   47684371
#                       mean  36048558.17803             37871645.34783
#                     median  37726671                   37894471*
#                     stddev   6974072.12958              3278265.17803
#             standard error    429224.46831               216162.40450
#       99% confidence level   1105682.23038               556834.35399
#                       skew        -1.25231                   -0.24069
#                   kurtosis         2.73879                    0.94031
#           time correlation     76830.31421                45510.24255
#
#               elapsed time        20.72439
#                   run time         9.58040
#          getnsecs overhead      1429
#
#          number of samples       264
#         number of outliers        34
#    number of final samples       230
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4        29115171 |****                             29348946.00000
#                  1        29571647 |*                                29984471.00000
#                  1        30028123 |*                                30341171.00000
#                  3        30484599 |***                              30594971.00000
#                  4        30941075 |****                             31135371.00000
#                  4        31397551 |****                             31681046.00000
#                  3        31854027 |***                              31984871.00000
#                  4        32310503 |****                             32695121.00000
#                  1        32766979 |*                                32839871.00000
#                  0        33223455 |                                              -
#                  2        33679931 |**                               33879671.00000
#                  3        34136407 |***                              34534237.66667
#                  4        34592883 |****                             34865721.00000
#                  4        35049359 |****                             35354796.00000
#                  3        35505835 |***                              35924204.33333
#                 10        35962311 |**********                       36175711.00000
#                 10        36418787 |**********                       36739421.00000
#                 15        36875263 |****************                 37093311.00000
#                 30        37331739 |******************************** 37568064.33333
#                 23        37788215 |************************         37966353.60870
#                 18        38244691 |*******************              38474437.66667
#                 21        38701167 |**********************           38929509.09524
#                 11        39157643 |***********                      39411734.63636
#                  7        39614119 |*******                          39813099.57143
#                 12        40070595 |************                     40242162.66667
#                  4        40527071 |****                             40735996.00000
#                  5        40983547 |*****                            41310091.00000
#                  0        41440023 |                                              -
#                  3        41896499 |***                              42049237.66667
#                  3        42352975 |***                              42703437.66667
#                  4        42809451 |****                             43016196.00000
#                  1        43265927 |*                                43514271.00000
#
#                 12           > 95% |************                     44981487.66667
#
#        mean of 95%  37480277.88073
#          95th %ile        43722371
#
# WARNINGS
#     Actual benchmark run time only accounts for 46.2% of elapsed time.
#
# Usage: execw
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'execw')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
#     [-v use vfork() instead of fork()
# notes: measures fork/execv/waitpid time of simple process()
         prc thr      nsecs/call      samples   errors cnt/samp 
exit_100   1   1          807485          164        0       50 
# bin/../bin-riscv64/exit -N exit_100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 50 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    634959                     634959
#                        max   1348931                    1000071
#                       mean    808857.05988               802238.69512
#                     median    807489                     807485*
#                     stddev     84334.01202                66970.83957
#             standard error      6525.96178                 5229.54398
#       99% confidence level     16810.87754                13471.30528
#                       skew         1.93992                    0.16353
#                   kurtosis         9.69161                   -0.08334
#           time correlation      1538.16998                 1376.75015
#
#               elapsed time        25.03181
#                   run time         6.75420
#          getnsecs overhead      1429
#
#          number of samples       167
#         number of outliers         3
#    number of final samples       164
#             ops per sample        50.00000 (-B 50)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          634959 |**                                 634959.00000
#                  0          643768 |                                              -
#                  1          652577 |**                                 656579.00000
#                  0          661386 |                                              -
#                  1          670195 |**                                 677413.00000
#                  1          679004 |**                                 679797.00000
#                  8          687813 |*******************                692392.50000
#                  2          696622 |****                               699499.00000
#                  3          705431 |*******                            708615.00000
#                  3          714240 |*******                            718108.33333
#                  4          723049 |*********                          728030.50000
#                  5          731858 |************                       735154.60000
#                  9          740667 |**********************             745791.88889
#                  7          749476 |*****************                  754311.00000
#                  5          758285 |************                       762106.60000
#                  7          767094 |*****************                  770926.42857
#                  9          775903 |**********************             781101.88889
#                  5          784712 |************                       790771.00000
#                  6          793521 |**************                     794893.33333
#                 11          802330 |***************************        806530.81818
#                 11          811139 |***************************        816874.45455
#                 13          819948 |********************************   824637.46154
#                  6          828757 |**************                     833819.33333
#                  7          837566 |*****************                  841565.85714
#                  9          846375 |**********************             850640.11111
#                  5          855184 |************                       861408.60000
#                  1          863993 |**                                 871385.00000
#                  6          872802 |**************                     878696.33333
#                  2          881611 |****                               887554.00000
#                  5          890420 |************                       895692.20000
#                  1          899229 |**                                 905197.00000
#                  1          908038 |**                                 909191.00000
#
#                  9           > 95% |**********************             945977.22222
#
#        mean of 95%    793892.58710
#          95th %ile          916843
#
# WARNINGS
#     Actual benchmark run time only accounts for 27.0% of elapsed time.
#
# Usage: exit
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exit')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-e] (uses _exit() rather than exit())notes: measures exit()
                prc thr      nsecs/call      samples   errors cnt/samp 
exit_100_nolibc   1   1          576378          150        0       60 
# bin/../bin-riscv64/exit -N exit_100_nolibc -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -e -B 60 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    451561                     451561
#                        max    799186                     726536
#                       mean    578486.73026               575647.76000
#                     median    576495                     576378*
#                     stddev     58834.54408                53763.39650
#             standard error      4772.11168                 4389.76294
#       99% confidence level     12292.95968                11308.02934
#                       skew         0.59024                    0.10534
#                   kurtosis         1.28249                   -0.09898
#           time correlation      1272.34739                 1208.81873
#
#               elapsed time        25.08930
#                   run time         5.27601
#          getnsecs overhead      1429
#
#          number of samples       152
#         number of outliers         2
#    number of final samples       150
#             ops per sample        60.00000 (-B 60)
#
#       recommended -B value         2
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          451561 |**                                 451561.00000
#                  1          458237 |**                                 462751.00000
#                  1          464913 |**                                 464971.00000
#                  3          471589 |********                           476424.33333
#                  2          478265 |*****                              478887.50000
#                  3          484941 |********                           490275.00000
#                  2          491617 |*****                              495218.00000
#                  0          498293 |                                              -
#                  5          504969 |**************                     507171.40000
#                  6          511645 |*****************                  514792.83333
#                  5          518321 |**************                     521960.80000
#                  4          524997 |***********                        528828.50000
#                  3          531673 |********                           535001.33333
#                  4          538349 |***********                        540117.00000
#                  7          545025 |********************               548783.00000
#                  5          551701 |**************                     554656.40000
#                 10          558377 |*****************************      562799.70000
#                  9          565053 |**************************         567429.77778
#                  6          571729 |*****************                  575061.33333
#                 11          578405 |********************************   582322.36364
#                  3          585081 |********                           588218.66667
#                 11          591757 |********************************   595015.45455
#                  7          598433 |********************               602114.57143
#                  5          605109 |**************                     607387.00000
#                  4          611785 |***********                        615688.50000
#                  6          618461 |*****************                  622564.83333
#                  3          625137 |********                           626827.33333
#                  6          631813 |*****************                  635168.16667
#                  4          638489 |***********                        642877.25000
#                  3          645165 |********                           650164.33333
#                  1          651841 |**                                 655723.00000
#                  1          658517 |**                                 660700.00000
#
#                  8           > 95% |***********************            688650.50000
#
#        mean of 95%    569281.40845
#          95th %ile          665188
#
# WARNINGS
#     Actual benchmark run time only accounts for 21.0% of elapsed time.
#
# Usage: exit
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exit')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-e] (uses _exit() rather than exit())notes: measures exit()
    prc thr      nsecs/call      samples   errors cnt/samp     func
exp   1   1             791         6458        0     1058      exp
# bin/../bin-riscv64/exp -N exp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       755                        755
#                        max     72147                        885
#                       mean       848.13754                  800.88681
#                     median       792                        791*
#                     stddev       894.66378                   27.91344
#             standard error        10.78770                    0.34735
#       99% confidence level        27.78911                    0.89477
#                       skew        73.81243                    1.25912
#                   kurtosis      5863.34062                    0.45874
#           time correlation         0.05151                    0.01339
#
#               elapsed time        20.00424
#                   run time         5.96176
#          getnsecs overhead      1429
#
#          number of samples      6878
#         number of outliers       420
#    number of final samples      6458
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             755 |*                                     755.00000
#                  9             759 |*                                     761.00000
#                 40             763 |*                                     764.75000
#                126             767 |****                                  768.71429
#                282             771 |***********                           772.63830
#                510             775 |********************                  776.58235
#                708             779 |***************************           780.62712
#                810             783 |********************************      784.51111
#                720             787 |****************************          788.44306
#                597             791 |***********************               792.43216
#                448             795 |*****************                     796.31920
#                323             799 |************                          800.38700
#                264             803 |**********                            804.30303
#                144             807 |*****                                 808.40972
#                 91             811 |***                                   812.25275
#                 68             815 |**                                    816.32353
#                 35             819 |*                                     820.22857
#                 28             823 |*                                     824.64286
#                 43             827 |*                                     828.97674
#                 70             831 |**                                    832.78571
#                 88             835 |***                                   836.62500
#                119             839 |****                                  840.50420
#                128             843 |*****                                 844.57031
#                149             847 |*****                                 848.53691
#                129             851 |*****                                 852.46512
#                123             855 |****                                  856.39837
#                 82             859 |***                                   859.57317
#
#                323           > 95% |************                          870.21053
#
#        mean of 95%       797.23700
#          95th %ile             861
#
# WARNINGS
#     Actual benchmark run time only accounts for 29.8% of elapsed time.
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
      prc thr      nsecs/call      samples   errors cnt/samp     func
exp10   1   1            3275         6253        0      272    exp10
# bin/../bin-riscv64/exp -N exp10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      3119                       3119
#                        max     59427                       3646
#                       mean      3471.90569                 3315.02671
#                     median      3285                       3275*
#                     stddev      1096.16674                  110.25820
#             standard error        13.23471                    1.39433
#       99% confidence level        34.09262                    3.59180
#                       skew        23.82021                    1.14290
#                   kurtosis      1028.87343                    0.34830
#           time correlation         0.17462                    0.05587
#
#               elapsed time        20.00815
#                   run time         6.41451
#          getnsecs overhead      1429
#
#          number of samples      6860
#         number of outliers       607
#    number of final samples      6253
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3            3119 |*                                    3123.66667
#                 11            3133 |*                                    3142.36364
#                 24            3147 |*                                    3155.12500
#                 57            3161 |**                                   3168.70175
#                104            3175 |*****                                3182.00962
#                208            3189 |**********                           3196.26923
#                351            3203 |*****************                    3210.02849
#                407            3217 |*******************                  3224.15725
#                607            3231 |*****************************        3237.66227
#                658            3245 |********************************     3251.37538
#                602            3259 |*****************************        3265.14452
#                458            3273 |**********************               3279.10917
#                376            3287 |******************                   3293.14628
#                349            3301 |****************                     3307.33811
#                213            3315 |**********                           3321.46479
#                154            3329 |*******                              3335.16234
#                114            3343 |*****                                3349.22807
#                 75            3357 |***                                  3363.09333
#                 68            3371 |***                                  3377.82353
#                 46            3385 |**                                   3391.71739
#                 70            3399 |***                                  3405.90000
#                 67            3413 |***                                  3419.94030
#                101            3427 |****                                 3434.06931
#                114            3441 |*****                                3447.46491
#                130            3455 |******                               3461.27692
#                143            3469 |******                               3475.67832
#                119            3483 |*****                                3489.78992
#                 89            3497 |****                                 3503.37079
#                101            3511 |****                                 3516.27723
#                 79            3525 |***                                  3531.45570
#                 42            3539 |**                                   3542.23810
#
#                313           > 95% |***************                      3591.25559
#
#        mean of 95%      3300.47121
#          95th %ile            3548
#
# WARNINGS
#     Actual benchmark run time only accounts for 32.1% of elapsed time.
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
       prc thr      nsecs/call      samples   errors cnt/samp     func
exp10f   1   1             140        19802        0     5853   exp10f
# bin/../bin-riscv64/exp -N exp10f -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp10f 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       128                        128
#                        max     71877                        165
#                       mean       151.79179                  142.76750
#                     median       141                        140*
#                     stddev       505.19547                    7.38752
#             standard error         3.50155                    0.05250
#       99% confidence level         9.02000                    0.13524
#                       skew       138.12484                    0.94975
#                   kurtosis     19531.72485                    0.21086
#           time correlation         0.00362                    0.00122
#
#               elapsed time        20.00588
#                   run time        17.72658
#          getnsecs overhead      1429
#
#          number of samples     20816
#         number of outliers      1014
#    number of final samples     19802
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3             128 |*                                             -
#                 10             129 |*                                             -
#                 23             130 |*                                             -
#                124             131 |**                                            -
#                140             132 |**                                            -
#                161             133 |**                                            -
#                470             134 |*******                                       -
#               1373             135 |**********************                        -
#               1553             136 |*************************                     -
#               1409             137 |**********************                        -
#               1881             138 |******************************                -
#               1982             139 |********************************              -
#               1203             140 |*******************                           -
#                847             141 |*************                                 -
#                729             142 |***********                                   -
#                534             143 |********                                      -
#                454             144 |*******                                       -
#                595             145 |*********                                     -
#                625             146 |**********                                    -
#                632             147 |**********                                    -
#                693             148 |***********                                   -
#                618             149 |*********                                     -
#                558             150 |*********                                     -
#                517             151 |********                                      -
#                408             152 |******                                        -
#                301             153 |****                                          -
#                254             154 |****                                          -
#                221             155 |***                                           -
#                183             156 |**                                            -
#                190             157 |***                                           -
#                120             158 |*                                             -
#
#                991           > 95% |****************                      161.35822
#
#        mean of 95%       141.78810
#          95th %ile             158
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
       prc thr      nsecs/call      samples   errors cnt/samp     func
exp10l   1   1           18395        16273        0       57   exp10l
# bin/../bin-riscv64/exp -N exp10l -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp10l 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     17819                      17819
#                        max    568967                      20395
#                       mean     19045.93462                18657.88662
#                     median     18426                      18395*
#                     stddev      5067.23216                  579.25134
#             standard error        38.56225                    4.54081
#       99% confidence level        99.33635                   11.69712
#                       skew        76.55443                    1.13939
#                   kurtosis      8056.56966                    0.00413
#           time correlation         0.22421                    0.11067
#
#               elapsed time        20.00479
#                   run time        18.65688
#          getnsecs overhead      1429
#
#          number of samples     17267
#         number of outliers       994
#    number of final samples     16273
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4           17819 |*                                   17840.25000
#                 16           17882 |*                                   17921.43750
#                 32           17945 |*                                   17981.40625
#                259           18008 |****                                18047.71042
#                688           18071 |**********                          18109.96366
#               1593           18134 |************************            18167.64156
#               1853           18197 |****************************        18228.29142
#               2048           18260 |********************************    18289.59619
#               1488           18323 |***********************             18351.77621
#                981           18386 |***************                     18416.57900
#                964           18449 |***************                     18478.75000
#                895           18512 |*************                       18540.68827
#                540           18575 |********                            18602.23889
#                279           18638 |****                                18664.20789
#                141           18701 |**                                  18726.59574
#                102           18764 |*                                   18795.70588
#                 76           18827 |*                                   18855.25000
#                 61           18890 |*                                   18922.65574
#                 57           18953 |*                                   18988.36842
#                 57           19016 |*                                   19050.61404
#                 80           19079 |*                                   19113.98750
#                192           19142 |***                                 19175.95833
#                254           19205 |***                                 19238.40551
#                340           19268 |*****                               19299.46765
#                404           19331 |******                              19363.92079
#                444           19394 |******                              19424.90315
#                378           19457 |*****                               19487.24339
#                310           19520 |****                                19550.78710
#                330           19583 |*****                               19614.82121
#                261           19646 |****                                19676.52107
#                192           19709 |***                                 19743.05208
#                140           19772 |**                                  19798.70000
#
#                814           > 95% |************                        20055.39926
#
#        mean of 95%     18584.30002
#          95th %ile           19826
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
     prc thr      nsecs/call      samples   errors cnt/samp     func
exp2   1   1             138        20342        0     5744     exp2
# bin/../bin-riscv64/exp -N exp2 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp2 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       133                        133
#                        max    107507                        155
#                       mean       151.59056                  140.30523
#                     median       138                        138*
#                     stddev       742.77592                    4.84817
#             standard error         5.04508                    0.03399
#       99% confidence level        12.99613                    0.08756
#                       skew       140.08186                    1.40996
#                   kurtosis     20149.22751                    0.76884
#           time correlation         0.00367                    0.00071
#
#               elapsed time        20.00539
#                   run time        17.79517
#          getnsecs overhead      1429
#
#          number of samples     21676
#         number of outliers      1334
#    number of final samples     20342
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7             133 |*                                             -
#                 14             134 |*                                             -
#                149             135 |*                                             -
#               1715             136 |*********                                     -
#               5512             137 |********************************              -
#               3782             138 |*********************                         -
#               2128             139 |************                                  -
#               1660             140 |*********                                     -
#                642             141 |***                                           -
#                249             142 |*                                             -
#                178             143 |*                                             -
#                184             144 |*                                             -
#                271             145 |*                                             -
#                370             146 |**                                            -
#                599             147 |***                                           -
#                673             148 |***                                           -
#                567             149 |***                                           -
#                472             150 |**                                            -
#                152             151 |*                                             -
#
#               1018           > 95% |*****                                 152.88605
#
#        mean of 95%       139.64247
#          95th %ile             151
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
      prc thr      nsecs/call      samples   errors cnt/samp     func
exp2f   1   1             127        19616        0     6537    exp2f
# bin/../bin-riscv64/exp -N exp2f -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp2f 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       122                        122
#                        max     66107                        141
#                       mean       136.17853                  128.48955
#                     median       127                        127*
#                     stddev       460.78945                    4.06326
#             standard error         3.18195                    0.02901
#       99% confidence level         8.19670                    0.07473
#                       skew       140.30675                    1.23045
#                   kurtosis     20039.52633                    0.59177
#           time correlation         0.00270                    0.00065
#
#               elapsed time        20.00443
#                   run time        17.89351
#          getnsecs overhead      1429
#
#          number of samples     20971
#         number of outliers      1355
#    number of final samples     19616
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             122 |*                                             -
#                181             123 |*                                             -
#               1076             124 |**********                                    -
#               3219             125 |*******************************               -
#               3259             126 |*******************************               -
#               3283             127 |********************************              -
#               2392             128 |***********************                       -
#               1118             129 |**********                                    -
#                585             130 |*****                                         -
#                403             131 |***                                           -
#                352             132 |***                                           -
#                584             133 |*****                                         -
#                682             134 |******                                        -
#                613             135 |*****                                         -
#                593             136 |*****                                         -
#                294             137 |**                                            -
#
#                981           > 95% |*********                             138.88481
#
#        mean of 95%       127.94231
#          95th %ile             137
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
      prc thr      nsecs/call      samples   errors cnt/samp     func
exp2l   1   1            9218        16611        0      109    exp2l
# bin/../bin-riscv64/exp -N exp2l -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f exp2l 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      5619                       8496
#                        max     92037                      10281
#                       mean      9512.86128                 9379.25850
#                     median      9252                       9218*
#                     stddev      1106.84503                  300.84068
#             standard error         8.36290                    2.33420
#       99% confidence level        21.54283                    6.01291
#                       skew        30.93115                    1.19866
#                   kurtosis      1902.22032                    0.06008
#           time correlation         0.09134                    0.05435
#
#               elapsed time        20.00513
#                   run time        18.16726
#          getnsecs overhead      1429
#
#          number of samples     17517
#         number of outliers       906
#    number of final samples     16611
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3            8496 |*                                    8518.33333
#                  5            8543 |*                                    8568.00000
#                  2            8590 |*                                    8611.50000
#                  1            8637 |*                                    8638.00000
#                  5            8684 |*                                    8708.80000
#                  6            8731 |*                                    8753.83333
#                  4            8778 |*                                    8801.25000
#                  5            8825 |*                                    8845.20000
#                  9            8872 |*                                    8907.33333
#                 10            8919 |*                                    8939.60000
#                 10            8966 |*                                    8997.90000
#                 81            9013 |*                                    9038.75309
#                264            9060 |*                                    9085.69318
#               1272            9107 |*******                              9138.34434
#               5407            9154 |********************************     9180.54411
#               1618            9201 |*********                            9212.67244
#               1014            9248 |******                               9275.46450
#               2012            9295 |***********                          9319.00547
#                712            9342 |****                                 9356.24298
#                115            9389 |*                                    9410.13913
#                 58            9436 |*                                    9459.96552
#                 38            9483 |*                                    9501.60526
#                 21            9530 |*                                    9549.95238
#                 22            9577 |*                                    9604.27273
#                 58            9624 |*                                    9647.91379
#                 89            9671 |*                                    9696.46067
#                283            9718 |*                                    9746.92580
#                788            9765 |****                                 9790.06091
#                638            9812 |***                                  9829.78213
#                442            9859 |**                                   9884.19457
#                563            9906 |***                                  9929.56128
#                225            9953 |*                                    9963.70667
#
#                831           > 95% |****                                10085.52226
#
#        mean of 95%      9342.06553
#          95th %ile            9975
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
     prc thr      nsecs/call      samples   errors cnt/samp     func
expf   1   1             128        20156        0     6268     expf
# bin/../bin-riscv64/exp -N expf -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f expf 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       121                        121
#                        max     94287                        143
#                       mean       139.44739                  128.72296
#                     median       128                        128*
#                     stddev       651.15850                    4.71825
#             standard error         4.43602                    0.03323
#       99% confidence level        11.42718                    0.08561
#                       skew       140.83858                    1.12160
#                   kurtosis     20291.76675                    0.51163
#           time correlation         0.00356                    0.00075
#
#               elapsed time        20.00434
#                   run time        17.78333
#          getnsecs overhead      1429
#
#          number of samples     21547
#         number of outliers      1391
#    number of final samples     20156
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7             121 |*                                             -
#                149             122 |*                                             -
#               1002             123 |**********                                    -
#               2332             124 |***********************                       -
#               2137             125 |*********************                         -
#               1651             126 |****************                              -
#               2214             127 |**********************                        -
#               3144             128 |********************************              -
#               1698             129 |*****************                             -
#               1139             130 |***********                                   -
#                648             131 |******                                        -
#                294             132 |**                                            -
#                250             133 |**                                            -
#                336             134 |***                                           -
#                392             135 |***                                           -
#                555             136 |*****                                         -
#                571             137 |*****                                         -
#                525             138 |*****                                         -
#                104             139 |*                                             -
#
#               1008           > 95% |**********                            140.60020
#
#        mean of 95%       128.09771
#          95th %ile             139
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
     prc thr      nsecs/call      samples   errors cnt/samp     func
expl   1   1            8832        17653        0      104     expl
# bin/../bin-riscv64/exp -N expl -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f expl 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      8523                       8523
#                        max    477067                       9747
#                       mean      9301.56073                 8940.50161
#                     median      8853                       8832*
#                     stddev      4152.79405                  268.67362
#             standard error        30.02185                    2.02216
#       99% confidence level        77.33630                    5.20909
#                       skew        77.49842                    1.31372
#                   kurtosis      8452.43645                    0.53868
#           time correlation         0.14663                    0.04644
#
#               elapsed time        20.00481
#                   run time        18.26955
#          getnsecs overhead      1429
#
#          number of samples     19134
#         number of outliers      1481
#    number of final samples     17653
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 16            8523 |*                                    8547.12500
#                 48            8555 |*                                    8570.47917
#                137            8587 |*                                    8605.27737
#                236            8619 |***                                  8637.20763
#                390            8651 |*****                                8668.67949
#                723            8683 |*********                            8700.35546
#               1619            8715 |********************                 8732.06609
#               2472            8747 |********************************     8762.98220
#               2026            8779 |**************************           8793.31343
#               1546            8811 |********************                 8825.03169
#               1092            8843 |**************                       8858.67125
#               1106            8875 |**************                       8890.28119
#               1010            8907 |*************                        8921.82079
#                708            8939 |*********                            8953.43079
#                442            8971 |*****                                8985.07240
#                228            9003 |**                                   9017.28509
#                118            9035 |*                                    9048.55932
#                102            9067 |*                                    9082.79412
#                 61            9099 |*                                    9111.70492
#                 48            9131 |*                                    9145.91667
#                 54            9163 |*                                    9178.31481
#                 67            9195 |*                                    9212.31343
#                129            9227 |*                                    9245.34109
#                204            9259 |**                                   9276.71078
#                265            9291 |***                                  9307.89434
#                359            9323 |****                                 9338.03900
#                362            9355 |****                                 9370.83978
#                334            9387 |****                                 9401.50599
#                291            9419 |***                                  9433.59794
#                271            9451 |***                                  9467.26199
#                245            9483 |***                                  9499.75102
#                 61            9515 |*                                    9520.04918
#
#                883           > 95% |***********                          9616.18913
#
#        mean of 95%      8904.92427
#          95th %ile            9525
#
# Usage: exp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'exp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <exp func> (exp[fl],exp2[fl],exp10[fl], default exp)]
# note: measures exp[2|10][fl]() family of functions
             prc thr      nsecs/call      samples   errors cnt/samp 
fcntl_ndelay   1   1            5689         6878        0      150 
# bin/../bin-riscv64/fcntl_ndelay -N fcntl_ndelay -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      5384                       5384
#                        max    125393                       6718
#                       mean      6121.58938                 5811.72347
#                     median      5705                       5689*
#                     stddev      2233.04209                  301.99248
#             standard error        25.62993                    3.64137
#       99% confidence level        66.02270                    9.38017
#                       skew        27.24804                    1.43013
#                   kurtosis      1220.04293                    0.80947
#           time correlation         0.33197                    0.13092
#
#               elapsed time        20.00680
#                   run time         6.86127
#          getnsecs overhead      1429
#
#          number of samples      7591
#         number of outliers       713
#    number of final samples      6878
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            5384 |*                                    5384.00000
#                  1            5420 |*                                    5454.00000
#                 29            5456 |*                                    5480.72414
#                175            5492 |******                               5513.00000
#                425            5528 |**************                       5546.97176
#                668            5564 |***********************              5582.77695
#                842            5600 |*****************************        5618.58195
#                912            5636 |********************************     5653.41996
#                787            5672 |***************************          5688.65820
#                578            5708 |********************                 5724.01211
#                383            5744 |*************                        5759.57441
#                265            5780 |*********                            5796.45283
#                127            5816 |****                                 5831.21260
#                100            5852 |***                                  5868.02000
#                 66            5888 |**                                   5905.56061
#                 53            5924 |*                                    5942.13208
#                 26            5960 |*                                    5974.46154
#                 33            5996 |*                                    6013.42424
#                 25            6032 |*                                    6047.44000
#                 30            6068 |*                                    6083.43333
#                 50            6104 |*                                    6122.38000
#                 89            6140 |***                                  6159.22472
#                101            6176 |***                                  6193.20792
#                122            6212 |****                                 6231.32787
#                119            6248 |****                                 6265.04202
#                121            6284 |****                                 6302.32231
#                102            6320 |***                                  6337.25490
#                 97            6356 |***                                  6372.48454
#                 70            6392 |**                                   6409.65714
#                 69            6428 |**                                   6446.46377
#                 52            6464 |*                                    6481.63462
#                 16            6500 |*                                    6504.12500
#
#                344           > 95% |************                         6600.93605
#
#        mean of 95%      5770.17325
#          95th %ile            6507
#
# WARNINGS
#     Actual benchmark run time only accounts for 34.3% of elapsed time.
#
# Usage: fcntl_ndelay
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'fcntl_ndelay')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures F_GETFL/F_SETFL O_NDELAY on socket
          prc thr      nsecs/call      samples   errors cnt/samp 
fcntl_tmp   1   1            1951        18266        0      451 
# bin/../bin-riscv64/fcntl -N fcntl_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1857                       1857
#                        max    143986                       2461
#                       mean      2088.50108                 2020.64732
#                     median      1954                       1951*
#                     stddev      1138.38224                  146.68755
#             standard error         8.17564                    1.08535
#       99% confidence level        21.06044                    2.79587
#                       skew       104.08042                    1.37609
#                   kurtosis     12614.83924                    0.49792
#           time correlation         0.04013                    0.02363
#
#               elapsed time        20.00407
#                   run time        18.07511
#          getnsecs overhead      1429
#
#          number of samples     19388
#         number of outliers      1122
#    number of final samples     18266
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 46            1857 |*                                    1867.02174
#                191            1873 |*                                    1882.60733
#                731            1889 |*******                              1898.48700
#               2532            1905 |*************************            1913.52330
#               3216            1921 |********************************     1928.25187
#               2718            1937 |***************************          1944.50442
#               1928            1953 |*******************                  1959.60010
#               1025            1969 |**********                           1975.63707
#                578            1985 |*****                                1991.79239
#                323            2001 |***                                  2007.70279
#                183            2017 |*                                    2024.05464
#                172            2033 |*                                    2040.23256
#                123            2049 |*                                    2055.96748
#                117            2065 |*                                    2072.52137
#                117            2081 |*                                    2088.97436
#                 99            2097 |*                                    2104.47475
#                 90            2113 |*                                    2120.60000
#                 64            2129 |*                                    2136.48438
#                 93            2145 |*                                    2153.48387
#                154            2161 |*                                    2169.70130
#                323            2177 |***                                  2184.75851
#                343            2193 |***                                  2200.32653
#                315            2209 |***                                  2216.07619
#                297            2225 |**                                   2231.74074
#                257            2241 |**                                   2248.52918
#                278            2257 |**                                   2264.32734
#                256            2273 |**                                   2280.73438
#                246            2289 |**                                   2296.63008
#                247            2305 |**                                   2312.89879
#                218            2321 |**                                   2327.95872
#                 72            2337 |*                                    2339.45833
#
#                914           > 95% |*********                            2391.03829
#
#        mean of 95%      2001.13733
#          95th %ile            2342
#
# Usage: fcntl
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'fcntl')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-fcntl (default /dev/null)]
# notes: measures fcntl()
          prc thr      nsecs/call      samples   errors cnt/samp 
file_lock   1   1          123154        11419        0        4 
# bin/../bin-riscv64/file_lock -N file_lock -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    118094                     118094
#                        max   1397974                     130354
#                       mean    176886.97507               123431.44785
#                     median    124874                     123154*
#                     stddev    107296.02925                 2311.92039
#             standard error       817.05643                   21.63510
#       99% confidence level      2104.73736                   55.73201
#                       skew         2.25190                    0.54722
#                   kurtosis         6.63299                   -0.09695
#           time correlation        15.36783                    0.68269
#
#               elapsed time        20.00445
#                   run time        14.79850
#          getnsecs overhead      1429
#
#          number of samples     17245
#         number of outliers      5826
#    number of final samples     11419
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5          118094 |*                                  118300.00000
#                  9          118399 |*                                  118618.44444
#                 39          118704 |*                                  118875.53846
#                 70          119009 |***                                119170.80000
#                116          119314 |*****                              119481.36207
#                172          119619 |********                           119772.44186
#                264          119924 |*************                      120078.62121
#                318          120229 |***************                    120376.24214
#                408          120534 |********************               120690.55147
#                438          120839 |*********************              120995.07306
#                498          121144 |************************           121299.15462
#                535          121449 |**************************         121593.14206
#                645          121754 |********************************   121904.09457
#                631          122059 |*******************************    122213.24881
#                583          122364 |****************************       122515.51973
#                597          122669 |*****************************      122817.57454
#                624          122974 |******************************     123118.87019
#                608          123279 |******************************     123430.96711
#                538          123584 |**************************         123725.89405
#                499          123889 |************************           124036.77956
#                489          124194 |************************           124341.76892
#                426          124499 |*********************              124648.23474
#                357          124804 |*****************                  124952.54902
#                338          125109 |****************                   125252.68343
#                293          125414 |**************                     125557.72696
#                271          125719 |*************                      125871.43911
#                253          126024 |************                       126176.03953
#                231          126329 |***********                        126467.33766
#                169          126634 |********                           126773.47929
#                172          126939 |********                           127085.48837
#                160          127244 |*******                            127393.46875
#                 92          127549 |****                               127694.44565
#
#                571           > 95% |****************************       128838.94571
#
#        mean of 95%    123146.81646
#          95th %ile          127834
#
# WARNINGS
#     Actual benchmark run time only accounts for 74.0% of elapsed time.
#
# Usage: file_lock
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'file_lock')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
# 
         prc thr      nsecs/call      samples   errors cnt/samp 
fork_100   1   1         2307438          367        0       15 
# bin/../bin-riscv64/fork -N fork_100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 15 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1889678                    1889678
#                        max   4320711                    2800965
#                       mean   2392070.51134              2331909.46866
#                     median   2321485                    2307438*
#                     stddev    271673.16676               157264.04450
#             standard error     13634.88539                 8209.11630
#       99% confidence level     35123.46476                21146.68359
#                       skew         2.35829                    0.70686
#                   kurtosis         8.68070                    0.38436
#           time correlation      1962.93037                 1405.39717
#
#               elapsed time        20.05736
#                   run time        14.24535
#          getnsecs overhead      1429
#
#          number of samples       397
#         number of outliers        30
#    number of final samples       367
#             ops per sample        15.00000 (-B 15)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         1889678 |*                                 1889678.00000
#                  0         1914117 |                                              -
#                  0         1938556 |                                              -
#                  0         1962995 |                                              -
#                  2         1987434 |*                                 2006224.50000
#                  2         2011873 |*                                 2020175.00000
#                  3         2036312 |**                                2052204.33333
#                  3         2060751 |**                                2073384.66667
#                  4         2085190 |***                               2100871.50000
#                  7         2109629 |******                            2123774.28571
#                 11         2134068 |**********                        2149321.54545
#                 22         2158507 |*********************             2168906.81818
#                 16         2182946 |***************                   2196477.56250
#                 26         2207385 |*************************         2220272.11538
#                 25         2231824 |************************          2245886.28000
#                 27         2256263 |**************************        2268237.55556
#                 32         2280702 |*******************************   2291942.56250
#                 33         2305141 |********************************  2319146.24242
#                 27         2329580 |**************************        2342123.00000
#                 25         2354019 |************************          2369006.84000
#                 10         2378458 |*********                         2387920.10000
#                  8         2402897 |*******                           2416020.50000
#                 12         2427336 |***********                       2441029.16667
#                 13         2451775 |************                      2464415.84615
#                  4         2476214 |***                               2492854.75000
#                  6         2500653 |*****                             2512257.00000
#                  8         2525092 |*******                           2539418.75000
#                  3         2549531 |**                                2565511.00000
#                  3         2573970 |**                                2583749.00000
#                  7         2598409 |******                            2611164.57143
#                  5         2622848 |****                              2631387.40000
#                  3         2647287 |**                                2654549.00000
#
#                 19           > 95% |******************                2711706.47368
#
#        mean of 95%   2311173.42529
#          95th %ile         2671705
#
# WARNINGS
#     Actual benchmark run time only accounts for 71.0% of elapsed time.
#
# Usage: fork
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'fork')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures fork()
           prc thr      nsecs/call      samples   errors cnt/samp 
getcontext   1   1           13303        17011        0       73 
# bin/../bin-riscv64/getcontext -N getcontext -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     12761                      12761
#                        max     71477                      16528
#                       mean     14052.68640                13802.25642
#                     median     13315                      13303*
#                     stddev      2042.98365                  908.51604
#             standard error        15.35557                    6.96575
#       99% confidence level        39.55595                   17.94376
#                       skew         9.64259                    1.29816
#                   kurtosis       145.83385                    0.25067
#           time correlation         0.22112                    0.15569
#
#               elapsed time        20.00542
#                   run time        18.23894
#          getnsecs overhead      1429
#
#          number of samples     17701
#         number of outliers       690
#    number of final samples     17011
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8           12761 |*                                   12827.37500
#                 22           12854 |*                                   12890.95455
#                126           12947 |*                                   13013.24603
#                300           13040 |*                                   13085.24667
#               5701           13133 |********************************    13193.84301
#               2786           13226 |***************                     13266.40273
#               2035           13319 |***********                         13354.74889
#                368           13412 |**                                  13449.79620
#                207           13505 |*                                   13549.51691
#                132           13598 |*                                   13648.52273
#                315           13691 |*                                   13739.67937
#                298           13784 |*                                   13826.34228
#                173           13877 |*                                   13921.58960
#                 85           13970 |*                                   14006.75294
#                 42           14063 |*                                   14109.64286
#                 30           14156 |*                                   14199.83333
#                 28           14249 |*                                   14300.53571
#                 54           14342 |*                                   14387.87037
#                 58           14435 |*                                   14485.63793
#                136           14528 |*                                   14574.47059
#                250           14621 |*                                   14672.19200
#                373           14714 |**                                  14761.17694
#                376           14807 |**                                  14853.15160
#                388           14900 |**                                  14947.64691
#                319           14993 |*                                   15039.82759
#                272           15086 |*                                   15129.71691
#                258           15179 |*                                   15225.64729
#                263           15272 |*                                   15316.42586
#                221           15365 |*                                   15408.90498
#                198           15458 |*                                   15503.14646
#                178           15551 |*                                   15594.14045
#                160           15644 |*                                   15689.67500
#
#                851           > 95% |****                                16067.16451
#
#        mean of 95%     13682.98434
#          95th %ile           15732
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: getcontext
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getcontext')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures getcontext()
       prc thr      nsecs/call      samples   errors cnt/samp 
getenv   1   1             330        19109        0     2632 
# bin/../bin-riscv64/getenv -N getenv -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       314                        314
#                        max     66177                        383
#                       mean       350.41266                  337.52813
#                     median       331                        330*
#                     stddev       490.15797                   15.16306
#             standard error         3.45533                    0.10969
#       99% confidence level         8.90093                    0.28256
#                       skew       123.88693                    0.96270
#                   kurtosis     16305.42884                   -0.06209
#           time correlation         0.00596                    0.00255
#
#               elapsed time        20.00424
#                   run time        18.15524
#          getnsecs overhead      1429
#
#          number of samples     20123
#         number of outliers      1014
#    number of final samples     19109
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7             314 |*                                     314.57143
#                 19             316 |*                                     316.73684
#                 80             318 |*                                     318.71250
#                368             320 |****                                  320.67391
#               1423             322 |****************                      322.65355
#               2698             324 |********************************      324.53336
#               2475             326 |*****************************         326.46788
#               1898             328 |**********************                328.46207
#               1483             330 |*****************                     330.47336
#                944             332 |***********                           332.42903
#                451             334 |*****                                 334.44568
#                207             336 |**                                    336.37681
#                113             338 |*                                     338.39823
#                 67             340 |*                                     340.47761
#                 98             342 |*                                     342.55102
#                270             344 |***                                   344.64074
#                562             346 |******                                346.56228
#                910             348 |**********                            348.52857
#                953             350 |***********                           350.48793
#                850             352 |**********                            352.45294
#                701             354 |********                              354.45364
#                545             356 |******                                356.43486
#                344             358 |****                                  358.46221
#                254             360 |***                                   360.43307
#                161             362 |*                                     362.45342
#                129             364 |*                                     364.49612
#                116             366 |*                                     366.48276
#                 27             368 |*                                     368.00000
#
#                956           > 95% |***********                           375.47908
#
#        mean of 95%       335.52950
#          95th %ile             368
#
# Usage: getenv
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getenv')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s search-size (default = 100)]
# notes: measures time to search env for missing string
            prc thr      nsecs/call      samples   errors cnt/samp 
getpeername   1   1           35610        18128        0       25 
# bin/../bin-riscv64/getpeername -N getpeername -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     34245                      34245
#                        max    574636                      42275
#                       mean     37490.21621                36558.39657
#                     median     35649                      35610*
#                     stddev      7277.66662                 1907.63490
#             standard error        52.50426                   14.16838
#       99% confidence level       135.25098                   36.49776
#                       skew        28.58660                    1.39611
#                   kurtosis      1696.42930                    0.45969
#           time correlation         0.53758                    0.30404
#
#               elapsed time        20.00515
#                   run time        18.07623
#          getnsecs overhead      1429
#
#          number of samples     19213
#         number of outliers      1085
#    number of final samples     18128
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 21           34245 |*                                   34375.76190
#                 37           34447 |*                                   34553.64865
#                 85           34649 |*                                   34758.78824
#                391           34851 |***                                 35004.45269
#               2577           35053 |*********************               35169.78580
#               2640           35255 |*********************               35369.01932
#               3924           35457 |********************************    35545.93858
#               1593           35659 |************                        35756.99874
#               1364           35861 |***********                         35948.90249
#                566           36063 |****                                36150.86219
#                221           36265 |*                                   36355.25792
#                221           36467 |*                                   36565.09955
#                131           36669 |*                                   36758.81679
#                 82           36871 |*                                   36975.39024
#                 45           37073 |*                                   37182.68889
#                 48           37275 |*                                   37372.83333
#                 44           37477 |*                                   37578.20455
#                 44           37679 |*                                   37806.13636
#                 35           37881 |*                                   38002.28571
#                 79           38083 |*                                   38207.94937
#                106           38285 |*                                   38391.25472
#                188           38487 |*                                   38603.16489
#                237           38689 |*                                   38795.86076
#                277           38891 |**                                  38991.57762
#                289           39093 |**                                  39191.73702
#                305           39295 |**                                  39392.44918
#                310           39497 |**                                  39595.94839
#                358           39699 |**                                  39796.47207
#                304           39901 |**                                  39999.26645
#                272           40103 |**                                  40202.09191
#                226           40305 |*                                   40401.49115
#                201           40507 |*                                   40588.69154
#
#                907           > 95% |*******                             41322.07387
#
#        mean of 95%     36307.50200
#          95th %ile           40687
#
# Usage: getpeername
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getpeername')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures getpeername()
       prc thr      nsecs/call      samples   errors cnt/samp   method
getpid   1   1            1606        14847        0      538     libc
# bin/../bin-riscv64/getpid -N getpid -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1550                       1550
#                        max     95536                       1860
#                       mean      1735.05147                 1635.37994
#                     median      1612                       1606*
#                     stddev       845.27397                   74.71687
#             standard error         6.44272                    0.61320
#       99% confidence level        16.59644                    1.57959
#                       skew        81.60616                    1.63419
#                   kurtosis      8842.68228                    1.39399
#           time correlation         0.04164                    0.01446
#
#               elapsed time        20.00495
#                   run time        15.85428
#          getnsecs overhead      1429
#
#          number of samples     17213
#         number of outliers      2366
#    number of final samples     14847
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 35            1550 |*                                    1555.74286
#                242            1559 |***                                  1563.90083
#                829            1568 |************                         1572.64174
#               1603            1577 |***********************              1581.30568
#               2182            1586 |********************************     1590.11182
#               2069            1595 |******************************       1598.92267
#               1668            1604 |************************             1607.74760
#               1270            1613 |******************                   1616.75591
#                870            1622 |************                         1625.92644
#                521            1631 |*******                              1634.75240
#                350            1640 |*****                                1643.34857
#                217            1649 |***                                  1652.49770
#                145            1658 |**                                   1661.87586
#                122            1667 |*                                    1670.86885
#                 84            1676 |*                                    1679.51190
#                 92            1685 |*                                    1688.71739
#                 79            1694 |*                                    1698.13924
#                 72            1703 |*                                    1706.63889
#                 67            1712 |*                                    1716.26866
#                 58            1721 |*                                    1725.08621
#                 66            1730 |*                                    1734.43939
#                104            1739 |*                                    1742.88462
#                146            1748 |**                                   1752.41781
#                192            1757 |**                                   1760.88542
#                201            1766 |**                                   1770.04975
#                190            1775 |**                                   1779.07895
#                166            1784 |**                                   1787.93373
#                138            1793 |**                                   1796.95652
#                153            1802 |**                                   1805.90196
#                173            1811 |**                                   1814.24277
#
#                743           > 95% |**********                           1836.38493
#
#        mean of 95%      1624.79098
#          95th %ile            1818
#
# WARNINGS
#     Actual benchmark run time only accounts for 79.3% of elapsed time.
#
# Usage: getpid
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getpid')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s] (skip libc making system call directly)
# note: measures getpid()
         prc thr      nsecs/call      samples   errors cnt/samp   method
getpid_s   1   1            1606        18278        0      550  syscall
# bin/../bin-riscv64/getpid -N getpid_s -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1541                       1541
#                        max    109586                       2045
#                       mean      1726.42096                 1668.50421
#                     median      1610                       1606*
#                     stddev       875.57035                  125.50233
#             standard error         6.28105                    0.92830
#       99% confidence level        16.17999                    2.39130
#                       skew        98.70707                    1.43316
#                   kurtosis     11902.13053                    0.61895
#           time correlation         0.03381                    0.01980
#
#               elapsed time        20.00499
#                   run time        18.25059
#          getnsecs overhead      1429
#
#          number of samples     19432
#         number of outliers      1154
#    number of final samples     18278
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10            1541 |*                                    1549.40000
#                175            1554 |*                                    1562.86286
#               1610            1567 |*************                        1574.51988
#               3949            1580 |********************************     1586.35857
#               3262            1593 |**************************           1598.54445
#               2002            1606 |****************                     1611.61189
#               1355            1619 |**********                           1624.31070
#                619            1632 |*****                                1637.15509
#                326            1645 |**                                   1650.44479
#                209            1658 |*                                    1663.70813
#                156            1671 |*                                    1676.18590
#                136            1684 |*                                    1689.50735
#                 97            1697 |*                                    1702.64948
#                 80            1710 |*                                    1716.20000
#                 75            1723 |*                                    1729.24000
#                 73            1736 |*                                    1741.76712
#                 88            1749 |*                                    1755.25000
#                 67            1762 |*                                    1767.62687
#                 82            1775 |*                                    1780.69512
#                175            1788 |*                                    1795.06286
#                311            1801 |**                                   1807.63666
#                349            1814 |**                                   1820.04011
#                277            1827 |**                                   1832.48375
#                245            1840 |*                                    1846.15918
#                221            1853 |*                                    1859.08597
#                216            1866 |*                                    1872.25000
#                212            1879 |*                                    1885.27358
#                248            1892 |**                                   1897.95968
#                235            1905 |*                                    1911.18723
#                218            1918 |*                                    1924.23853
#                200            1931 |*                                    1936.66500
#                 86            1944 |*                                    1945.90698
#
#                914           > 95% |*******                              1988.63676
#
#        mean of 95%      1651.65319
#          95th %ile            1948
#
# Usage: getpid
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getpid')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s] (skip libc making system call directly)
# note: measures getpid()
          prc thr      nsecs/call      samples   errors cnt/samp 
getrusage   1   1           27974        15572        0       39 
# bin/../bin-riscv64/getrusage -N getrusage -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     25832                      25832
#                        max    203787                      33447
#                       mean     29311.03459                28820.72354
#                     median     27992                      27974*
#                     stddev      4260.27450                 1542.29523
#             standard error        33.48428                   12.35934
#       99% confidence level        86.25551                   31.83766
#                       skew        13.27263                    1.14322
#                   kurtosis       300.95565                   -0.14220
#           time correlation         0.44199                    0.29652
#
#               elapsed time        20.00413
#                   run time        18.54977
#          getnsecs overhead      1429
#
#          number of samples     16188
#         number of outliers       616
#    number of final samples     15572
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1           25832 |*                                   25832.00000
#                  0           26022 |                                              -
#                  0           26212 |                                              -
#                  0           26402 |                                              -
#                  0           26592 |                                              -
#                  1           26782 |*                                   26957.00000
#                 12           26972 |*                                   27100.41667
#                 62           27162 |*                                   27276.41935
#                269           27352 |**                                  27484.49071
#               2646           27542 |********************                27674.63530
#               4152           27732 |********************************    27801.86464
#               2512           27922 |*******************                 28012.63217
#                712           28112 |*****                               28183.56461
#                194           28302 |*                                   28382.35567
#                162           28492 |*                                   28584.57407
#                134           28682 |*                                   28773.02239
#                 92           28872 |*                                   28968.76087
#                 83           29062 |*                                   29154.71084
#                 46           29252 |*                                   29345.73913
#                 42           29442 |*                                   29520.50000
#                 74           29632 |*                                   29735.16216
#                100           29822 |*                                   29929.20000
#                201           30012 |*                                   30108.18905
#                339           30202 |**                                  30304.10619
#                482           30392 |***                                 30492.01452
#                559           30582 |****                                30676.42218
#                509           30772 |***                                 30866.85855
#                398           30962 |***                                 31051.73618
#                354           31152 |**                                  31240.67232
#                263           31342 |**                                  31433.28897
#                212           31532 |*                                   31619.59434
#                182           31722 |*                                   31805.65385
#
#                779           > 95% |******                              32503.73042
#
#        mean of 95%     28626.77625
#          95th %ile           31902
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: getrusage
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getrusage')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures getrusage(RUSAGE_SELF)
            prc thr      nsecs/call      samples   errors cnt/samp 
getsockname   1   1           35603        18357        0       25 
# bin/../bin-riscv64/getsockname -N getsockname -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     34299                      34299
#                        max    308936                      43199
#                       mean     37397.19986                36686.47807
#                     median     35626                      35603*
#                     stddev      5756.78900                 2172.30157
#             standard error        41.56445                   16.03317
#       99% confidence level       107.07003                   41.30143
#                       skew        13.57072                    1.42542
#                   kurtosis       366.58231                    0.48522
#           time correlation         0.51065                    0.33516
#
#               elapsed time        20.00361
#                   run time        18.08235
#          getnsecs overhead      1429
#
#          number of samples     19183
#         number of outliers       826
#    number of final samples     18357
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14           34299 |*                                   34422.78571
#                 53           34521 |*                                   34644.64151
#                319           34743 |**                                  34876.50470
#               1683           34965 |**********                          35109.70113
#               2543           35187 |***************                     35298.59536
#               5099           35409 |********************************    35517.57756
#               1949           35631 |************                        35736.70139
#               1574           35853 |*********                           35945.38564
#                377           36075 |**                                  36170.14324
#                193           36297 |*                                   36396.04663
#                106           36519 |*                                   36624.87736
#                 84           36741 |*                                   36846.05952
#                 53           36963 |*                                   37060.73585
#                 41           37185 |*                                   37303.19512
#                 31           37407 |*                                   37517.22581
#                 41           37629 |*                                   37736.07317
#                 32           37851 |*                                   37979.93750
#                 32           38073 |*                                   38171.62500
#                 63           38295 |*                                   38407.85714
#                 99           38517 |*                                   38631.18182
#                120           38739 |*                                   38842.38333
#                150           38961 |*                                   39082.62000
#                185           39183 |*                                   39307.60541
#                248           39405 |*                                   39524.32661
#                293           39627 |*                                   39747.93857
#                307           39849 |*                                   39953.71336
#                361           40071 |**                                  40185.34903
#                374           40293 |**                                  40405.62567
#                326           40515 |**                                  40625.27914
#                282           40737 |*                                   40841.80142
#                230           40959 |*                                   41070.51739
#                177           41181 |*                                   41268.75141
#
#                918           > 95% |*****                               42113.58170
#
#        mean of 95%     36400.79190
#          95th %ile           41379
#
# Usage: getsockname
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'getsockname')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures getsockname()()
             prc thr      nsecs/call      samples   errors cnt/samp 
gettimeofday   1   1            1475        17935        0      647 
# bin/../bin-riscv64/gettimeofday -N gettimeofday -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1405                       1405
#                        max     36307                       1648
#                       mean      1514.84479                 1496.54586
#                     median      1477                       1475*
#                     stddev       291.59531                   50.47143
#             standard error         2.12736                    0.37687
#       99% confidence level         5.48007                    0.97082
#                       skew        94.35187                    1.16653
#                   kurtosis     10924.34157                    0.29950
#           time correlation         0.01316                    0.00857
#
#               elapsed time        20.00464
#                   run time        18.37832
#          getnsecs overhead      1429
#
#          number of samples     18788
#         number of outliers       853
#    number of final samples     17935
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 86            1405 |*                                    1408.62791
#                147            1412 |*                                    1415.72789
#                185            1419 |*                                    1421.71351
#                130            1426 |*                                    1428.93846
#                203            1433 |*                                    1436.13300
#                231            1440 |**                                   1443.17749
#                324            1447 |**                                   1450.45679
#                642            1454 |*****                                1457.40810
#               3338            1461 |******************************       1464.95806
#               3512            1468 |********************************     1470.52449
#               1592            1475 |**************                       1478.11809
#               1716            1482 |***************                      1484.85198
#                944            1489 |********                             1491.56568
#                431            1496 |***                                  1498.54756
#                193            1503 |*                                    1505.72539
#                 99            1510 |*                                    1512.67677
#                 67            1517 |*                                    1519.91045
#                 54            1524 |*                                    1526.59259
#                 46            1531 |*                                    1534.08696
#                 61            1538 |*                                    1540.96721
#                 92            1545 |*                                    1547.96739
#                180            1552 |*                                    1555.44444
#                478            1559 |****                                 1562.65690
#                748            1566 |******                               1568.94920
#                520            1573 |****                                 1575.65192
#                491            1580 |****                                 1583.06314
#                348            1587 |***                                  1589.76149
#                180            1594 |*                                    1595.95556
#
#                897           > 95% |********                             1620.02676
#
#        mean of 95%      1490.04496
#          95th %ile            1599
#
# Usage: gettimeofday
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'gettimeofday')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# note: measures gettimeofday()
          prc thr      nsecs/call      samples   errors cnt/samp 
isatty_no   1   1            1914        14257        0      435 
# bin/../bin-riscv64/isatty -N isatty_no -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /tmp/libmicro.2370/ifile 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1832                       1847
#                        max    407286                       1992
#                       mean      2095.59121                 1916.46258
#                     median      1929                       1914*
#                     stddev      3047.55899                   25.03568
#             standard error        21.32986                    0.20967
#       99% confidence level        54.94573                    0.54012
#                       skew       120.17365                    0.49053
#                   kurtosis     15537.30417                   -0.08854
#           time correlation         0.04749                    0.00592
#
#               elapsed time        20.00477
#                   run time        18.12231
#          getnsecs overhead      1429
#
#          number of samples     20414
#         number of outliers      6157
#    number of final samples     14257
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2            1847 |*                                    1848.00000
#                  8            1851 |*                                    1852.87500
#                 12            1855 |*                                    1856.41667
#                 21            1859 |*                                    1860.76190
#                 44            1863 |*                                    1864.65909
#                 86            1867 |**                                   1868.73256
#                145            1871 |****                                 1872.75172
#                227            1875 |*******                              1876.62555
#                384            1879 |************                         1880.55990
#                509            1883 |****************                     1884.53438
#                611            1887 |*******************                  1888.60065
#                748            1891 |************************             1892.57620
#                842            1895 |***************************          1896.57720
#                883            1899 |****************************         1900.52775
#                985            1903 |********************************     1904.48731
#                940            1907 |******************************       1908.49043
#                898            1911 |*****************************        1912.52784
#                894            1915 |*****************************        1916.46197
#                798            1919 |*************************            1920.47368
#                711            1923 |***********************              1924.47257
#                666            1927 |*********************                1928.37538
#                634            1931 |********************                 1932.52839
#                520            1935 |****************                     1936.50769
#                452            1939 |**************                       1940.46681
#                394            1943 |************                         1944.42640
#                320            1947 |**********                           1948.40625
#                304            1951 |*********                            1952.54276
#                279            1955 |*********                            1956.46953
#                199            1959 |******                               1960.51759
#                 28            1963 |*                                    1963.00000
#
#                713           > 95% |***********************              1974.15989
#
#        mean of 95%      1913.42521
#          95th %ile            1963
#
# Usage: isatty
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'isatty')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-isatty (default /dev/tty)]
#     [-b] (try to isatty an unopened fd)
# notes: measures isatty()
                prc thr      nsecs/call      samples   errors cnt/samp 
isatty_no_badfd   1   1            3977         6598        0      211 
# bin/../bin-riscv64/isatty -N isatty_no_badfd -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -b 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      3783                       3783
#                        max    195386                       4857
#                       mean      4300.54777                 4093.98939
#                     median      3983                       3977*
#                     stddev      2723.40567                  254.30273
#             standard error        32.54395                    3.13072
#       99% confidence level        83.83322                    8.06475
#                       skew        53.45031                    1.41774
#                   kurtosis      3557.84695                    0.53138
#           time correlation         0.26650                    0.11174
#
#               elapsed time        20.00632
#                   run time         6.21365
#          getnsecs overhead      1429
#
#          number of samples      7003
#         number of outliers       405
#    number of final samples      6598
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3            3783 |*                                    3794.00000
#                  5            3810 |*                                    3823.00000
#                 37            3837 |*                                    3856.72973
#                237            3864 |*******                              3881.07173
#                755            3891 |**********************               3906.55232
#               1067            3918 |********************************     3931.44799
#               1027            3945 |******************************       3957.45278
#                793            3972 |***********************              3984.27995
#                508            3999 |***************                      4010.87795
#                309            4026 |*********                            4038.61165
#                164            4053 |****                                 4065.21341
#                 71            4080 |**                                   4092.43662
#                 64            4107 |*                                    4118.67188
#                 39            4134 |*                                    4145.82051
#                 36            4161 |*                                    4175.50000
#                 32            4188 |*                                    4199.31250
#                 25            4215 |*                                    4227.36000
#                 21            4242 |*                                    4252.85714
#                 25            4269 |*                                    4281.76000
#                 12            4296 |*                                    4312.58333
#                 25            4323 |*                                    4340.48000
#                 28            4350 |*                                    4364.21429
#                 30            4377 |*                                    4392.10000
#                 54            4404 |*                                    4417.79630
#                 86            4431 |**                                   4444.82558
#                123            4458 |***                                  4471.40650
#                166            4485 |****                                 4497.86145
#                147            4512 |****                                 4525.65986
#                126            4539 |***                                  4550.80952
#                 90            4566 |**                                   4578.88889
#                 75            4593 |**                                   4607.30667
#                 88            4620 |**                                   4630.25000
#
#                330           > 95% |*********                            4729.72424
#
#        mean of 95%      4060.51899
#          95th %ile            4642
#
# WARNINGS
#     Actual benchmark run time only accounts for 31.1% of elapsed time.
#
# Usage: isatty
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'isatty')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-isatty (default /dev/tty)]
#     [-b] (try to isatty an unopened fd)
# notes: measures isatty()
           prc thr      nsecs/call      samples   errors cnt/samp 
isatty_yes   1   1           23137        18757        0       37 
# bin/../bin-riscv64/isatty -N isatty_yes -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     21987                      21987
#                        max   1044036                      28499
#                       mean     24624.59073                23880.53463
#                     median     23275                      23137*
#                     stddev     10871.24455                 1539.87408
#             standard error        77.61611                   11.24355
#       99% confidence level       199.93911                   28.96339
#                       skew        69.74352                    1.30281
#                   kurtosis      6069.92264                    0.43207
#           time correlation         0.44135                    0.24960
#
#               elapsed time        20.00398
#                   run time        18.01352
#          getnsecs overhead      1429
#
#          number of samples     19618
#         number of outliers       861
#    number of final samples     18757
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1           21987 |*                                   21987.00000
#                 20           22151 |*                                   22256.30000
#                201           22315 |*                                   22434.41294
#               1215           22479 |*********                           22589.11276
#               4225           22643 |********************************    22720.14083
#               2324           22807 |*****************                   22884.56928
#               1384           22971 |**********                          23040.40679
#                497           23135 |***                                 23207.20121
#                518           23299 |***                                 23385.93243
#                825           23463 |******                              23549.59758
#               1303           23627 |*********                           23714.75211
#               1032           23791 |*******                             23862.95349
#                568           23955 |****                                24030.53697
#                260           24119 |*                                   24185.75769
#                 96           24283 |*                                   24358.10417
#                 63           24447 |*                                   24530.76190
#                 57           24611 |*                                   24693.59649
#                 54           24775 |*                                   24844.74074
#                 59           24939 |*                                   25032.35593
#                 44           25103 |*                                   25192.75000
#                118           25267 |*                                   25361.24576
#                193           25431 |*                                   25517.45596
#                309           25595 |**                                  25682.94175
#                357           25759 |**                                  25841.63025
#                341           25923 |**                                  26005.33138
#                326           26087 |**                                  26170.47853
#                264           26251 |*                                   26332.17045
#                275           26415 |**                                  26496.49091
#                258           26579 |*                                   26661.50000
#                216           26743 |*                                   26821.05093
#                227           26907 |*                                   26988.53744
#                189           27071 |*                                   27153.96296
#
#                938           > 95% |*******                             27755.23454
#
#        mean of 95%     23676.56872
#          95th %ile           27222
#
# Usage: isatty
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'isatty')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-isatty (default /dev/tty)]
#     [-b] (try to isatty an unopened fd)
# notes: measures isatty()
       prc thr      nsecs/call      samples   errors cnt/samp 
listen   1   1            3095        18290        0      286 
# bin/../bin-riscv64/listen -N listen -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2971                       2971
#                        max    125686                       3871
#                       mean      3301.08453                 3204.68032
#                     median      3100                       3095*
#                     stddev      1093.04133                  222.01891
#             standard error         7.86157                    1.64166
#       99% confidence level        20.25141                    4.22892
#                       skew        75.83245                    1.35343
#                   kurtosis      8192.50248                    0.38525
#           time correlation         0.05920                    0.03558
#
#               elapsed time        20.00416
#                   run time        18.09120
#          getnsecs overhead      1429
#
#          number of samples     19331
#         number of outliers      1041
#    number of final samples     18290
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4            2971 |*                                    2983.50000
#                164            2994 |*                                    3010.65854
#               1482            3017 |*************                        3031.53441
#               3399            3040 |********************************     3051.32892
#               2991            3063 |****************************         3073.52324
#               2431            3086 |**********************               3096.45866
#               1444            3109 |*************                        3118.79917
#                751            3132 |*******                              3141.94674
#                416            3155 |***                                  3164.93750
#                238            3178 |**                                   3188.13025
#                163            3201 |*                                    3211.32515
#                138            3224 |*                                    3234.61594
#                100            3247 |*                                    3258.10000
#                 87            3270 |*                                    3281.81609
#                 79            3293 |*                                    3303.51899
#                 65            3316 |*                                    3326.89231
#                 88            3339 |*                                    3350.84091
#                106            3362 |*                                    3373.09434
#                121            3385 |*                                    3396.28099
#                120            3408 |*                                    3419.52500
#                195            3431 |*                                    3442.42051
#                352            3454 |***                                  3465.38352
#                340            3477 |***                                  3487.02941
#                299            3500 |**                                   3511.35786
#                282            3523 |**                                   3533.59220
#                248            3546 |**                                   3557.60484
#                284            3569 |**                                   3579.48944
#                248            3592 |**                                   3602.70565
#                253            3615 |**                                   3626.62055
#                270            3638 |**                                   3648.18889
#                211            3661 |*                                    3671.80569
#                  6            3684 |*                                    3684.00000
#
#                915           > 95% |********                             3757.28197
#
#        mean of 95%      3175.57928
#          95th %ile            3684
#
# Usage: listen
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'listen')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures listen()()
            prc thr      nsecs/call      samples   errors cnt/samp 
localtime_r   1   1             813        17744        0      885 
# bin/../bin-riscv64/localtime_r -N localtime_r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       793                        793
#                        max   1573137                        841
#                       mean       934.31701                  814.98304
#                     median       816                        813*
#                     stddev     10371.43116                    8.58276
#             standard error        67.94696                    0.06443
#       99% confidence level       175.03138                    0.16598
#                       skew       149.74802                    0.76729
#                   kurtosis     22666.30437                    0.10125
#           time correlation         0.03036                    0.00160
#
#               elapsed time        20.00479
#                   run time        17.36985
#          getnsecs overhead      1429
#
#          number of samples     23299
#         number of outliers      5555
#    number of final samples     17744
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2             793 |*                                     793.00000
#                 10             795 |*                                     795.60000
#                 42             797 |*                                     797.61905
#                145             799 |**                                    799.67586
#                343             801 |*****                                 801.60058
#                629             803 |**********                            803.58029
#               1259             805 |********************                  805.56632
#               1729             807 |***************************           807.52805
#               1916             809 |******************************        809.49582
#               1995             811 |********************************      811.49674
#               1981             813 |*******************************       813.51085
#               1633             815 |**************************            815.46111
#               1201             817 |*******************                   817.45712
#                849             819 |*************                         819.46054
#                608             821 |*********                             821.48520
#                572             823 |*********                             823.54720
#                543             825 |********                              825.49355
#                561             827 |********                              827.52228
#                532             829 |********                              829.49060
#                306             831 |****                                  831.27778
#
#                888           > 95% |**************                        835.51014
#
#        mean of 95%       813.90164
#          95th %ile             832
#
# Usage: localtime_r
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'localtime_r')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures localtime_r()
    prc thr      nsecs/call      samples   errors cnt/samp     func
log   1   1             139        18165        0     6586      log
# bin/../bin-riscv64/log -N log -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       133                        133
#                        max     36677                        156
#                       mean       145.41131                  140.66034
#                     median       139                        139*
#                     stddev       264.19124                    5.09323
#             standard error         1.90268                    0.03779
#       99% confidence level         4.90129                    0.09735
#                       skew       137.15941                    1.11152
#                   kurtosis     18960.47830                    0.38265
#           time correlation         0.00220                    0.00089
#
#               elapsed time        20.00498
#                   run time        18.25077
#          getnsecs overhead      1429
#
#          number of samples     19280
#         number of outliers      1115
#    number of final samples     18165
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 30             133 |*                                             -
#                470             134 |******                                        -
#               1267             135 |****************                              -
#               1484             136 |*******************                           -
#               2134             137 |****************************                  -
#               2129             138 |***************************                   -
#               2438             139 |********************************              -
#               1865             140 |************************                      -
#               1219             141 |****************                              -
#                716             142 |*********                                     -
#                312             143 |****                                          -
#                224             144 |**                                            -
#                318             145 |****                                          -
#                414             146 |*****                                         -
#                492             147 |******                                        -
#                472             148 |******                                        -
#                508             149 |******                                        -
#                479             150 |******                                        -
#                285             151 |***                                           -
#
#                909           > 95% |***********                           153.33333
#
#        mean of 95%       139.99276
#          95th %ile             151
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
      prc thr      nsecs/call      samples   errors cnt/samp     func
log10   1   1             319        19194        0     2664    log10
# bin/../bin-riscv64/log -N log10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       308                        308
#                        max    112527                        353
#                       mean       339.61861                  322.66943
#                     median       319                        319*
#                     stddev       799.31025                    9.95544
#             standard error         5.56326                    0.07186
#       99% confidence level        14.33095                    0.18511
#                       skew       134.91481                    1.32900
#                   kurtosis     18822.41001                    0.54268
#           time correlation         0.00611                    0.00158
#
#               elapsed time        20.00443
#                   run time        18.03519
#          getnsecs overhead      1429
#
#          number of samples     20643
#         number of outliers      1449
#    number of final samples     19194
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11             308 |*                                     308.81818
#                 68             310 |*                                     310.79412
#                717             312 |******                                312.74059
#               3458             314 |********************************      314.62955
#               3365             316 |*******************************       316.39138
#               2974             318 |***************************           318.57498
#               2357             320 |*********************                 320.37717
#                973             322 |*********                             322.41727
#                770             324 |*******                               324.43896
#                327             326 |***                                   326.42202
#                268             328 |**                                    328.30597
#                101             330 |*                                     330.46535
#                165             332 |*                                     332.55758
#                304             334 |**                                    334.63487
#                506             336 |****                                  336.57312
#                583             338 |*****                                 338.48714
#                632             340 |*****                                 340.51266
#                541             342 |*****                                 342.43623
#                114             344 |*                                     344.00000
#
#                960           > 95% |********                              347.68542
#
#        mean of 95%       321.35236
#          95th %ile             344
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
       prc thr      nsecs/call      samples   errors cnt/samp     func
log10f   1   1             349        18614        0     2464   log10f
# bin/../bin-riscv64/log -N log10f -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log10f 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       339                        339
#                        max     82117                        388
#                       mean       372.72329                  353.90609
#                     median       350                        349*
#                     stddev       604.14420                   11.20230
#             standard error         4.23922                    0.08211
#       99% confidence level        10.92022                    0.21151
#                       skew       124.99393                    1.40296
#                   kurtosis     16617.05406                    0.71904
#           time correlation         0.00681                    0.00181
#
#               elapsed time        20.00352
#                   run time        18.15800
#          getnsecs overhead      1429
#
#          number of samples     20310
#         number of outliers      1696
#    number of final samples     18614
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8             339 |*                                     339.62500
#                141             341 |*                                     341.81560
#               1219             343 |**********                            343.72929
#               3576             345 |********************************      345.55369
#               3215             347 |****************************          347.49767
#               2470             349 |**********************                349.44899
#               1782             351 |***************                       351.46128
#               1174             353 |**********                            353.44889
#                743             355 |******                                355.39031
#                335             357 |**                                    357.40299
#                221             359 |*                                     359.42081
#                123             361 |*                                     361.43089
#                 89             363 |*                                     363.49438
#                 89             365 |*                                     365.60674
#                196             367 |*                                     367.65816
#                428             369 |***                                   369.57477
#                498             371 |****                                  371.52008
#                504             373 |****                                  373.52976
#                511             375 |****                                  375.47162
#                361             377 |***                                   377.43767
#
#                931           > 95% |********                              382.59184
#
#        mean of 95%       352.39580
#          95th %ile             378
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
       prc thr      nsecs/call      samples   errors cnt/samp     func
log10l   1   1           10408        17046        0       94   log10l
# bin/../bin-riscv64/log -N log10l -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log10l 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     10026                      10026
#                        max    580577                      12231
#                       mean     10912.20383                10665.36941
#                     median     10436                      10408*
#                     stddev      4610.20373                  521.92648
#             standard error        34.49878                    3.99759
#       99% confidence level        88.86885                   10.29779
#                       skew       106.32455                    1.04154
#                   kurtosis     13056.61770                    0.13677
#           time correlation         0.16653                    0.09801
#
#               elapsed time        20.00521
#                   run time        18.37716
#          getnsecs overhead      1429
#
#          number of samples     17858
#         number of outliers       812
#    number of final samples     17046
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 12           10026 |*                                   10057.58333
#                248           10082 |**                                  10120.51210
#               1539           10138 |*****************                   10173.80832
#               2776           10194 |********************************    10221.06160
#               1850           10250 |*********************               10274.28649
#               1215           10306 |**************                      10334.12099
#               1029           10362 |***********                         10388.39747
#                657           10418 |*******                             10442.96043
#                368           10474 |****                                10498.17935
#                230           10530 |**                                  10554.90435
#                170           10586 |*                                   10613.70000
#                129           10642 |*                                   10671.36434
#                174           10698 |**                                  10727.30460
#                329           10754 |***                                 10784.06991
#                480           10810 |*****                               10840.98750
#                662           10866 |*******                             10894.37009
#                676           10922 |*******                             10947.58580
#                555           10978 |******                              11004.50631
#                525           11034 |******                              11060.85524
#                435           11090 |*****                               11117.05287
#                351           11146 |****                                11171.86325
#                278           11202 |***                                 11229.39928
#                242           11258 |**                                  11284.49174
#                172           11314 |*                                   11341.32558
#                140           11370 |*                                   11396.45000
#                162           11426 |*                                   11454.29012
#                143           11482 |*                                   11511.49650
#                153           11538 |*                                   11565.67320
#                134           11594 |*                                   11622.21642
#                158           11650 |*                                   11677.96203
#                135           11706 |*                                   11732.55556
#                 66           11762 |*                                   11775.03030
#
#                853           > 95% |*********                           11978.90739
#
#        mean of 95%     10596.17606
#          95th %ile           11787
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
     prc thr      nsecs/call      samples   errors cnt/samp     func
log2   1   1             228         7227        0     3089     log2
# bin/../bin-riscv64/log -N log2 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log2 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       218                        218
#                        max    122877                        255
#                       mean       263.57908                  230.89622
#                     median       228                        228*
#                     stddev      1410.87182                    7.91340
#             standard error        15.97293                    0.09309
#       99% confidence level        41.14627                    0.23979
#                       skew        84.55123                    1.41309
#                   kurtosis      7315.28562                    0.97304
#           time correlation         0.02744                    0.00332
#
#               elapsed time        20.00554
#                   run time         5.68966
#          getnsecs overhead      1429
#
#          number of samples      7802
#         number of outliers       575
#    number of final samples      7227
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2             218 |*                                             -
#                  2             219 |*                                             -
#                  9             220 |*                                             -
#                 76             221 |**                                            -
#                150             222 |****                                          -
#                224             223 |*******                                       -
#                349             224 |***********                                   -
#                643             225 |********************                          -
#                909             226 |****************************                  -
#               1006             227 |********************************              -
#                685             228 |*********************                         -
#                463             229 |**************                                -
#                336             230 |**********                                    -
#                355             231 |***********                                   -
#                245             232 |*******                                       -
#                176             233 |*****                                         -
#                 86             234 |**                                            -
#                 80             235 |**                                            -
#                 90             236 |**                                            -
#                 75             237 |**                                            -
#                 52             238 |*                                             -
#                 43             239 |*                                             -
#                 42             240 |*                                             -
#                 36             241 |*                                             -
#                 66             242 |**                                            -
#                 83             243 |**                                            -
#                110             244 |***                                           -
#                113             245 |***                                           -
#                117             246 |***                                           -
#                126             247 |****                                          -
#                 99             248 |***                                           -
#                 17             249 |*                                             -
#
#                362           > 95% |***********                           251.64365
#
#        mean of 95%       229.80218
#          95th %ile             249
#
# WARNINGS
#     Actual benchmark run time only accounts for 28.4% of elapsed time.
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
      prc thr      nsecs/call      samples   errors cnt/samp     func
log2f   1   1             141        20305        0     5757    log2f
# bin/../bin-riscv64/log -N log2f -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log2f 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       133                        133
#                        max    103657                        159
#                       mean       152.73941                  142.41586
#                     median       141                        141*
#                     stddev       718.86938                    5.40891
#             standard error         4.90996                    0.03796
#       99% confidence level        12.64806                    0.09778
#                       skew       139.98704                    1.17808
#                   kurtosis     20064.93443                    0.62011
#           time correlation         0.00358                    0.00084
#
#               elapsed time        20.00494
#                   run time        17.83351
#          getnsecs overhead      1429
#
#          number of samples     21436
#         number of outliers      1131
#    number of final samples     20305
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             133 |*                                             -
#                 41             134 |*                                             -
#                270             135 |***                                           -
#                969             136 |************                                  -
#               1281             137 |*****************                             -
#               2302             138 |******************************                -
#               2229             139 |*****************************                 -
#               1770             140 |***********************                       -
#               2393             141 |********************************              -
#               2279             142 |******************************                -
#               1295             143 |*****************                             -
#                934             144 |************                                  -
#                462             145 |******                                        -
#                203             146 |**                                            -
#                183             147 |**                                            -
#                280             148 |***                                           -
#                394             149 |*****                                         -
#                394             150 |*****                                         -
#                485             151 |******                                        -
#                491             152 |******                                        -
#                445             153 |*****                                         -
#                188             154 |**                                            -
#
#               1016           > 95% |*************                         156.19882
#
#        mean of 95%       141.68988
#          95th %ile             154
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
      prc thr      nsecs/call      samples   errors cnt/samp     func
log2l   1   1            9582        18089        0       97    log2l
# bin/../bin-riscv64/log -N log2l -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f log2l 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      9273                       9273
#                        max    549297                      10682
#                       mean      9929.05171                 9718.66001
#                     median      9600                       9582*
#                     stddev      4188.41576                  321.13293
#             standard error        30.31663                    2.38769
#       99% confidence level        78.09564                    6.15068
#                       skew       112.49709                    1.24440
#                   kurtosis     14409.15457                    0.25220
#           time correlation         0.11111                    0.05440
#
#               elapsed time        20.00450
#                   run time        18.37338
#          getnsecs overhead      1429
#
#          number of samples     19087
#         number of outliers       998
#    number of final samples     18089
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10            9273 |*                                    9288.70000
#                 31            9308 |*                                    9329.58065
#                 94            9343 |*                                    9363.78723
#                356            9378 |***                                  9398.26685
#                952            9413 |**********                           9432.48319
#               2037            9448 |**********************               9467.62494
#               2930            9483 |********************************     9499.20751
#               1793            9518 |*******************                  9532.83603
#               1018            9553 |***********                          9569.27603
#               1003            9588 |**********                           9605.71785
#               1171            9623 |************                         9639.77882
#               1008            9658 |***********                          9673.94742
#                562            9693 |******                               9708.58363
#                348            9728 |***                                  9743.57759
#                234            9763 |**                                   9778.18376
#                185            9798 |**                                   9814.63243
#                148            9833 |*                                    9848.68243
#                108            9868 |*                                    9882.75926
#                 66            9903 |*                                    9919.40909
#                 47            9938 |*                                    9955.23404
#                 42            9973 |*                                    9990.30952
#                 57           10008 |*                                   10025.75439
#                 92           10043 |*                                   10062.56522
#                235           10078 |**                                  10097.62979
#                400           10113 |****                                10130.59250
#                416           10148 |****                                10164.48077
#                388           10183 |****                                10199.52320
#                377           10218 |****                                10234.87533
#                374           10253 |****                                10269.88235
#                332           10288 |***                                 10304.81325
#                244           10323 |**                                  10339.45492
#                126           10358 |*                                   10369.60317
#
#                905           > 95% |*********                           10508.97790
#
#        mean of 95%      9677.03771
#          95th %ile           10381
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
     prc thr      nsecs/call      samples   errors cnt/samp     func
logf   1   1             126        20052        0     6641     logf
# bin/../bin-riscv64/log -N logf -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f logf 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       117                        117
#                        max     64837                        143
#                       mean       134.25388                  127.09994
#                     median       126                        126*
#                     stddev       450.57068                    5.31343
#             standard error         3.10761                    0.03752
#       99% confidence level         8.00519                    0.09666
#                       skew       141.10849                    0.94286
#                   kurtosis     20230.28766                    0.10294
#           time correlation         0.00277                    0.00087
#
#               elapsed time        20.00398
#                   run time        17.96961
#          getnsecs overhead      1429
#
#          number of samples     21022
#         number of outliers       970
#    number of final samples     20052
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1             117 |*                                             -
#                 14             118 |*                                             -
#                117             119 |*                                             -
#                370             120 |****                                          -
#               1187             121 |**************                                -
#               2017             122 |*************************                     -
#               2571             123 |********************************              -
#               2173             124 |***************************                   -
#               1391             125 |*****************                             -
#               1294             126 |****************                              -
#               1461             127 |******************                            -
#               1210             128 |***************                               -
#                813             129 |**********                                    -
#                660             130 |********                                      -
#                581             131 |*******                                       -
#                716             132 |********                                      -
#                612             133 |*******                                       -
#                509             134 |******                                        -
#                362             135 |****                                          -
#                347             136 |****                                          -
#                404             137 |*****                                         -
#                239             138 |**                                            -
#
#               1003           > 95% |************                          140.06979
#
#        mean of 95%       126.41703
#          95th %ile             138
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
     prc thr      nsecs/call      samples   errors cnt/samp     func
logl   1   1            9592        17934        0       98     logl
# bin/../bin-riscv64/log -N logl -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f logl 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      8814                       8814
#                        max    399727                      10722
#                       mean      9937.31201                 9744.31114
#                     median      9604                       9592*
#                     stddev      3169.54159                  326.15638
#             standard error        23.05685                    2.43550
#       99% confidence level        59.39445                    6.27384
#                       skew        99.76908                    1.19827
#                   kurtosis     12117.05735                    0.23785
#           time correlation         0.10697                    0.05497
#
#               elapsed time        20.00444
#                   run time        18.31316
#          getnsecs overhead      1429
#
#          number of samples     18897
#         number of outliers       963
#    number of final samples     17934
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2            8814 |*                                    8833.00000
#                  3            8864 |*                                    8899.33333
#                 21            8914 |*                                    8934.71429
#                  4            8964 |*                                    8991.25000
#                 14            9014 |*                                    9030.07143
#                 26            9064 |*                                    9088.84615
#                  8            9114 |*                                    9142.37500
#                  6            9164 |*                                    9184.66667
#                  9            9214 |*                                    9239.88889
#                 43            9264 |*                                    9292.55814
#                 58            9314 |*                                    9343.74138
#                 61            9364 |*                                    9393.29508
#                386            9414 |***                                  9445.77979
#               2643            9464 |*********************                9493.78623
#               3984            9514 |********************************     9539.15261
#               2417            9564 |*******************                  9584.10716
#               1307            9614 |**********                           9640.31523
#               1477            9664 |***********                          9688.50575
#                874            9714 |*******                              9733.39817
#                249            9764 |**                                   9785.22490
#                119            9814 |*                                    9835.95798
#                 82            9864 |*                                    9883.76829
#                 66            9914 |*                                    9933.16667
#                 44            9964 |*                                    9988.75000
#                 63           10014 |*                                   10037.80952
#                102           10064 |*                                   10094.80392
#                325           10114 |**                                  10143.63692
#                643           10164 |*****                               10190.21306
#                670           10214 |*****                               10237.40448
#                542           10264 |****                                10286.67897
#                495           10314 |***                                 10338.49293
#                294           10364 |**                                  10381.11565
#
#                897           > 95% |*******                             10531.21739
#
#        mean of 95%      9702.88044
#          95th %ile           10404
#
# Usage: log
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'log')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f <log func> (log[fl],log2[fl],log10[fl], default log)]
# note: measures log[2|10][fl]() family of functions
        prc thr      nsecs/call      samples   errors cnt/samp 
longjmp   1   1             139        22191        0     5385 
# bin/../bin-riscv64/longjmp -N longjmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       110                        110
#                        max    198536                        175
#                       mean       153.84751                  137.92249
#                     median       139                        139*
#                     stddev      1368.41553                   12.38379
#             standard error         9.03368                    0.08313
#       99% confidence level        23.27075                    0.21415
#                       skew       136.42758                   -0.54656
#                   kurtosis     19406.81575                    0.45892
#           time correlation         0.00570                    0.00173
#
#               elapsed time        20.00489
#                   run time        17.32746
#          getnsecs overhead      1429
#
#          number of samples     22946
#         number of outliers       755
#    number of final samples     22191
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                156             110 |*                                     110.90385
#               1281             112 |******                                112.57689
#               1431             114 |*******                               114.45772
#                425             116 |**                                    116.30353
#                118             118 |*                                     118.39831
#                 53             120 |*                                     120.60377
#                222             122 |*                                     122.57207
#                135             124 |*                                     124.42222
#                 83             126 |*                                     126.49398
#                 41             128 |*                                     128.34146
#                 28             130 |*                                     130.57143
#                 17             132 |*                                     132.58824
#                105             134 |*                                     134.88571
#               1774             136 |********                              136.75141
#               6522             138 |********************************      138.47102
#               3016             140 |**************                        140.47745
#               1619             142 |*******                               142.40519
#                857             144 |****                                  144.38273
#                351             146 |*                                     146.41880
#                595             148 |**                                    148.61176
#                920             150 |****                                  150.50543
#                920             152 |****                                  152.37826
#                412             154 |**                                    154.41748
#
#               1110           > 95% |*****                                 162.10631
#
#        mean of 95%       136.64912
#          95th %ile             155
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: longjmp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'longjmp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures longjmp()
        prc thr      nsecs/call      samples   errors cnt/samp 
lrand48   1   1             154        21047        0     4846 
# bin/../bin-riscv64/lrand48 -N lrand48 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       149                        149
#                        max    216457                        172
#                       mean       173.20063                  156.13921
#                     median       155                        154*
#                     stddev      1447.71465                    5.14540
#             standard error         9.61645                    0.03547
#       99% confidence level        24.77197                    0.09136
#                       skew       147.38602                    1.41773
#                   kurtosis     21982.51289                    0.89265
#           time correlation         0.00506                    0.00074
#
#               elapsed time        20.00405
#                   run time        17.44681
#          getnsecs overhead      1429
#
#          number of samples     22664
#         number of outliers      1617
#    number of final samples     21047
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5             149 |*                                             -
#                124             150 |*                                             -
#               1155             151 |***********                                   -
#               3350             152 |********************************              -
#               3300             153 |*******************************               -
#               3109             154 |*****************************                 -
#               2899             155 |***************************                   -
#               1616             156 |***************                               -
#                763             157 |*******                                       -
#                451             158 |****                                          -
#                246             159 |**                                            -
#                152             160 |*                                             -
#                133             161 |*                                             -
#                171             162 |*                                             -
#                386             163 |***                                           -
#                553             164 |*****                                         -
#                543             165 |*****                                         -
#                561             166 |*****                                         -
#                425             167 |****                                          -
#                 52             168 |*                                             -
#
#               1053           > 95% |**********                            169.55840
#
#        mean of 95%       155.43248
#          95th %ile             168
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: lrand48
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'lrand48')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# note: measures lrand48()
          prc thr      nsecs/call      samples   errors cnt/samp     size
lseek_t8k   1   1            1966         7570        0      422     8192
# bin/../bin-riscv64/lseek -N lseek_t8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 8k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1890                       1890
#                        max    174386                       2457
#                       mean      2151.61414                 2037.05284
#                     median      1970                       1966*
#                     stddev      2057.31681                  139.99076
#             standard error        22.91573                    1.60898
#       99% confidence level        59.03091                    4.14474
#                       skew        74.12435                    1.34508
#                   kurtosis      6116.49697                    0.33468
#           time correlation         0.12803                    0.05401
#
#               elapsed time        20.00774
#                   run time         7.09307
#          getnsecs overhead      1429
#
#          number of samples      8060
#         number of outliers       490
#    number of final samples      7570
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4            1890 |*                                    1895.25000
#                 73            1904 |*                                    1912.61644
#                436            1918 |*********                            1926.11697
#               1233            1932 |*************************            1939.41281
#               1536            1946 |********************************     1952.21680
#                911            1960 |******************                   1965.70801
#                601            1974 |************                         1980.46589
#                405            1988 |********                             1993.84198
#                190            2002 |***                                  2007.70526
#                103            2016 |**                                   2021.34951
#                 80            2030 |*                                    2035.93750
#                 71            2044 |*                                    2049.54930
#                 60            2058 |*                                    2063.98333
#                 36            2072 |*                                    2078.30556
#                 29            2086 |*                                    2093.24138
#                 32            2100 |*                                    2106.71875
#                 25            2114 |*                                    2121.40000
#                 39            2128 |*                                    2133.84615
#                 21            2142 |*                                    2147.33333
#                 17            2156 |*                                    2162.52941
#                 22            2170 |*                                    2175.04545
#                 28            2184 |*                                    2190.67857
#                 60            2198 |*                                    2205.91667
#                166            2212 |***                                  2219.56627
#                207            2226 |****                                 2232.56039
#                211            2240 |****                                 2246.81517
#                119            2254 |**                                   2260.78992
#                120            2268 |**                                   2273.95000
#                100            2282 |**                                   2287.97000
#                118            2296 |**                                   2302.10169
#                102            2310 |**                                   2315.81373
#                 36            2324 |*                                    2326.75000
#
#                379           > 95% |*******                              2384.13984
#
#        mean of 95%      2018.75970
#          95th %ile            2330
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 35.5% of elapsed time.
#
# Usage: lseek
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'lseek')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
# notes: measures lseek()
          prc thr      nsecs/call      samples   errors cnt/samp   glob  sizes
malloc_10   1   1             224         2609        0    31016     10 10 
# bin/../bin-riscv64/malloc -N malloc_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 -g 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       210                        217
#                        max     65264                        232
#                       mean       258.83699                  224.33116
#                     median       224                        224*
#                     stddev      1232.21769                    2.52183
#             standard error        23.17116                    0.04937
#       99% confidence level        59.68890                    0.12718
#                       skew        52.01300                    0.13182
#                   kurtosis      2737.25100                    1.13588
#           time correlation         0.07526                    0.00310
#
#               elapsed time        20.00378
#                   run time        19.93213
#          getnsecs overhead      1429
#
#          number of samples      2828
#         number of outliers       219
#    number of final samples      2609
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15             217 |*                                             -
#                 41             218 |*                                             -
#                 59             219 |**                                            -
#                 60             220 |**                                            -
#                 92             221 |****                                          -
#                170             222 |********                                      -
#                385             223 |******************                            -
#                680             224 |********************************              -
#                436             225 |********************                          -
#                264             226 |************                                  -
#                167             227 |*******                                       -
#                 92             228 |****                                          -
#                 17             229 |*                                             -
#
#                131           > 95% |******                                230.35878
#
#        mean of 95%       224.01251
#          95th %ile             229
#
# Usage: malloc
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'malloc')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g number of mallocs before free (default 100)]
#     [-s size to malloc (default 32). Up to 32 sizes accepted
# notes: measures malloc()/free()
           prc thr      nsecs/call      samples   errors cnt/samp   glob  sizes
malloc_100   1   1            1263         2187        0     7045     10 100 
# bin/../bin-riscv64/malloc -N malloc_100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100 -g 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1152                       1152
#                        max     53969                       1360
#                       mean      1303.24565                 1253.68816
#                     median      1264                       1263*
#                     stddev      1147.00414                   37.45217
#             standard error        24.21867                    0.80085
#       99% confidence level        62.38730                    2.06300
#                       skew        43.40739                   -0.91082
#                   kurtosis      1980.79212                    0.45326
#           time correlation         0.18074                    0.05280
#
#               elapsed time        20.00998
#                   run time        19.95238
#          getnsecs overhead      1429
#
#          number of samples      2243
#         number of outliers        56
#    number of final samples      2187
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7            1152 |*                                    1154.57143
#                  5            1157 |*                                    1159.60000
#                 18            1162 |*                                    1163.88889
#                 39            1167 |****                                 1168.94872
#                 48            1172 |****                                 1174.12500
#                 59            1177 |******                               1178.69492
#                 78            1182 |********                             1184.00000
#                 58            1187 |******                               1189.27586
#                 30            1192 |***                                  1193.63333
#                 27            1197 |**                                   1198.59259
#                 17            1202 |*                                    1203.47059
#                  7            1207 |*                                    1208.57143
#                  8            1212 |*                                    1213.25000
#                  5            1217 |*                                    1218.20000
#                  1            1222 |*                                    1226.00000
#                  6            1227 |*                                    1229.50000
#                  3            1232 |*                                    1236.00000
#                 14            1237 |*                                    1239.00000
#                 43            1242 |****                                 1244.62791
#                101            1247 |**********                           1249.26733
#                151            1252 |***************                      1254.13907
#                260            1257 |**************************           1259.03077
#                309            1262 |********************************     1263.98382
#                255            1267 |**************************           1268.78431
#                198            1272 |********************                 1273.85354
#                146            1277 |***************                      1278.85616
#                 68            1282 |*******                              1284.02941
#                 66            1287 |******                               1288.89394
#                 33            1292 |***                                  1294.15152
#                 17            1297 |*                                    1298.29412
#
#                110           > 95% |***********                          1318.16364
#
#        mean of 95%      1250.27347
#          95th %ile            1300
#
# Usage: malloc
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'malloc')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g number of mallocs before free (default 100)]
#     [-s size to malloc (default 32). Up to 32 sizes accepted
# notes: measures malloc()/free()
            prc thr      nsecs/call      samples   errors cnt/samp   glob  sizes
malloc_100k   1   1          119413         1777        0       58     10 102400 
# bin/../bin-riscv64/malloc -N malloc_100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -g 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     88576                      88576
#                        max    464355                     159043
#                       mean    154009.68190               122560.95442
#                     median    124256                     119413*
#                     stddev     71760.59846                12172.19204
#             standard error      1526.47577                  288.75205
#       99% confidence level      3932.20158                  743.82529
#                       skew         1.98279                    0.70000
#                   kurtosis         2.54402                   -0.08784
#           time correlation        84.60873                   22.84088
#
#               elapsed time        20.02262
#                   run time        19.92322
#          getnsecs overhead      1429
#
#          number of samples      2210
#         number of outliers       433
#    number of final samples      1777
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2           88576 |*                                   89042.50000
#                  1           90377 |*                                   90634.00000
#                  2           92178 |*                                   92305.50000
#                  1           93979 |*                                   94129.00000
#                  2           95780 |*                                   96396.50000
#                  0           97581 |                                              -
#                  0           99382 |                                              -
#                  4          101183 |*                                  102160.50000
#                 14          102984 |**                                 104110.64286
#                 30          104785 |*****                              105845.83333
#                 52          106586 |**********                         107712.09615
#                118          108387 |***********************            109358.22881
#                127          110188 |*************************          111134.18110
#                162          111989 |********************************   112895.80864
#                136          113790 |**************************         114699.43382
#                104          115591 |********************               116453.52885
#                119          117392 |***********************            118282.54622
#                 90          119193 |*****************                  120089.58889
#                 88          120994 |*****************                  121823.76136
#                 67          122795 |*************                      123738.92537
#                 64          124596 |************                       125549.26562
#                 53          126397 |**********                         127353.64151
#                 44          128198 |********                           129040.02273
#                 56          129999 |***********                        131055.44643
#                 81          131800 |****************                   132644.85185
#                 80          133601 |***************                    134511.47500
#                 50          135402 |*********                          136111.32000
#                 40          137203 |*******                            138090.00000
#                 27          139004 |*****                              139579.07407
#                 29          140805 |*****                              141647.48276
#                 22          142606 |****                               143644.36364
#                 23          144407 |****                               145290.13043
#
#                 89           > 95% |*****************                  151474.39326
#
#        mean of 95%    121036.48993
#          95th %ile          146190
#
# Usage: malloc
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'malloc')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g number of mallocs before free (default 100)]
#     [-s size to malloc (default 32). Up to 32 sizes accepted
# notes: measures malloc()/free()
           prc thr      nsecs/call      samples   errors cnt/samp   glob  sizes
malloc_10k   1   1            5649         2126        0     1586     10 10240 
# bin/../bin-riscv64/malloc -N malloc_10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -g 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      5394                       5394
#                        max    157269                       5944
#                       mean      5795.61500                 5610.57291
#                     median      5653                       5649*
#                     stddev      3447.44650                  116.51204
#             standard error        73.06930                    2.52691
#       99% confidence level       188.22652                    6.50931
#                       skew        39.06492                    0.25721
#                   kurtosis      1681.32281                   -0.67686
#           time correlation         0.65418                    0.18377
#
#               elapsed time        20.00883
#                   run time        19.95077
#          getnsecs overhead      1429
#
#          number of samples      2226
#         number of outliers       100
#    number of final samples      2126
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6            5394 |*                                    5401.83333
#                  2            5407 |*                                    5414.50000
#                  9            5420 |*                                    5424.88889
#                 25            5433 |***                                  5441.40000
#                 89            5446 |*************                        5453.23596
#                143            5459 |*********************                5465.38462
#                182            5472 |***************************          5477.73626
#                112            5485 |*****************                    5490.52679
#                121            5498 |******************                   5504.31405
#                 83            5511 |************                         5516.44578
#                 41            5524 |******                               5529.21951
#                 38            5537 |*****                                5543.02632
#                 23            5550 |***                                  5556.04348
#                 18            5563 |**                                   5568.22222
#                 10            5576 |*                                    5581.30000
#                 14            5589 |**                                   5594.28571
#                  8            5602 |*                                    5609.75000
#                 15            5615 |**                                   5621.33333
#                 43            5628 |******                               5634.53488
#                137            5641 |********************                 5647.70073
#                210            5654 |********************************     5660.21905
#                185            5667 |****************************         5672.20000
#                115            5680 |*****************                    5685.86957
#                110            5693 |****************                     5698.57273
#                 89            5706 |*************                        5711.44944
#                 68            5719 |**********                           5724.13235
#                 31            5732 |****                                 5738.16129
#                 28            5745 |****                                 5750.28571
#                 20            5758 |***                                  5763.25000
#                 22            5771 |***                                  5776.09091
#                 22            5784 |***                                  5790.54545
#
#                107           > 95% |****************                     5866.47664
#
#        mean of 95%      5597.01090
#          95th %ile            5796
#
# Usage: malloc
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'malloc')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g number of mallocs before free (default 100)]
#     [-s size to malloc (default 32). Up to 32 sizes accepted
# notes: measures malloc()/free()
          prc thr      nsecs/call      samples   errors cnt/samp   glob  sizes
malloc_1k   1   1             379         2477        0    19669     10 1024 
# bin/../bin-riscv64/malloc -N malloc_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -g 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       262                        347
#                        max     72474                        413
#                       mean       423.19334                  379.14009
#                     median       379                        379*
#                     stddev      1418.47260                   11.18562
#             standard error        27.59131                    0.22475
#       99% confidence level        71.07522                    0.57895
#                       skew        49.73748                   -0.38662
#                   kurtosis      2517.56213                    1.41870
#           time correlation         0.11344                    0.01403
#
#               elapsed time        20.00752
#                   run time        19.93482
#          getnsecs overhead      1429
#
#          number of samples      2643
#         number of outliers       166
#    number of final samples      2477
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3             347 |*                                     347.66667
#                 25             349 |**                                    349.84000
#                 41             351 |***                                   351.56098
#                 74             353 |*****                                 353.59459
#                 54             355 |****                                  355.46296
#                 32             357 |**                                    357.46875
#                 16             359 |*                                     359.56250
#                  8             361 |*                                     361.37500
#                  4             363 |*                                     363.25000
#                  5             365 |*                                     365.40000
#                  5             367 |*                                     367.40000
#                 12             369 |*                                     369.83333
#                 19             371 |*                                     371.63158
#                118             373 |*********                             373.68644
#                383             375 |******************************        375.61619
#                396             377 |********************************      377.38636
#                227             379 |******************                    379.44053
#                184             381 |**************                        381.63043
#                270             383 |*********************                 383.46667
#                173             385 |*************                         385.38150
#                101             387 |********                              387.48515
#                 72             389 |*****                                 389.43056
#                 45             391 |***                                   391.48889
#                 32             393 |**                                    393.56250
#                 32             395 |**                                    395.37500
#                 22             397 |*                                     397.36364
#
#                124           > 95% |**********                            404.24194
#
#        mean of 95%       377.81725
#          95th %ile             398
#
# Usage: malloc
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'malloc')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-g number of mallocs before free (default 100)]
#     [-s size to malloc (default 32). Up to 32 sizes accepted
# notes: measures malloc()/free()
          prc thr      nsecs/call      samples   errors cnt/samp     size
memcpy_10   1   1              68        18686        0    12736       10
# bin/../bin-riscv64/memcpy -N memcpy_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        65                         65
#                        max     34836                         77
#                       mean        72.25819                   69.25955
#                     median        68                         68*
#                     stddev       247.04906                    2.45511
#             standard error         1.74738                    0.01796
#       99% confidence level         4.50125                    0.04627
#                       skew       139.51537                    1.27741
#                   kurtosis     19614.23916                    0.69151
#           time correlation         0.00121                    0.00040
#
#               elapsed time        20.00444
#                   run time        17.92099
#          getnsecs overhead      1429
#
#          number of samples     19989
#         number of outliers      1303
#    number of final samples     18686
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 36              65 |*                                             -
#                292              66 |*                                             -
#               3288              67 |***************                               -
#               6803              68 |********************************              -
#               3214              69 |***************                               -
#                833              70 |***                                           -
#                371              71 |*                                             -
#                879              72 |****                                          -
#               1294              73 |******                                        -
#                741              74 |***                                           -
#
#                935           > 95% |****                                   75.58396
#
#        mean of 95%        68.92643
#          95th %ile              74
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memcpy()
           prc thr      nsecs/call      samples   errors cnt/samp     size
memcpy_10k   1   1            2120        19290        0      393    10240
# bin/../bin-riscv64/memcpy -N memcpy_10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2031                       2031
#                        max    758636                       2353
#                       mean      2273.81269                 2142.29305
#                     median      2124                       2120*
#                     stddev      6080.91479                   70.08802
#             standard error        42.08775                    0.50464
#       99% confidence level       108.41804                    1.29994
#                       skew       110.26105                    1.18794
#                   kurtosis     12767.44501                    0.49536
#           time correlation         0.04618                    0.01147
#
#               elapsed time        20.00452
#                   run time        17.90942
#          getnsecs overhead      1429
#
#          number of samples     20875
#         number of outliers      1585
#    number of final samples     19290
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 21            2031 |*                                    2036.95238
#                123            2040 |**                                   2045.94309
#                372            2049 |******                               2053.76882
#                667            2058 |**********                           2061.76912
#                811            2067 |*************                        2070.88039
#                920            2076 |***************                      2080.11957
#               1410            2085 |***********************              2089.34539
#               1942            2094 |********************************     2098.11329
#               1883            2103 |*******************************      2106.98460
#               1695            2112 |***************************          2115.93628
#               1443            2121 |***********************              2124.87803
#               1204            2130 |*******************                  2133.68189
#                946            2139 |***************                      2142.78964
#                683            2148 |***********                          2151.58712
#                474            2157 |*******                              2160.70042
#                382            2166 |******                               2169.84293
#                271            2175 |****                                 2178.76384
#                202            2184 |***                                  2187.63861
#                164            2193 |**                                   2197.15244
#                140            2202 |**                                   2206.20000
#                179            2211 |**                                   2215.28492
#                206            2220 |***                                  2224.17476
#                230            2229 |***                                  2233.26522
#                321            2238 |*****                                2242.06854
#                354            2247 |*****                                2251.05932
#                351            2256 |*****                                2259.94302
#                328            2265 |*****                                2269.21646
#                286            2274 |****                                 2278.43357
#                279            2283 |****                                 2287.20789
#                 38            2292 |*                                    2292.39474
#
#                965           > 95% |***************                      2318.96788
#
#        mean of 95%      2132.98930
#          95th %ile            2293
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memcpy()
           prc thr      nsecs/call      samples   errors cnt/samp     size
memcpy_10m   1   1         2777971         5565        0        1 10485760
# bin/../bin-riscv64/memcpy -N memcpy_10m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   2460971                    2460971
#                        max 134189236                    3075471
#                       mean   2935807.26674              2765437.03774
#                     median   2789171                    2777971*
#                     stddev   1659373.90431               103651.63287
#             standard error     20353.13984                 1389.45205
#       99% confidence level     52429.68824                 3579.22848
#                       skew        74.49958                    0.20842
#                   kurtosis      5886.90814                   -0.01813
#           time correlation       173.57545                   61.79756
#
#               elapsed time        20.01348
#                   run time        19.65800
#          getnsecs overhead      1429
#
#          number of samples      6647
#         number of outliers      1082
#    number of final samples      5565
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         2460971 |*                                 2460971.00000
#                  2         2476140 |*                                 2488271.00000
#                  2         2491309 |*                                 2500571.00000
#                  6         2506478 |*                                 2515854.33333
#                  4         2521647 |*                                 2529996.00000
#                  8         2536816 |*                                 2545196.00000
#                  6         2551985 |*                                 2558521.00000
#                 11         2567154 |*                                 2577834.63636
#                100         2582323 |****                              2592052.00000
#                187         2597492 |********                          2605476.34759
#                376         2612661 |*****************                 2621234.03191
#                453         2627830 |*********************             2634571.88300
#                173         2642999 |********                          2649279.67052
#                 90         2658168 |****                              2665361.00000
#                 77         2673337 |***                               2680329.44156
#                 53         2688506 |**                                2696614.39623
#                 64         2703675 |**                                2711539.75000
#                 73         2718844 |***                               2726343.60274
#                156         2734013 |*******                           2743425.48718
#                329         2749182 |***************                   2757886.19757
#                674         2764351 |*******************************   2772298.74481
#                686         2779520 |********************************  2786511.08746
#                432         2794689 |********************              2802183.73148
#                361         2809858 |****************                  2817085.95845
#                232         2825027 |**********                        2832326.17241
#                186         2840196 |********                          2847508.09677
#                136         2855365 |******                            2863090.11765
#                100         2870534 |****                              2877941.00000
#                 87         2885703 |****                              2894197.43678
#                 84         2900872 |***                               2908278.14286
#                 79         2916041 |***                               2923891.25316
#                 58         2931210 |**                                2938476.17241
#
#                279           > 95% |*************                     3003793.22222
#
#        mean of 95%   2752856.37647
#          95th %ile         2946371
#
# Usage: memcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memcpy()
          prc thr      nsecs/call      samples   errors cnt/samp     size
memcpy_1k   1   1             302        21333        0     2385     1024
# bin/../bin-riscv64/memcpy -N memcpy_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       286                        286
#                        max    391686                        337
#                       mean       346.06029                  305.38926
#                     median       303                        302*
#                     stddev      2874.02385                   10.52420
#             standard error        18.73969                    0.07205
#       99% confidence level        48.27345                    0.18561
#                       skew       122.17501                    1.14350
#                   kurtosis     15657.18862                    0.59914
#           time correlation         0.01140                    0.00158
#
#               elapsed time        20.00591
#                   run time        17.55913
#          getnsecs overhead      1429
#
#          number of samples     23521
#         number of outliers      2188
#    number of final samples     21333
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5             286 |*                                     286.80000
#                 64             288 |*                                     288.71875
#                316             290 |***                                   290.60759
#                749             292 |*********                             292.57410
#               1407             294 |*****************                     294.54797
#               2045             296 |************************              296.55795
#               2642             298 |********************************      298.50189
#               2485             300 |******************************        300.48692
#               2113             302 |*************************             302.47610
#               1734             304 |*********************                 304.49539
#               1427             306 |*****************                     306.48493
#               1112             308 |*************                         308.45683
#                815             310 |*********                             310.43067
#                524             312 |******                                312.41985
#                330             314 |***                                   314.49394
#                320             316 |***                                   316.47188
#                332             318 |****                                  318.52410
#                396             320 |****                                  320.53535
#                402             322 |****                                  322.54478
#                464             324 |*****                                 324.46983
#                397             326 |****                                  326.50882
#                187             328 |**                                    328.01070
#
#               1067           > 95% |************                          332.36739
#
#        mean of 95%       303.96886
#          95th %ile             329
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memcpy()
          prc thr      nsecs/call      samples   errors cnt/samp     size
memcpy_1m   1   1          214118        18923        0        3  1048576
# bin/../bin-riscv64/memcpy -N memcpy_1m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    205424                     205424
#                        max  36165386                     239968
#                       mean    224144.58510               216998.43455
#                     median    214668                     214118*
#                     stddev    249058.76799                 7658.45786
#             standard error      1719.24196                   55.67322
#       99% confidence level      4428.76728                  143.41421
#                       skew       143.21063                    1.29710
#                   kurtosis     20662.98228                    0.56177
#           time correlation         2.85192                    1.24828
#
#               elapsed time        20.00494
#                   run time        17.99950
#          getnsecs overhead      1429
#
#          number of samples     20986
#         number of outliers      2063
#    number of final samples     18923
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8          205424 |*                                  205969.25000
#                 45          206308 |*                                  206759.73333
#                131          207192 |**                                 207724.49618
#                335          208076 |*****                              208625.28060
#                730          208960 |***********                        209495.52055
#               1276          209844 |********************               210292.39969
#               1717          210728 |***************************        211150.97554
#               2013          211612 |********************************   212055.39791
#               1878          212496 |*****************************      212953.75240
#               1623          213380 |*************************          213822.04744
#               1375          214264 |*********************              214674.73164
#               1074          215148 |*****************                  215584.25885
#                841          216032 |*************                      216455.12366
#                613          216916 |*********                          217339.93638
#                519          217800 |********                           218228.21387
#                323          218684 |*****                              219112.24768
#                252          219568 |****                               219964.80159
#                191          220452 |***                                220853.90052
#                139          221336 |**                                 221762.78417
#                119          222220 |*                                  222636.88235
#                 96          223104 |*                                  223529.08333
#                109          223988 |*                                  224410.90826
#                129          224872 |**                                 225345.97674
#                177          225756 |**                                 226204.28249
#                261          226640 |****                               227084.89272
#                288          227524 |****                               227998.68403
#                303          228408 |****                               228855.86139
#                313          229292 |****                               229755.97764
#                299          230176 |****                               230624.40134
#                323          231060 |*****                              231470.53870
#                256          231944 |****                               232384.82031
#                220          232828 |***                                233242.93182
#
#                947           > 95% |***************                    236405.79725
#
#        mean of 95%    215976.02843
#          95th %ile          233693
#
# Usage: memcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memcpy()
           prc thr      nsecs/call      samples   errors cnt/samp     size
memmove_10   1   1              95        20853        0     7828       10
# bin/../bin-riscv64/memmove -N memmove_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        67                         81
#                        max    145436                        110
#                       mean       106.52492                   95.55205
#                     median        95                         95*
#                     stddev      1009.05780                    4.79831
#             standard error         6.66877                    0.03323
#       99% confidence level        17.17875                    0.08560
#                       skew       134.79866                    0.65691
#                   kurtosis     18990.19869                    0.37108
#           time correlation         0.00389                    0.00076
#
#               elapsed time        20.00676
#                   run time        17.36629
#          getnsecs overhead      1429
#
#          number of samples     22895
#         number of outliers      2042
#    number of final samples     20853
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5              81 |*                                             -
#                  6              82 |*                                             -
#                 12              83 |*                                             -
#                 25              84 |*                                             -
#                131              85 |*                                             -
#                206              86 |***                                           -
#                201              87 |***                                           -
#                213              88 |***                                           -
#                341              89 |*****                                         -
#                931              90 |**************                                -
#               1647              91 |*************************                     -
#               2031              92 |******************************                -
#               2101              93 |********************************              -
#               2053              94 |*******************************               -
#               2035              95 |******************************                -
#               1626              96 |************************                      -
#               1386              97 |*********************                         -
#               1080              98 |****************                              -
#                956              99 |**************                                -
#                688             100 |**********                                    -
#                548             101 |********                                      -
#                505             102 |*******                                       -
#                429             103 |******                                        -
#                424             104 |******                                        -
#                230             105 |***                                           -
#
#               1043           > 95% |***************                       107.18217
#
#        mean of 95%        94.93973
#          95th %ile             105
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memmove
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memmove')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memmove()
            prc thr      nsecs/call      samples   errors cnt/samp     size
memmove_10k   1   1            2185        18256        0      374    10240
# bin/../bin-riscv64/memmove -N memmove_10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2060                       2060
#                        max    612286                       2418
#                       mean      2377.42887                 2209.80850
#                     median      2192                       2185*
#                     stddev      5765.69921                   69.23523
#             standard error        39.93188                    0.51242
#       99% confidence level       102.86453                    1.31999
#                       skew        88.54865                    1.40757
#                   kurtosis      8228.33771                    0.87143
#           time correlation         0.05406                    0.01145
#
#               elapsed time        20.00497
#                   run time        17.79780
#          getnsecs overhead      1429
#
#          number of samples     20848
#         number of outliers      2592
#    number of final samples     18256
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            2060 |*                                    2060.00000
#                  3            2070 |*                                    2074.66667
#                  2            2080 |*                                    2086.00000
#                  8            2090 |*                                    2095.12500
#                 24            2100 |*                                    2104.20833
#                 57            2110 |*                                    2115.85965
#                149            2120 |*                                    2125.10067
#                365            2130 |****                                 2135.24384
#                883            2140 |***********                          2145.19026
#               1698            2150 |*********************                2154.88104
#               2489            2160 |********************************     2164.67296
#               2343            2170 |******************************       2174.50875
#               1939            2180 |************************             2184.41619
#               1562            2190 |********************                 2194.31498
#               1280            2200 |****************                     2204.29219
#                952            2210 |************                         2214.08613
#                561            2220 |*******                              2223.94118
#                359            2230 |****                                 2234.05571
#                205            2240 |**                                   2243.98049
#                124            2250 |*                                    2254.25000
#                 79            2260 |*                                    2264.27848
#                 75            2270 |*                                    2274.38667
#                 70            2280 |*                                    2284.28571
#                 68            2290 |*                                    2294.52941
#                123            2300 |*                                    2305.09756
#                247            2310 |***                                  2315.02834
#                357            2320 |****                                 2324.57143
#                394            2330 |*****                                2334.53299
#                386            2340 |****                                 2344.25130
#                345            2350 |****                                 2354.62029
#                195            2360 |**                                   2362.64615
#
#                913           > 95% |***********                          2387.78970
#
#        mean of 95%      2200.43891
#          95th %ile            2366
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memmove
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memmove')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memmove()
            prc thr      nsecs/call      samples   errors cnt/samp     size
memmove_10m   1   1         2802871         6276        0        1 10485760
# bin/../bin-riscv64/memmove -N memmove_10m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   2557171                    2557171
#                        max 119306636                    4480671
#                       mean   3077853.68195              3031323.80433
#                     median   2804571                    2802871*
#                     stddev   1570548.37279               487053.44520
#             standard error     19712.09839                 6148.01831
#       99% confidence level     50778.36545                15837.29517
#                       skew        64.02671                    1.22190
#                   kurtosis      4723.47396                   -0.13208
#           time correlation       265.96482                  229.94798
#
#               elapsed time        20.01258
#                   run time        19.66659
#          getnsecs overhead      1429
#
#          number of samples      6348
#         number of outliers        72
#    number of final samples      6276
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                195         2557171 |*****                             2590869.46154
#                903         2601362 |***********************           2623627.25692
#                211         2645553 |*****                             2660675.26540
#                 75         2689744 |*                                 2712533.66667
#                938         2733935 |************************          2763913.64392
#               1221         2778126 |********************************  2797082.62981
#                585         2822317 |***************                   2841613.22222
#                239         2866508 |******                            2884762.63180
#                106         2910699 |**                                2930535.15094
#                 67         2954890 |*                                 2976041.14925
#                 75         2999081 |*                                 3021404.33333
#                 53         3043272 |*                                 3064403.07547
#                 42         3087463 |*                                 3109818.61905
#                 21         3131654 |*                                 3157032.90476
#                 19         3175845 |*                                 3198723.63158
#                 63         3220036 |*                                 3243613.85714
#                 60         3264227 |*                                 3282437.66667
#                 33         3308418 |*                                 3326198.27273
#                  9         3352609 |*                                 3374215.44444
#                 12         3396800 |*                                 3418746.00000
#                 16         3440991 |*                                 3464414.75000
#                 10         3485182 |*                                 3506831.00000
#                 11         3529373 |*                                 3547107.36364
#                  7         3573564 |*                                 3592085.28571
#                  4         3617755 |*                                 3653771.00000
#                  9         3661946 |*                                 3687382.11111
#                 29         3706137 |*                                 3727581.34483
#                 22         3750328 |*                                 3776902.81818
#                103         3794519 |**                                3821074.88350
#                238         3838710 |******                            3863610.49580
#                383         3882901 |**********                        3903630.26893
#                203         3927092 |*****                             3946141.44335
#
#                314           > 95% |********                          4088185.96815
#
#        mean of 95%   2975662.16068
#          95th %ile         3971271
#
# Usage: memmove
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memmove')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memmove()
           prc thr      nsecs/call      samples   errors cnt/samp     size
memmove_1k   1   1             310        21393        0     2306     1024
# bin/../bin-riscv64/memmove -N memmove_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       297                        297
#                        max    428486                        345
#                       mean       355.51705                  314.16814
#                     median       312                        310*
#                     stddev      3111.19462                   10.29401
#             standard error        20.28829                    0.07038
#       99% confidence level        52.26264                    0.18130
#                       skew       123.89063                    1.07160
#                   kurtosis     16128.72934                    0.09457
#           time correlation         0.01157                    0.00154
#
#               elapsed time        20.00520
#                   run time        17.38314
#          getnsecs overhead      1429
#
#          number of samples     23516
#         number of outliers      2123
#    number of final samples     21393
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8             297 |*                                     297.75000
#                113             299 |*                                     299.70796
#                358             301 |***                                   301.62011
#               1259             303 |**********                            303.69500
#               3708             305 |********************************      305.59466
#               3676             307 |*******************************       307.41621
#               1735             309 |**************                        309.45476
#               1657             311 |**************                        311.50875
#               1298             313 |***********                           313.44145
#                961             315 |********                              315.48491
#                917             317 |*******                               317.50055
#                840             319 |*******                               319.46190
#                559             321 |****                                  321.45975
#                370             323 |***                                   323.44054
#                340             325 |**                                    325.48235
#                395             327 |***                                   327.54937
#                624             329 |*****                                 329.54487
#                680             331 |*****                                 331.45588
#                628             333 |*****                                 333.46497
#                197             335 |*                                     335.00000
#
#               1070           > 95% |*********                             339.02897
#
#        mean of 95%       312.85922
#          95th %ile             335
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memmove
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memmove')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memmove()
           prc thr      nsecs/call      samples   errors cnt/samp     size
memmove_1m   1   1          215093        18436        0        3  1048576
# bin/../bin-riscv64/memmove -N memmove_1m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    206057                     206057
#                        max  39741436                     241093
#                       mean    227262.92960               217869.19017
#                     median    215868                     215093*
#                     stddev    277188.28813                 7742.30247
#             standard error      1926.73141                   57.02126
#       99% confidence level      4963.26010                  146.88676
#                       skew       140.05473                    1.21142
#                   kurtosis     19951.60181                    0.43730
#           time correlation         3.50841                    1.31887
#
#               elapsed time        20.00474
#                   run time        17.82306
#          getnsecs overhead      1429
#
#          number of samples     20697
#         number of outliers      2261
#    number of final samples     18436
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10          206057 |*                                  206415.20000
#                 97          206946 |*                                  207526.56701
#                177          207835 |***                                208360.84181
#                393          208724 |*******                            209268.00000
#                745          209613 |*************                      210101.82013
#               1175          210502 |**********************             210954.18638
#               1700          211391 |*******************************    211846.23647
#               1706          212280 |********************************   212740.56917
#               1579          213169 |*****************************      213602.30272
#               1451          214058 |***************************        214493.17367
#               1287          214947 |************************           215390.56566
#               1043          215836 |*******************                216284.29722
#                857          216725 |****************                   217152.87865
#                720          217614 |*************                      218014.63750
#                473          218503 |********                           218917.21987
#                388          219392 |*******                            219812.94845
#                306          220281 |*****                              220693.01307
#                219          221170 |****                               221581.21461
#                170          222059 |***                                222490.52941
#                117          222948 |**                                 223370.41880
#                135          223837 |**                                 224303.34815
#                141          224726 |**                                 225192.34043
#                214          225615 |****                               226090.63084
#                254          226504 |****                               226965.17323
#                271          227393 |*****                              227818.40590
#                314          228282 |*****                              228712.30573
#                323          229171 |******                             229649.37771
#                277          230060 |*****                              230491.46931
#                270          230949 |*****                              231403.46667
#                274          231838 |*****                              232274.31387
#                210          232727 |***                                233178.59524
#                218          233616 |****                               234026.82110
#
#                922           > 95% |*****************                  237393.50108
#
#        mean of 95%    216841.36017
#          95th %ile          234493
#
# Usage: memmove
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memmove')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a relative alignment (default page aligned)]
#     [-f (rotate "from" buffer to keep it out of cache)]
#     [-t (rotate "to" buffer to keep it out of cache)]
# notes: measures memmove()
        prc thr      nsecs/call      samples   errors cnt/samp     size
memrand   1   1        49206636          175        0        2 134217728 
# bin/../bin-riscv64/memrand -N memrand -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 128m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  44559686                   48198286
#                        max  55288236                   51164036
#                       mean  49121203.00000             49339830.28571
#                     median  49104236                   49206636*
#                     stddev   1560619.15921               652292.18307
#             standard error    110352.43903                49308.65424
#       99% confidence level    284267.88295               127019.09333
#                       skew        -0.60933                    0.79169
#                   kurtosis         3.89886                   -0.19394
#           time correlation     22182.06405                12360.02620
#
#               elapsed time        21.26731
#                   run time        19.64877
#          getnsecs overhead      1429
#
#          number of samples       200
#         number of outliers        25
#    number of final samples       175
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1        48198286 |**                               48198286.00000
#                  1        48277744 |**                               48340686.00000
#                  0        48357202 |                                              -
#                  2        48436660 |****                             48482136.00000
#                  6        48516118 |************                     48576536.00000
#                 11        48595576 |**********************           48635226.90909
#                 13        48675034 |**************************       48710455.23077
#                 12        48754492 |************************         48787936.00000
#                 16        48833950 |******************************** 48873970.37500
#                 10        48913408 |********************             48966046.00000
#                  8        48992866 |****************                 49044786.00000
#                  4        49072324 |********                         49086198.50000
#                  5        49151782 |**********                       49178686.00000
#                  8        49231240 |****************                 49260154.75000
#                  8        49310698 |****************                 49360642.25000
#                  2        49390156 |****                             49419886.00000
#                 10        49469614 |********************             49507171.00000
#                  5        49549072 |**********                       49592026.00000
#                 11        49628530 |**********************           49667781.45455
#                  3        49707988 |******                           49749252.66667
#                  3        49787446 |******                           49816769.33333
#                  4        49866904 |********                         49906886.00000
#                  3        49946362 |******                           50000586.00000
#                  3        50025820 |******                           50087419.33333
#                  4        50105278 |********                         50150198.50000
#                  3        50184736 |******                           50241169.33333
#                  2        50264194 |****                             50313986.00000
#                  2        50343652 |****                             50395786.00000
#                  4        50423110 |********                         50464986.00000
#                  1        50502568 |**                               50575636.00000
#                  0        50582026 |                                              -
#                  1        50661484 |**                               50693936.00000
#
#                  9           > 95% |******************               50882458.22222
#
#        mean of 95%  49256193.83133
#          95th %ile        50740936
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
             prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_128k   1   1           47294        18010        0       19   131072 
# bin/../bin-riscv64/memrand -N memrand_128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 128k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     45914                      45914
#                        max    314268                      52334
#                       mean     48697.50384                47847.12460
#                     median     47374                      47294*
#                     stddev      7165.17610                 1496.84502
#             standard error        51.79525                   11.15373
#       99% confidence level       133.42457                   28.73200
#                       skew        15.57397                    1.21202
#                   kurtosis       326.14564                    0.28524
#           time correlation         0.47559                    0.25942
#
#               elapsed time        20.00527
#                   run time        18.28784
#          getnsecs overhead      1429
#
#          number of samples     19137
#         number of outliers      1127
#    number of final samples     18010
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11           45914 |*                                   46024.00000
#                139           46073 |**                                  46174.34532
#                547           46232 |********                            46327.53931
#               1347           46391 |*********************               46477.04380
#               2011           46550 |********************************    46629.60020
#               1686           46709 |**************************          46784.39265
#               1369           46868 |*********************               46943.00950
#               1181           47027 |******************                  47103.97883
#               1103           47186 |*****************                   47266.42792
#               1006           47345 |****************                    47422.97416
#                961           47504 |***************                     47580.41831
#                782           47663 |************                        47741.31330
#                625           47822 |*********                           47897.60480
#                480           47981 |*******                             48057.40208
#                331           48140 |*****                               48215.50453
#                247           48299 |***                                 48371.19838
#                186           48458 |**                                  48528.35484
#                118           48617 |*                                   48695.99153
#                 99           48776 |*                                   48852.29293
#                 59           48935 |*                                   49009.38983
#                 58           49094 |*                                   49174.00000
#                 61           49253 |*                                   49338.01639
#                123           49412 |*                                   49494.66667
#                260           49571 |****                                49661.01923
#                292           49730 |****                                49810.37329
#                307           49889 |****                                49961.54723
#                336           50048 |*****                               50126.94643
#                319           50207 |*****                               50284.55486
#                316           50366 |*****                               50449.09177
#                298           50525 |****                                50603.64430
#                237           50684 |***                                 50756.00422
#                214           50843 |***                                 50911.05140
#
#                901           > 95% |**************                      51526.85683
#
#        mean of 95%     47653.34128
#          95th %ile           50989
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
            prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_16k   1   1            5128        18024        0      179    16384 
# bin/../bin-riscv64/memrand -N memrand_16k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 16k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      5069                       5069
#                        max    149536                       5690
#                       mean      5326.81393                 5218.61435
#                     median      5130                       5128*
#                     stddev      1361.99088                  157.02129
#             standard error         9.84112                    1.16959
#       99% confidence level        25.35072                    3.01286
#                       skew        66.10406                    1.37288
#                   kurtosis      6619.01181                    0.45012
#           time correlation         0.05440                    0.02555
#
#               elapsed time        20.00380
#                   run time        18.17112
#          getnsecs overhead      1429
#
#          number of samples     19154
#         number of outliers      1130
#    number of final samples     18024
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                287            5069 |*                                    5078.96167
#                994            5085 |*****                                5097.13078
#               2475            5101 |************                         5105.90141
#               6107            5117 |********************************     5123.82135
#                333            5133 |*                                    5138.96697
#                188            5149 |*                                    5157.34043
#                364            5165 |*                                    5173.97253
#                739            5181 |***                                  5188.74560
#               1064            5197 |*****                                5204.96335
#               1075            5213 |*****                                5219.05860
#                310            5229 |*                                    5235.21935
#                117            5245 |*                                    5251.10256
#                 64            5261 |*                                    5268.26562
#                 28            5277 |*                                    5283.64286
#                 33            5293 |*                                    5299.90909
#                 54            5309 |*                                    5317.35185
#                 48            5325 |*                                    5331.89583
#                 38            5341 |*                                    5348.26316
#                 30            5357 |*                                    5363.83333
#                 40            5373 |*                                    5380.20000
#                 47            5389 |*                                    5396.27660
#                 79            5405 |*                                    5413.73418
#                154            5421 |*                                    5429.97403
#                384            5437 |**                                   5444.16146
#                599            5453 |***                                  5461.25376
#                385            5469 |**                                   5475.59221
#                227            5485 |*                                    5492.63877
#                228            5501 |*                                    5508.39474
#                306            5517 |*                                    5524.37582
#                253            5533 |*                                    5540.33202
#                 72            5549 |*                                    5550.77778
#
#                902           > 95% |****                                 5608.43459
#
#        mean of 95%      5198.07832
#          95th %ile            5554
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
            prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_16m   1   1       278713686           42        0        2 16777216 
# bin/../bin-riscv64/memrand -N memrand_16m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 16m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min 273787836                  273787836
#                        max 323605436                  286366186
#                       mean 279774061.58140            278730457.42857
#                     median 278713686                  278713686*
#                     stddev   7308092.99818              2595556.19093
#             standard error   1114473.73408               400503.01527
#       99% confidence level   2870884.33899              1031695.76735
#                       skew         5.09933                    0.41568
#                   kurtosis        27.86463                    0.26582
#           time correlation    332569.32951               204181.11174
#
#               elapsed time        25.51225
#                   run time        24.06063
#          getnsecs overhead      1429
#
#          number of samples        43
#         number of outliers         1
#    number of final samples        42
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1       273787836 |********                        273787836.00000
#                  0       274064924 |                                              -
#                  1       274342012 |********                        274580386.00000
#                  0       274619100 |                                              -
#                  2       274896188 |****************                275130886.00000
#                  1       275173276 |********                        275420786.00000
#                  2       275450364 |****************                275591286.00000
#                  1       275727452 |********                        275780736.00000
#                  0       276004540 |                                              -
#                  1       276281628 |********                        276415136.00000
#                  1       276558716 |********                        276698986.00000
#                  0       276835804 |                                              -
#                  1       277112892 |********                        277264936.00000
#                  2       277389980 |****************                277494411.00000
#                  2       277667068 |****************                277703286.00000
#                  2       277944156 |****************                278109261.00000
#                  2       278221244 |****************                278295761.00000
#                  4       278498332 |********************************278672586.00000
#                  2       278775420 |****************                278944436.00000
#                  4       279052508 |********************************279233811.00000
#                  0       279329596 |                                              -
#                  1       279606684 |********                        279774336.00000
#                  0       279883772 |                                              -
#                  0       280160860 |                                              -
#                  3       280437948 |************************        280570186.00000
#                  0       280715036 |                                              -
#                  1       280992124 |********                        281215636.00000
#                  3       281269212 |************************        281392852.66667
#                  1       281546300 |********                        281672786.00000
#                  1       281823388 |********                        281906536.00000
#
#                  3           > 95% |************************        284035919.33333
#
#        mean of 95% 278322344.97436
#          95th %ile       282654636
#
# WARNINGS
#     Too few samples, 43 < 100, consider running test longer, or for a least 100 samples
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_1k   1   1             324        19712        0     2520     1024 
# bin/../bin-riscv64/memrand -N memrand_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       317                        317
#                        max    133036                        368
#                       mean       350.52140                  330.18491
#                     median       326                        324*
#                     stddev       945.24903                   12.61340
#             standard error         6.48313                    0.08984
#       99% confidence level        16.70055                    0.23143
#                       skew       132.42923                    1.11003
#                   kurtosis     18344.95131                    0.03091
#           time correlation         0.00723                    0.00200
#
#               elapsed time        20.00489
#                   run time        17.99708
#          getnsecs overhead      1429
#
#          number of samples     21258
#         number of outliers      1546
#    number of final samples     19712
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                359             317 |**                                    317.74373
#               3976             319 |**************************            319.66247
#               4878             321 |********************************      321.41308
#                742             323 |****                                  323.45148
#               1321             325 |********                              325.59879
#               1462             327 |*********                             327.45280
#                554             329 |***                                   329.39170
#                294             331 |*                                     331.52381
#                366             333 |**                                    333.50546
#                302             335 |*                                     335.45695
#                227             337 |*                                     337.45374
#                243             339 |*                                     339.51852
#                513             341 |***                                   341.61598
#                883             343 |*****                                 343.48811
#                678             345 |****                                  345.44690
#                580             347 |***                                   347.48621
#                493             349 |***                                   349.45639
#                409             351 |**                                    351.47677
#                307             353 |**                                    353.45928
#                139             355 |*                                     355.16547
#
#                986           > 95% |******                                361.26166
#
#        mean of 95%       328.54860
#          95th %ile             356
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_1m   1   1          340286        19658        0        2  1048576 
# bin/../bin-riscv64/memrand -N memrand_1m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    334836                     334836
#                        max   1090936                     350236
#                       mean    350088.33946               341076.43138
#                     median    340836                     340286*
#                     stddev     25335.03806                 3063.95569
#             standard error       161.67166                   21.85309
#       99% confidence level       416.46620                   56.29355
#                       skew         8.05940                    1.09056
#                   kurtosis       136.43127                    0.36651
#           time correlation         2.14609                    0.49523
#
#               elapsed time        20.00425
#                   run time        17.22931
#          getnsecs overhead      1429
#
#          number of samples     24557
#         number of outliers      4899
#    number of final samples     19658
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8          334836 |*                                  335067.25000
#                 31          335240 |*                                  335527.93548
#                 86          335644 |*                                  335874.37209
#                134          336048 |**                                 336272.56716
#                212          336452 |***                                336660.76415
#                232          336856 |****                               337077.59483
#                313          337260 |*****                              337484.88179
#                641          337664 |***********                        337878.90172
#               1161          338068 |********************               338280.18605
#               1563          338472 |***************************        338667.98976
#               1635          338876 |****************************       339047.95719
#               1530          339280 |**************************         339455.77124
#               1539          339684 |**************************         339887.94932
#               1549          340088 |**************************         340321.44222
#               1844          340492 |********************************   340701.07592
#               1440          340896 |************************           341106.06944
#                837          341300 |**************                     341487.79211
#                448          341704 |*******                            341887.45089
#                214          342108 |***                                342307.02804
#                152          342512 |**                                 342711.00000
#                148          342916 |**                                 343112.01351
#                155          343320 |**                                 343519.87097
#                196          343724 |***                                343923.50000
#                207          344128 |***                                344305.56522
#                210          344532 |***                                344715.76190
#                277          344936 |****                               345143.58123
#                315          345340 |*****                              345565.52381
#                322          345744 |*****                              345970.16149
#                369          346148 |******                             346367.84282
#                354          346552 |******                             346759.30508
#                306          346956 |*****                              347150.86928
#                247          347360 |****                               347543.48988
#
#                983           > 95% |*****************                  348580.81180
#
#        mean of 95%    340681.42169
#          95th %ile          347736
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
             prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_256k   1   1           89707        18550        0        9   262144 
# bin/../bin-riscv64/memrand -N memrand_256k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 256k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     87047                      87047
#                        max    712677                      99227
#                       mean     92701.08188                90803.20701
#                     median     89847                      89707*
#                     stddev     15105.57739                 2808.06491
#             standard error       107.12906                   20.61746
#       99% confidence level       275.96446                   53.11058
#                       skew        15.31654                    1.37092
#                   kurtosis       327.33149                    0.64360
#           time correlation         0.92766                    0.45834
#
#               elapsed time        20.00500
#                   run time        18.22609
#          getnsecs overhead      1429
#
#          number of samples     19882
#         number of outliers      1332
#    number of final samples     18550
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9           87047 |*                                   87272.55556
#                 27           87358 |*                                   87546.62963
#                145           87669 |**                                  87838.93103
#                751           87980 |**********                          88185.20107
#               1761           88291 |************************            88475.19705
#               2308           88602 |********************************    88738.28423
#               1720           88913 |***********************             89063.75058
#               1726           89224 |***********************             89370.34357
#               1460           89535 |********************                89686.55959
#               1256           89846 |*****************                   89993.30494
#               1096           90157 |***************                     90302.01095
#                730           90468 |**********                          90616.40822
#                647           90779 |********                            90919.97836
#                459           91090 |******                              91239.44662
#                389           91401 |*****                               91541.02571
#                212           91712 |**                                  91847.28774
#                123           92023 |*                                   92174.94309
#                 68           92334 |*                                   92483.38235
#                 60           92645 |*                                   92787.31667
#                 52           92956 |*                                   93111.30769
#                 44           93267 |*                                   93435.38636
#                 70           93578 |*                                   93752.04286
#                 85           93889 |*                                   94082.29412
#                145           94200 |**                                  94368.00690
#                257           94511 |***                                 94672.25292
#                326           94822 |****                                94973.93252
#                348           95133 |****                                95288.06322
#                288           95444 |***                                 95589.53472
#                315           95755 |****                                95910.49841
#                296           96066 |****                                96209.83108
#                263           96377 |***                                 96532.25856
#                186           96688 |**                                  96832.38710
#
#                928           > 95% |************                        97941.95690
#
#        mean of 95%     90427.27012
#          95th %ile           96967
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_2k   1   1             667        16527        0     1318     2048 
# bin/../bin-riscv64/memrand -N memrand_2k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 2k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       631                        631
#                        max    148086                        788
#                       mean       705.07239                  675.92110
#                     median       670                        667*
#                     stddev      1189.04898                   37.29448
#             standard error         9.05615                    0.29010
#       99% confidence level        23.32865                    0.74730
#                       skew       114.28769                    0.86237
#                   kurtosis     13842.70850                   -0.10740
#           time correlation         0.01659                    0.00745
#
#               elapsed time        20.00318
#                   run time        15.59021
#          getnsecs overhead      1429
#
#          number of samples     17239
#         number of outliers       712
#    number of final samples     16527
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                229             631 |***                                   632.88210
#               2150             635 |********************************      636.75302
#               1908             639 |****************************          639.96436
#                646             643 |*********                             644.47059
#                860             647 |************                          648.58488
#                794             651 |***********                           652.29723
#                579             655 |********                              656.35406
#                498             659 |*******                               660.50201
#                533             663 |*******                               664.48593
#                520             667 |*******                               668.50000
#                490             671 |*******                               672.56735
#                484             675 |*******                               676.59091
#                583             679 |********                              680.57804
#                612             683 |*********                             684.42810
#                496             687 |*******                               688.48790
#                509             691 |*******                               692.52063
#                426             695 |******                                696.34038
#                417             699 |******                                700.57074
#                358             703 |*****                                 704.49162
#                359             707 |*****                                 708.42340
#                278             711 |****                                  712.44964
#                271             715 |****                                  716.59410
#                274             719 |****                                  720.40146
#                258             723 |***                                   724.39535
#                236             727 |***                                   728.54237
#                240             731 |***                                   732.53333
#                214             735 |***                                   736.50935
#                181             739 |**                                    740.58564
#                162             743 |**                                    744.64198
#                134             747 |*                                     748.47015
#                  1             751 |*                                     751.00000
#
#                827           > 95% |************                          766.10641
#
#        mean of 95%       671.17057
#          95th %ile             751
#
# WARNINGS
#     Actual benchmark run time only accounts for 77.9% of elapsed time.
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_2m   1   1          678186        12976        0        2  2097152 
# bin/../bin-riscv64/memrand -N memrand_2m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 2m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    661036                     661036
#                        max   2305736                     764336
#                       mean    698648.06340               690809.67833
#                     median    679086                     678186*
#                     stddev     66967.18153                24513.62783
#             standard error       573.64863                  215.19747
#       99% confidence level      1477.71886                  554.34869
#                       skew        14.99606                    0.87839
#                   kurtosis       305.28564                   -0.30513
#           time correlation         8.61829                    6.10124
#
#               elapsed time        20.00634
#                   run time        19.06181
#          getnsecs overhead      1429
#
#          number of samples     13628
#         number of outliers       652
#    number of final samples     12976
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 24          661036 |*                                  662869.33333
#                332          663446 |******                             665034.64458
#               1351          665856 |**************************         667236.07402
#               1617          668266 |********************************   669428.17687
#               1017          670676 |********************               671801.29007
#                961          673086 |*******************                674344.94901
#               1063          675496 |*********************              676684.40075
#                796          677906 |***************                    678979.96985
#                403          680316 |*******                            681334.26303
#                173          682726 |***                                683713.45665
#                 87          685136 |*                                  686244.62069
#                 57          687546 |*                                  688612.31579
#                 62          689956 |*                                  691119.87097
#                 40          692366 |*                                  693648.50000
#                 52          694776 |*                                  695972.53846
#                 43          697186 |*                                  698295.30233
#                111          699596 |**                                 700995.45946
#                238          702006 |****                               703398.60504
#                433          704416 |********                           705716.25404
#                550          706826 |**********                         707974.81818
#                501          709236 |*********                          710410.85030
#                501          711646 |*********                          712840.69062
#                431          714056 |********                           715235.30394
#                305          716466 |******                             717646.98361
#                242          718876 |****                               719972.36364
#                199          721286 |***                                722572.18090
#                181          723696 |***                                724846.22099
#                143          726106 |**                                 727266.06993
#                116          728516 |**                                 729744.62069
#                113          730926 |**                                 732080.24779
#                 91          733336 |*                                  734478.85714
#                 94          735746 |*                                  737065.25532
#
#                649           > 95% |************                       749722.36364
#
#        mean of 95%    687708.00454
#          95th %ile          738136
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
            prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_32k   1   1           10216        18226        0       90    32768 
# bin/../bin-riscv64/memrand -N memrand_32k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 32k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     10098                      10098
#                        max    167586                      11342
#                       mean     10584.25155                10397.08005
#                     median     10224                      10216*
#                     stddev      1971.07141                  314.83546
#             standard error        14.22906                    2.33205
#       99% confidence level        36.65406                    6.00736
#                       skew        34.45979                    1.35826
#                   kurtosis      2230.60023                    0.35659
#           time correlation         0.10066                    0.05056
#
#               elapsed time        20.00421
#                   run time        18.36909
#          getnsecs overhead      1429
#
#          number of samples     19189
#         number of outliers       963
#    number of final samples     18226
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                288           10098 |*                                   10117.96181
#                606           10128 |***                                 10150.87294
#               2585           10158 |**************                      10168.17640
#               5700           10188 |********************************    10203.78158
#               1017           10218 |*****                               10227.63127
#                218           10248 |*                                   10260.67890
#                314           10278 |*                                   10294.31529
#                626           10308 |***                                 10323.52875
#                839           10338 |****                                10353.50894
#               1185           10368 |******                              10382.57384
#                625           10398 |***                                 10409.67680
#                211           10428 |*                                   10441.15166
#                 90           10458 |*                                   10470.85556
#                 43           10488 |*                                   10501.41860
#                 25           10518 |*                                   10531.32000
#                 17           10548 |*                                   10564.70588
#                 10           10578 |*                                   10586.90000
#                 15           10608 |*                                   10625.06667
#                  5           10638 |*                                   10648.20000
#                 12           10668 |*                                   10679.08333
#                  3           10698 |*                                   10719.00000
#                  4           10728 |*                                   10741.00000
#                 22           10758 |*                                   10778.50000
#                 95           10788 |*                                   10804.65263
#                351           10818 |*                                   10832.98575
#                478           10848 |**                                  10864.79916
#                506           10878 |**                                  10890.77470
#                258           10908 |*                                   10921.55426
#                240           10938 |*                                   10953.29583
#                301           10968 |*                                   10984.13289
#                340           10998 |*                                   11012.54118
#                285           11028 |*                                   11041.91228
#
#                912           > 95% |*****                               11162.85636
#
#        mean of 95%     10356.74344
#          95th %ile           11057
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
            prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_32m   1   1       561597586           20        0        2 33554432 
# bin/../bin-riscv64/memrand -N memrand_32m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 32m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min 553176036                  553176036
#                        max 567823786                  567823786
#                       mean 561388656.00000            561388656.00000
#                     median 561597586                  561597586*
#                     stddev   4588661.78125              4588661.78125
#             standard error   1026055.96686              1026055.96686
#       99% confidence level   2643120.17064              2643120.17064
#                       skew        -0.03528                   -0.03528
#                   kurtosis        -1.27363                   -1.27363
#           time correlation    767921.05263               767921.05263
#
#               elapsed time        25.54358
#                   run time        22.45557
#          getnsecs overhead      1429
#
#          number of samples        20
#         number of outliers         0
#    number of final samples        20
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1       553176036 |********                        553176036.00000
#                  0       553633779 |                                              -
#                  0       554091522 |                                              -
#                  0       554549265 |                                              -
#                  0       555007008 |                                              -
#                  2       555464751 |****************                555683711.00000
#                  0       555922494 |                                              -
#                  2       556380237 |****************                556631386.00000
#                  0       556837980 |                                              -
#                  0       557295723 |                                              -
#                  1       557753466 |********                        557874336.00000
#                  0       558211209 |                                              -
#                  1       558668952 |********                        558861186.00000
#                  0       559126695 |                                              -
#                  1       559584438 |********                        559991236.00000
#                  0       560042181 |                                              -
#                  2       560499924 |****************                560668211.00000
#                  0       560957667 |                                              -
#                  2       561415410 |****************                561700611.00000
#                  0       561873153 |                                              -
#                  0       562330896 |                                              -
#                  2       562788639 |****************                563195636.00000
#                  0       563246382 |                                              -
#                  0       563704125 |                                              -
#                  0       564161868 |                                              -
#                  0       564619611 |                                              -
#                  1       565077354 |********                        565364986.00000
#                  0       565535097 |                                              -
#                  0       565992840 |                                              -
#                  0       566450583 |                                              -
#                  4       566908326 |********************************567230611.00000
#
#                  1           > 95% |********                        567823786.00000
#
#        mean of 95% 561049964.94737
#          95th %ile       567823786
#
# WARNINGS
#     Too few samples, 20 < 100, consider running test longer, or for a least 100 samples
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_4k   1   1            1277        18484        0      702     4096 
# bin/../bin-riscv64/memrand -N memrand_4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1261                       1261
#                        max    149636                       1423
#                       mean      1336.58019                 1299.88899
#                     median      1279                       1277*
#                     stddev      1133.32264                   40.94864
#             standard error         8.10219                    0.30119
#       99% confidence level        20.87125                    0.77587
#                       skew       117.95356                    1.38677
#                   kurtosis     15116.08471                    0.51171
#           time correlation         0.01655                    0.00650
#
#               elapsed time        20.00466
#                   run time        18.05782
#          getnsecs overhead      1429
#
#          number of samples     19566
#         number of outliers      1082
#    number of final samples     18484
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                269            1261 |*                                    1263.50558
#                538            1265 |***                                  1267.07249
#               3006            1269 |*****************                    1270.06986
#               5354            1273 |********************************     1274.84087
#                822            1277 |****                                 1278.12044
#                495            1281 |**                                   1282.73535
#                461            1285 |**                                   1286.36659
#                688            1289 |****                                 1290.63081
#               1002            1293 |*****                                1294.65369
#               1157            1297 |******                               1298.41573
#                408            1301 |**                                   1302.06863
#                149            1305 |*                                    1306.17450
#                 98            1309 |*                                    1310.36735
#                 65            1313 |*                                    1314.33846
#                 38            1317 |*                                    1318.28947
#                 20            1321 |*                                    1322.20000
#                  6            1325 |*                                    1326.16667
#                 10            1329 |*                                    1330.30000
#                  7            1333 |*                                    1334.57143
#                 15            1337 |*                                    1338.73333
#                 10            1341 |*                                    1342.70000
#                 34            1345 |*                                    1346.88235
#                133            1349 |*                                    1350.77444
#                377            1353 |**                                   1354.62069
#                540            1357 |***                                  1358.67407
#                438            1361 |**                                   1362.23744
#                266            1365 |*                                    1366.29699
#                218            1369 |*                                    1370.44954
#                284            1373 |*                                    1374.52113
#                312            1377 |*                                    1378.45833
#                231            1381 |*                                    1382.30736
#                108            1385 |*                                    1385.68519
#
#                925           > 95% |*****                                1402.98054
#
#        mean of 95%      1294.45817
#          95th %ile            1387
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_4m   1   1         1539586         6134        0        2  4194304 
# bin/../bin-riscv64/memrand -N memrand_4m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1442036                    1442036
#                        max   2813686                    1635136
#                       mean   1540356.19518              1533900.74568
#                     median   1540436                    1539586*
#                     stddev     54370.92833                33799.15129
#             standard error       682.14597                  431.55277
#       99% confidence level      1757.20803                 1111.67994
#                       skew         6.50628                   -0.28844
#                   kurtosis       114.13308                   -0.08438
#           time correlation        22.32456                   18.20136
#
#               elapsed time        20.00783
#                   run time        19.58084
#          getnsecs overhead      1429
#
#          number of samples      6353
#         number of outliers       219
#    number of final samples      6134
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2         1442036 |*                                 1443161.00000
#                  4         1446466 |*                                 1447911.00000
#                 13         1450896 |*                                 1453659.07692
#                 23         1455326 |*                                 1457375.13043
#                 35         1459756 |**                                1462347.42857
#                 90         1464186 |*****                             1466323.77778
#                138         1468616 |*******                           1470830.92754
#                166         1473046 |*********                         1475201.96386
#                211         1477476 |************                      1479681.02370
#                231         1481906 |*************                     1484086.64935
#                159         1486336 |*********                         1488307.06918
#                130         1490766 |*******                           1492742.15385
#                 93         1495196 |*****                             1497344.60215
#                 67         1499626 |***                               1501726.29851
#                 26         1504056 |*                                 1505793.69231
#                 25         1508486 |*                                 1511212.00000
#                 55         1512916 |***                               1515481.45455
#                111         1517346 |******                            1519791.40541
#                200         1521776 |***********                       1524189.75000
#                294         1526206 |****************                  1528680.38776
#                467         1530636 |**************************        1532950.02570
#                523         1535066 |*****************************     1537343.36138
#                559         1539496 |********************************  1541695.30233
#                486         1543926 |***************************       1546061.30864
#                388         1548356 |**********************            1550441.92784
#                354         1552786 |********************              1554834.30508
#                288         1557216 |****************                  1559408.39583
#                220         1561646 |************                      1563705.54545
#                152         1566076 |********                          1568274.81579
#                131         1570506 |*******                           1572617.67939
#                111         1574936 |******                            1576904.01802
#                 75         1579366 |****                              1581378.66667
#
#                307           > 95% |*****************                 1601761.40717
#
#        mean of 95%   1530325.45426
#          95th %ile         1583786
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
             prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_512k   1   1          172229        16761        0        5   524288 
# bin/../bin-riscv64/memrand -N memrand_512k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 512k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    168912                     168912
#                        max    829236                     190879
#                       mean    177207.17366               174773.86385
#                     median    172579                     172229*
#                     stddev     20673.82322                 5372.35788
#             standard error       155.28873                   41.49683
#       99% confidence level       400.02376                  106.89585
#                       skew        15.59849                    1.28185
#                   kurtosis       308.67763                    0.24221
#           time correlation         1.61494                    0.96267
#
#               elapsed time        20.00488
#                   run time        18.56580
#          getnsecs overhead      1429
#
#          number of samples     17724
#         number of outliers       963
#    number of final samples     16761
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 27          168912 |*                                  169220.03704
#                297          169446 |***                                169824.43434
#               1182          169980 |************                       170341.35364
#               2354          170514 |*************************          170796.98428
#               2964          171048 |********************************   171299.82625
#               1406          171582 |***************                    171800.16145
#                744          172116 |********                           172391.79435
#                891          172650 |*********                          172934.19529
#               1059          173184 |***********                        173455.87913
#                904          173718 |*********                          173973.47898
#                489          174252 |*****                              174490.61963
#                257          174786 |**                                 175015.79767
#                128          175320 |*                                  175559.97656
#                 68          175854 |*                                  176108.57353
#                 36          176388 |*                                  176649.58333
#                 21          176922 |*                                  177206.19048
#                 19          177456 |*                                  177697.84211
#                 16          177990 |*                                  178257.25000
#                 13          178524 |*                                  178765.76923
#                 18          179058 |*                                  179360.11111
#                 29          179592 |*                                  179877.68966
#                100          180126 |*                                  180398.82000
#                230          180660 |**                                 180949.00870
#                370          181194 |***                                181476.76216
#                423          181728 |****                               181971.43499
#                391          182262 |****                               182484.00256
#                270          182796 |**                                 183072.18148
#                329          183330 |***                                183604.39210
#                331          183864 |***                                184129.16616
#                248          184398 |**                                 184662.60887
#                171          184932 |*                                  185204.70760
#                137          185466 |*                                  185695.10949
#
#                839           > 95% |*********                          188010.24553
#
#        mean of 95%    174076.38086
#          95th %ile          185979
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
            prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_64k   1   1           20697        18176        0       44    65536 
# bin/../bin-riscv64/memrand -N memrand_64k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 64k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     20265                      20265
#                        max    202086                      22989
#                       mean     21454.08899                21047.75578
#                     median     20706                      20697*
#                     stddev      4001.73826                  646.95288
#             standard error        29.00496                    4.79870
#       99% confidence level        74.71677                   12.36145
#                       skew        18.53214                    1.29880
#                   kurtosis       548.18103                    0.25092
#           time correlation         0.21830                    0.10611
#
#               elapsed time        20.00540
#                   run time        18.20297
#          getnsecs overhead      1429
#
#          number of samples     19035
#         number of outliers       859
#    number of final samples     18176
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 17           20265 |*                                   20293.00000
#                102           20332 |*                                   20378.28431
#                244           20399 |*                                   20439.68033
#                695           20466 |****                                20506.70935
#               2052           20533 |*************                       20563.61355
#               4833           20600 |********************************    20635.26298
#               2077           20667 |*************                       20693.22340
#                336           20734 |**                                  20764.99702
#                304           20801 |**                                  20838.15789
#                618           20868 |****                                20902.76861
#                970           20935 |******                              20971.41753
#               1203           21002 |*******                             21033.94015
#                485           21069 |***                                 21092.37526
#                121           21136 |*                                   21164.52893
#                 48           21203 |*                                   21228.35417
#                 24           21270 |*                                   21304.20833
#                 19           21337 |*                                   21365.26316
#                  6           21404 |*                                   21432.66667
#                 11           21471 |*                                   21501.09091
#                 16           21538 |*                                   21582.25000
#                 33           21605 |*                                   21652.09091
#                 58           21672 |*                                   21710.18966
#                114           21739 |*                                   21775.00000
#                178           21806 |*                                   21839.32022
#                308           21873 |**                                  21908.92208
#                486           21940 |***                                 21976.58848
#                525           22007 |***                                 22038.94476
#                282           22074 |*                                   22101.52128
#                251           22141 |*                                   22176.54582
#                290           22208 |*                                   22243.64828
#                316           22275 |**                                  22308.58228
#                245           22342 |*                                   22367.61633
#
#                909           > 95% |******                              22617.78658
#
#        mean of 95%     20965.10343
#          95th %ile           22399
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
            prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_64m   1   1        28488286          318        0        2 67108864 
# bin/../bin-riscv64/memrand -N memrand_64m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 64m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  27861886                   27861886
#                        max  31714386                   29661186
#                       mean  28654598.68657             28568331.28302
#                     median  28509336                   28488286*
#                     stddev    525625.40041               364977.60647
#             standard error     28717.98342                20466.92786
#       99% confidence level     73977.52529                52722.80616
#                       skew         1.88518                    0.77813
#                   kurtosis         5.05780                    0.12236
#           time correlation      4740.77216                 3815.73820
#
#               elapsed time        20.10340
#                   run time        19.19906
#          getnsecs overhead      1429
#
#          number of samples       335
#         number of outliers        17
#    number of final samples       318
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1        27861886 |*                                27861886.00000
#                  0        27906652 |                                              -
#                  2        27951418 |**                               27980086.00000
#                  7        27996184 |*********                        28018693.14286
#                  3        28040950 |****                             28056952.66667
#                 11        28085716 |***************                  28105995.09091
#                  9        28130482 |************                     28152669.33333
#                 16        28175248 |**********************           28201382.87500
#                 17        28220014 |***********************          28237527.17647
#                 18        28264780 |*************************        28287258.22222
#                 20        28309546 |***************************      28329891.00000
#                 23        28354312 |******************************** 28377536.00000
#                 17        28399078 |***********************          28420424.23529
#                 16        28443844 |**********************           28467517.25000
#                 14        28488610 |*******************              28509250.28571
#                 15        28533376 |********************             28559556.00000
#                  9        28578142 |************                     28599969.33333
#                 12        28622908 |****************                 28645656.83333
#                 10        28667674 |*************                    28694501.00000
#                 11        28712440 |***************                  28732776.90909
#                  7        28757206 |*********                        28777243.14286
#                  9        28801972 |************                     28825763.77778
#                  9        28846738 |************                     28862919.33333
#                 11        28891504 |***************                  28912963.27273
#                  7        28936270 |*********                        28960021.71429
#                  3        28981036 |****                             29009352.66667
#                  6        29025802 |********                         29048636.00000
#                  5        29070568 |******                           29086306.00000
#                  4        29115334 |*****                            29132061.00000
#                  6        29160100 |********                         29170169.33333
#                  2        29204866 |**                               29220086.00000
#                  2        29249632 |**                               29274161.00000
#
#                 16           > 95% |**********************           29459967.25000
#
#        mean of 95%  28521092.29139
#          95th %ile        29294386
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_8k   1   1            2564        18274        0      358     8192 
# bin/../bin-riscv64/memrand -N memrand_8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 8k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2521                       2521
#                        max    139536                       2848
#                       mean      2662.22218                 2604.81958
#                     median      2566                       2564*
#                     stddev      1104.97773                   80.91317
#             standard error         7.95483                    0.59855
#       99% confidence level        20.49165                    1.54187
#                       skew       101.21202                    1.36283
#                   kurtosis     12270.80013                    0.43121
#           time correlation         0.02865                    0.01310
#
#               elapsed time        20.00463
#                   run time        18.21668
#          getnsecs overhead      1429
#
#          number of samples     19295
#         number of outliers      1021
#    number of final samples     18274
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                133            2521 |*                                    2526.30075
#                340            2529 |***                                  2534.38235
#               1457            2537 |**************                       2540.44269
#               2963            2545 |******************************       2548.53594
#               3127            2553 |********************************     2555.77263
#               2255            2561 |***********************              2564.42439
#                373            2569 |***                                  2571.96515
#                402            2577 |****                                 2581.19900
#                659            2585 |******                               2588.73900
#               1004            2593 |**********                           2596.60458
#                837            2601 |********                             2604.50538
#                529            2609 |*****                                2612.03592
#                198            2617 |**                                   2619.30808
#                 90            2625 |*                                    2628.10000
#                 47            2633 |*                                    2635.89362
#                 10            2641 |*                                    2645.20000
#                 10            2649 |*                                    2652.50000
#                 12            2657 |*                                    2660.16667
#                 10            2665 |*                                    2669.40000
#                 12            2673 |*                                    2676.25000
#                 19            2681 |*                                    2684.84211
#                 28            2689 |*                                    2693.10714
#                 70            2697 |*                                    2701.41429
#                183            2705 |*                                    2709.21311
#                359            2713 |***                                  2716.89136
#                442            2721 |****                                 2724.03620
#                402            2729 |****                                 2732.35821
#                246            2737 |**                                   2740.37805
#                282            2745 |**                                   2748.37589
#                329            2753 |***                                  2756.50152
#                320            2761 |***                                  2764.51250
#                212            2769 |**                                   2771.88679
#
#                914           > 95% |*********                            2804.68490
#
#        mean of 95%      2594.29672
#          95th %ile            2775
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
           prc thr      nsecs/call      samples   errors cnt/samp     size
memrand_8m   1   1         2878586         2876        0        2  8388608 
# bin/../bin-riscv64/memrand -N memrand_8m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 8m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   2809536                    2809536
#                        max  10433136                    2994086
#                       mean   2937361.26754              2883003.22879
#                     median   2894536                    2878586*
#                     stddev    271888.40025                38087.41252
#             standard error      4687.73104                  710.21040
#       99% confidence level     12075.59516                 1829.50200
#                       skew        19.19258                    0.41648
#                   kurtosis       470.53662                   -0.59140
#           time correlation       116.03119                   45.12201
#
#               elapsed time        20.01409
#                   run time        19.76737
#          getnsecs overhead      1429
#
#          number of samples      3364
#         number of outliers       488
#    number of final samples      2876
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13         2809536 |**                                2811909.07692
#                 11         2813897 |**                                2816354.18182
#                 17         2818258 |***                               2820627.17647
#                 38         2822619 |*******                           2825026.78947
#                 72         2826980 |**************                    2829173.50000
#                 97         2831341 |*******************               2833667.95876
#                109         2835702 |*********************             2838007.10092
#                136         2840063 |***************************       2842155.48529
#                160         2844424 |********************************  2846559.43750
#                140         2848785 |****************************      2851056.00000
#                153         2853146 |******************************    2855400.70588
#                157         2857507 |*******************************   2859434.08917
#                113         2861868 |**********************            2863937.76991
#                 99         2866229 |*******************               2868290.04040
#                 62         2870590 |************                      2872654.54839
#                 67         2874951 |*************                     2877097.94030
#                 69         2879312 |*************                     2881572.95652
#                 51         2883673 |**********                        2885996.78431
#                 78         2888034 |***************                   2889984.07692
#                103         2892395 |********************              2894862.69903
#                123         2896756 |************************          2899061.20325
#                137         2901117 |***************************       2903150.23358
#                121         2905478 |************************          2907488.47934
#                113         2909839 |**********************            2911853.69912
#                 99         2914200 |*******************               2916476.90909
#                 89         2918561 |*****************                 2920710.15730
#                 82         2922922 |****************                  2925157.95122
#                 62         2927283 |************                      2929324.70968
#                 46         2931644 |*********                         2933838.17391
#                 43         2936005 |********                          2938449.95349
#                 43         2940366 |********                          2942720.88372
#                 29         2944727 |*****                             2947017.03448
#
#                144           > 95% |****************************      2966295.02778
#
#        mean of 95%   2878613.03148
#          95th %ile         2949086
#
# Usage: memrand
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memrand')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s size] number of bytes to access (default 1048576)
# notes: measures "random" memory access times
          prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_10   1   1              47        22493        0    14881       10          4k
# bin/../bin-riscv64/memset -N memset_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        44                         44
#                        max     70347                         54
#                       mean        54.62967                   47.87414
#                     median        47                         47*
#                     stddev       525.54007                    1.89173
#             standard error         3.40171                    0.01261
#       99% confidence level         8.76282                    0.03249
#                       skew       119.51607                    1.33688
#                   kurtosis     14892.89673                    1.23645
#           time correlation         0.00190                    0.00026
#
#               elapsed time        20.00433
#                   run time        17.27312
#          getnsecs overhead      1429
#
#          number of samples     23868
#         number of outliers      1375
#    number of final samples     22493
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7              44 |*                                             -
#                295              45 |*                                             -
#               4283              46 |*****************                             -
#               7801              47 |********************************              -
#               5156              48 |*********************                         -
#               1214              49 |****                                          -
#                759              50 |***                                           -
#               1240              51 |*****                                         -
#                613              52 |**                                            -
#
#               1125           > 95% |****                                   52.92889
#
#        mean of 95%        47.60801
#          95th %ile              52
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
           prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_10k   1   1            1170        18624        0      782    10240          4k
# bin/../bin-riscv64/memset -N memset_10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      1083                       1083
#                        max     96927                       1314
#                       mean      1212.86104                 1181.84692
#                     median      1172                       1170*
#                     stddev       816.62278                   44.07613
#             standard error         5.85517                    0.32297
#       99% confidence level        15.08291                    0.83198
#                       skew        98.08099                    0.85889
#                   kurtosis     10699.70460                    0.11741
#           time correlation         0.01622                    0.00773
#
#               elapsed time        20.00489
#                   run time        18.20351
#          getnsecs overhead      1429
#
#          number of samples     19452
#         number of outliers       828
#    number of final samples     18624
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2            1083 |*                                    1084.50000
#                 22            1089 |*                                    1092.27273
#                 72            1095 |*                                    1097.65278
#                 76            1101 |*                                    1103.81579
#                110            1107 |*                                    1109.53636
#                133            1113 |**                                   1115.66917
#                315            1119 |*****                                1122.02540
#                754            1125 |************                         1128.03714
#               1064            1131 |****************                     1133.35714
#                607            1137 |*********                            1139.13180
#                586            1143 |*********                            1145.57509
#                870            1149 |*************                        1151.60345
#               1403            1155 |**********************               1157.58232
#               2008            1161 |********************************     1163.46564
#               1927            1167 |******************************       1169.16035
#               1314            1173 |********************                 1175.32496
#               1070            1179 |*****************                    1181.34953
#                796            1185 |************                         1187.28769
#                531            1191 |********                             1193.22599
#                400            1197 |******                               1199.21750
#                340            1203 |*****                                1205.15882
#                219            1209 |***                                  1211.41553
#                202            1215 |***                                  1217.41584
#                248            1221 |***                                  1223.50806
#                276            1227 |****                                 1229.57246
#                388            1233 |******                               1235.54897
#                437            1239 |******                               1241.61098
#                464            1245 |*******                              1247.46983
#                374            1251 |*****                                1253.30214
#                370            1257 |*****                                1259.51892
#                274            1263 |****                                 1265.36861
#                 40            1269 |*                                    1269.00000
#
#                932           > 95% |**************                       1287.28863
#
#        mean of 95%      1176.29234
#          95th %ile            1269
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
           prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_10m   1   1         2580557          800        0       10 10485760          4k
# bin/../bin-riscv64/memset -N memset_10m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   2061447                    2061447
#                        max   5434897                    3140267
#                       mean   2440220.30424              2433918.93750
#                     median   2580667                    2580557*
#                     stddev    280627.20698               249887.03201
#             standard error      9909.29117                 8834.84074
#       99% confidence level     25526.33405                22758.54975
#                       skew         1.69796                   -0.35499
#                   kurtosis        17.84751                   -1.24252
#           time correlation      1042.84803                 1003.29938
#
#               elapsed time        20.01524
#                   run time        19.57171
#          getnsecs overhead      1429
#
#          number of samples       802
#         number of outliers         2
#    number of final samples       800
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                111         2061447 |************************          2071322.49550
#                 60         2081603 |************                      2089696.50000
#                 23         2101759 |****                              2110870.91304
#                 25         2121915 |*****                             2132145.00000
#                 13         2142071 |**                                2151440.84615
#                 12         2162227 |**                                2173122.83333
#                  8         2182383 |*                                 2190948.25000
#                  5         2202539 |*                                 2214171.00000
#                  9         2222695 |*                                 2233019.22222
#                  4         2242851 |*                                 2252394.50000
#                  2         2263007 |*                                 2279057.00000
#                  8         2283163 |*                                 2293248.25000
#                  4         2303319 |*                                 2313872.00000
#                  3         2323475 |*                                 2330757.00000
#                  2         2343631 |*                                 2358337.00000
#                  6         2363787 |*                                 2369142.00000
#                  5         2383943 |*                                 2393825.00000
#                  7         2404099 |*                                 2412239.85714
#                  6         2424255 |*                                 2428625.33333
#                  2         2444411 |*                                 2456132.00000
#                  1         2464567 |*                                 2476167.00000
#                  0         2484723 |                                              -
#                  3         2504879 |*                                 2515743.66667
#                  4         2525035 |*                                 2541589.50000
#                 32         2545191 |******                            2558260.75000
#                 72         2565347 |***************                   2576125.75000
#                148         2585503 |********************************  2595492.20270
#                100         2605659 |*********************             2614650.80000
#                 44         2625815 |*********                         2634691.31818
#                 22         2645971 |****                              2654025.63636
#                 12         2666127 |**                                2672803.66667
#                  7         2686283 |*                                 2694457.00000
#
#                 40           > 95% |********                          2835660.00000
#
#        mean of 95%   2412774.67105
#          95th %ile         2706437
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
          prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_1k   1   1             149        20405        0     5493     1024          4k
# bin/../bin-riscv64/memset -N memset_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       135                        135
#                        max     88217                        176
#                       mean       160.56673                  150.79348
#                     median       149                        149*
#                     stddev       631.64878                    8.28835
#             standard error         4.34013                    0.05802
#       99% confidence level        11.18017                    0.14947
#                       skew       131.15233                    0.69164
#                   kurtosis     17961.85215                   -0.24541
#           time correlation         0.00396                    0.00136
#
#               elapsed time        20.00472
#                   run time        17.76541
#          getnsecs overhead      1429
#
#          number of samples     21181
#         number of outliers       776
#    number of final samples     20405
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2             135 |*                                             -
#                  9             136 |*                                             -
#                 90             137 |**                                            -
#                248             138 |*****                                         -
#                405             139 |*********                                     -
#                489             140 |***********                                   -
#                659             141 |***************                               -
#               1019             142 |***********************                       -
#               1117             143 |*************************                     -
#               1213             144 |****************************                  -
#               1295             145 |******************************                -
#               1376             146 |********************************              -
#               1180             147 |***************************                   -
#               1071             148 |************************                      -
#                906             149 |*********************                         -
#                644             150 |**************                                -
#                556             151 |************                                  -
#                522             152 |************                                  -
#                532             153 |************                                  -
#                525             154 |************                                  -
#                602             155 |**************                                -
#                636             156 |**************                                -
#                622             157 |**************                                -
#                637             158 |**************                                -
#                597             159 |*************                                 -
#                497             160 |***********                                   -
#                478             161 |***********                                   -
#                415             162 |*********                                     -
#                345             163 |********                                      -
#                276             164 |******                                        -
#                253             165 |*****                                         -
#                168             166 |***                                           -
#
#               1021           > 95% |***********************               170.17630
#
#        mean of 95%       149.77254
#          95th %ile             166
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
          prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_1m   1   1          132557        12884        0       10  1048576          4k
# bin/../bin-riscv64/memset -N memset_1m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1m 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    127577                     127577
#                        max    309287                     146407
#                       mean    137115.00566               134421.64530
#                     median    132797                     132557*
#                     stddev     12286.28949                 3998.20603
#             standard error       104.62955                   35.22409
#       99% confidence level       269.52572                   90.73726
#                       skew         4.10196                    0.86152
#                   kurtosis        19.90810                   -0.43699
#           time correlation         1.93907                    1.00650
#
#               elapsed time        20.00571
#                   run time        18.92651
#          getnsecs overhead      1429
#
#          number of samples     13789
#         number of outliers       905
#    number of final samples     12884
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          127577 |*                                  127577.00000
#                  8          128027 |*                                  128312.00000
#                 15          128477 |*                                  128785.66667
#                 45          128927 |*                                  129220.77778
#                174          129377 |****                               129627.97701
#                445          129827 |**********                         130088.52809
#                867          130277 |********************               130512.70934
#               1144          130727 |**************************         130952.67308
#               1359          131177 |********************************   131395.35173
#               1266          131627 |*****************************      131850.75987
#               1067          132077 |*************************          132287.41237
#                772          132527 |******************                 132738.36010
#                576          132977 |*************                      133191.98264
#                348          133427 |********                           133623.14943
#                183          133877 |****                               134066.89071
#                107          134327 |**                                 134538.30841
#                 70          134777 |*                                  134954.14286
#                 57          135227 |*                                  135429.45614
#                 50          135677 |*                                  135925.20000
#                102          136127 |**                                 136372.58824
#                160          136577 |***                                136813.50000
#                319          137027 |*******                            137272.51724
#                425          137477 |**********                         137703.21176
#                457          137927 |**********                         138148.85996
#                470          138377 |***********                        138593.61702
#                422          138827 |*********                          139039.53555
#                363          139277 |********                           139489.67218
#                278          139727 |******                             139920.66906
#                248          140177 |*****                              140389.13710
#                174          140627 |****                               140845.96552
#                152          141077 |***                                141272.13158
#                115          141527 |**                                 141720.56522
#
#                645           > 95% |***************                    143664.34884
#
#        mean of 95%    133934.55127
#          95th %ile          141947
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
           prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_256   1   1              99        20531        0     8867      256          4k
# bin/../bin-riscv64/memset -N memset_256 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 256 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        64                         64
#                        max     69817                        138
#                       mean       101.57822                   95.18324
#                     median        99                         99*
#                     stddev       497.28197                   14.37919
#             standard error         3.43632                    0.10035
#       99% confidence level         8.85196                    0.25851
#                       skew       133.57115                   -0.94407
#                   kurtosis     18511.71307                    0.09654
#           time correlation         0.00384                    0.00214
#
#               elapsed time        20.00389
#                   run time        18.02334
#          getnsecs overhead      1429
#
#          number of samples     20942
#         number of outliers       411
#    number of final samples     20531
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 68              64 |*                                      64.95588
#               1815              66 |*****************                      66.67052
#               1515              68 |**************                         68.29703
#                164              70 |*                                      70.17683
#                 56              72 |*                                      72.62500
#                227              74 |**                                     74.49780
#                121              76 |*                                      76.42975
#                 64              78 |*                                      78.53125
#                 56              80 |*                                      80.44643
#                 27              82 |*                                      82.22222
#                 17              84 |*                                      84.41176
#                 11              86 |*                                      86.63636
#                  5              88 |*                                      88.60000
#                  6              90 |*                                      90.33333
#                133              92 |*                                      92.85714
#               1328              94 |*************                          94.67771
#               1851              96 |******************                     96.49001
#               3256              98 |********************************       98.56542
#               2815             100 |***************************           100.39574
#               1714             102 |****************                      102.53967
#               1983             104 |*******************                   104.46041
#               1158             106 |***********                           106.41278
#                736             108 |*******                               108.46875
#                378             110 |***                                   110.20635
#
#               1027           > 95% |**********                            117.44012
#
#        mean of 95%        94.01128
#          95th %ile             111
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
             prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_256_u   1   1              92        20582        0     8976      256           1
# bin/../bin-riscv64/memset -N memset_256_u -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 256 -a 1 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        82                         82
#                        max     53757                        106
#                       mean        98.43810                   92.33996
#                     median        92                         92*
#                     stddev       389.32687                    4.48016
#             standard error         2.66145                    0.03123
#       99% confidence level         6.85588                    0.08044
#                       skew       127.51143                    0.40973
#                   kurtosis     17106.38397                    0.42449
#           time correlation         0.00232                    0.00070
#
#               elapsed time        20.00534
#                   run time        17.96336
#          getnsecs overhead      1429
#
#          number of samples     21399
#         number of outliers       817
#    number of final samples     20582
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 26              82 |*                                             -
#                162              83 |*                                             -
#                492              84 |***                                           -
#               1055              85 |*******                                       -
#               1003              86 |*******                                       -
#                527              87 |***                                           -
#                276              88 |**                                            -
#                160              89 |*                                             -
#                798              90 |*****                                         -
#               3521              91 |*************************                     -
#               4395              92 |********************************              -
#               2716              93 |*******************                           -
#               1315              94 |*********                                     -
#                435              95 |***                                           -
#                191              96 |*                                             -
#                234              97 |*                                             -
#                741              98 |*****                                         -
#                848              99 |******                                        -
#                632             100 |****                                          -
#                 25             101 |*                                             -
#
#               1030           > 95% |*******                               102.81748
#
#        mean of 95%        91.78800
#          95th %ile             101
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
          prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_4k   1   1             506        18756        0     1846     4096          4k
# bin/../bin-riscv64/memset -N memset_4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       448                        448
#                        max     70357                        581
#                       mean       518.32551                  506.52421
#                     median       507                        506*
#                     stddev       528.90996                   24.74414
#             standard error         3.80363                    0.18068
#       99% confidence level         9.79815                    0.46542
#                       skew       122.23493                    0.39557
#                   kurtosis     15842.28291                   -0.32986
#           time correlation         0.00772                    0.00449
#
#               elapsed time        20.00510
#                   run time        18.28534
#          getnsecs overhead      1429
#
#          number of samples     19336
#         number of outliers       580
#    number of final samples     18756
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4             448 |*                                     449.75000
#                 21             452 |*                                     453.61905
#                 61             456 |*                                     457.77049
#                190             460 |****                                  461.92105
#                305             464 |******                                465.75082
#                484             468 |***********                           469.67149
#                707             472 |****************                      473.54031
#                912             476 |********************                  477.57127
#               1161             480 |**************************            481.56675
#               1157             484 |**************************            485.52463
#               1175             488 |**************************            489.49787
#               1034             492 |***********************               493.40909
#                769             496 |*****************                     497.49675
#                839             500 |*******************                   501.51013
#                917             504 |********************                  505.54308
#                894             508 |********************                  509.61857
#               1143             512 |**************************            513.53718
#               1406             516 |********************************      517.53983
#               1318             520 |*****************************         521.28073
#                816             524 |******************                    525.46569
#                608             528 |*************                         529.32566
#                433             532 |*********                             533.52887
#                449             536 |**********                            537.47439
#                373             540 |********                              541.44504
#                356             544 |********                              545.42697
#                286             548 |******                                549.43007
#
#                938           > 95% |*********************                 561.85181
#
#        mean of 95%       503.61157
#          95th %ile             551
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
             prc thr      nsecs/call      samples   errors cnt/samp     size       alignment
memset_4k_uc   1   1             763        17083        0     1127     4096          4k
# bin/../bin-riscv64/memset -N memset_4k_uc -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -u 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       623                        623
#                        max    118036                       1064
#                       mean       833.54826                  804.89967
#                     median       767                        763*
#                     stddev       899.69566                   86.40859
#             standard error         6.71845                    0.66111
#       99% confidence level        17.30673                    1.70302
#                       skew       123.70134                    1.01505
#                   kurtosis     16062.41379                   -0.19518
#           time correlation         0.02326                    0.01610
#
#               elapsed time        20.05348
#                   run time        16.67318
#          getnsecs overhead      1429
#
#          number of samples     17933
#         number of outliers       850
#    number of final samples     17083
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3             623 |*                                     625.66667
#                  1             635 |*                                     638.00000
#                  1             647 |*                                     649.00000
#                  1             659 |*                                     664.00000
#                  1             671 |*                                     675.00000
#                  4             683 |*                                     689.75000
#                 81             695 |*                                     702.81481
#                320             707 |**                                    713.20625
#               1432             719 |************                          726.45042
#               3667             731 |********************************      736.24489
#               1905             743 |****************                      748.09134
#               1489             755 |************                          759.85091
#               1015             767 |********                              772.15862
#                629             779 |*****                                 784.06359
#                417             791 |***                                   795.98801
#                333             803 |**                                    807.99700
#                220             815 |*                                     820.52727
#                166             827 |*                                     832.38554
#                259             839 |**                                    845.39768
#                566             851 |****                                  856.91873
#                617             863 |*****                                 868.52188
#                534             875 |****                                  880.19850
#                408             887 |***                                   892.37990
#                343             899 |**                                    903.89796
#                338             911 |**                                    916.64497
#                306             923 |**                                    928.30065
#                263             935 |**                                    940.26996
#                222             947 |*                                     952.39640
#                329             959 |**                                    964.92097
#                358             971 |***                                   975.62849
#
#                855           > 95% |*******                              1007.15556
#
#        mean of 95%       794.24347
#          95th %ile             981
#
# Usage: memset
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'memset')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s buffer-size (default 8192)]
#     [-a alignment (force buffer alignment)]
#     [-u (try to always use uncached memory)]notes: measures memset()
       prc thr      nsecs/call      samples   errors cnt/samp 
mktime   1   1          186067         5681        0       10 
# bin/../bin-riscv64/mktime -N mktime -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    176427                     176427
#                        max    899327                     211337
#                       mean    191120.77920               188445.18518
#                     median    189067                     186067*
#                     stddev     20942.96717                 7665.11887
#             standard error       271.48337                  101.69662
#       99% confidence level       699.34117                  261.97048
#                       skew        15.64890                    0.51887
#                   kurtosis       418.71481                   -0.84659
#           time correlation         6.54254                    4.50327
#
#               elapsed time        20.00692
#                   run time        11.38211
#          getnsecs overhead      1429
#
#          number of samples      5951
#         number of outliers       270
#    number of final samples      5681
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6          176427 |*                                  176765.33333
#                 16          177215 |*                                  177642.62500
#                 56          178003 |**                                 178452.89286
#                115          178791 |*****                              179254.91304
#                347          179579 |*****************                  180004.92507
#                578          180367 |****************************       180786.65398
#                652          181155 |********************************   181546.53988
#                526          181943 |*************************          182317.09506
#                299          182731 |**************                     183085.92977
#                141          183519 |******                             183861.11348
#                 62          184307 |***                                184682.48387
#                 32          185095 |*                                  185407.62500
#                 30          185883 |*                                  186213.66667
#                 29          186671 |*                                  187071.82759
#                 27          187459 |*                                  187869.59259
#                 54          188247 |**                                 188698.85185
#                 87          189035 |****                               189465.73563
#                142          189823 |******                             190225.59155
#                174          190611 |********                           191002.68966
#                186          191399 |*********                          191801.19355
#                214          192187 |**********                         192565.78505
#                201          192975 |*********                          193372.37313
#                244          193763 |***********                        194177.00000
#                231          194551 |***********                        194951.54545
#                196          195339 |*********                          195711.94898
#                185          196127 |*********                          196511.00000
#                172          196915 |********                           197300.54651
#                124          197703 |******                             198040.30645
#                 86          198491 |****                               198898.27907
#                 73          199279 |***                                199598.50685
#                 56          200067 |**                                 200476.64286
#                 55          200855 |**                                 201245.72727
#
#                285           > 95% |*************                      205003.35088
#
#        mean of 95%    187570.63417
#          95th %ile          201617
#
# WARNINGS
#     Actual benchmark run time only accounts for 56.9% of elapsed time.
#
# Usage: mktime
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mktime')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures mktime()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_a128k   1   1           45062         5156        0       13   131072   a---
# bin/../bin-riscv64/mmap -N mmap_a128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     39355                      39355
#                        max   1368448                     168005
#                       mean     67208.34575                62121.36986
#                     median     45219                      45062*
#                     stddev     56898.31091                35385.54337
#             standard error       784.44992                  492.79854
#       99% confidence level      2020.74299                 1269.44905
#                       skew         6.77975                    1.73235
#                   kurtosis        90.81738                    1.28979
#           time correlation        22.45291                   17.76812
#
#               elapsed time        20.02595
#                   run time         4.83016
#          getnsecs overhead      1429
#
#          number of samples      5261
#         number of outliers       105
#    number of final samples      5156
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#               1001           39355 |*****************                   41525.32767
#               1871           42622 |********************************    44010.47622
#                547           45889 |*********                           47184.81901
#                263           49156 |****                                50737.29658
#                234           52423 |****                                53967.35897
#                122           55690 |**                                  57194.95902
#                 83           58957 |*                                   60437.97590
#                 43           62224 |*                                   63410.06977
#                 26           65491 |*                                   66794.30769
#                 20           68758 |*                                   69905.75000
#                 24           72025 |*                                   73551.41667
#                  7           75292 |*                                   76901.71429
#                  9           78559 |*                                   80634.55556
#                  2           81826 |*                                   82663.00000
#                  3           85093 |*                                   86728.00000
#                  7           88360 |*                                   89649.14286
#                 10           91627 |*                                   92917.90000
#                  5           94894 |*                                   96713.20000
#                  9           98161 |*                                   99626.11111
#                 10          101428 |*                                  102880.80000
#                  7          104695 |*                                  106089.71429
#                  9          107962 |*                                  109610.33333
#                 11          111229 |*                                  112919.54545
#                 12          114496 |*                                  116564.66667
#                  5          117763 |*                                  119767.00000
#                 26          121030 |*                                  123122.65385
#                 58          124297 |*                                  125949.53448
#                 84          127564 |*                                  129255.90476
#                110          130831 |*                                  132529.96364
#                 98          134098 |*                                  135759.17347
#                101          137365 |*                                  138956.67327
#                 81          140632 |*                                  142222.20988
#
#                258           > 95% |****                               153329.46899
#
#        mean of 95%     57317.02327
#          95th %ile          143869
#
# WARNINGS
#     Actual benchmark run time only accounts for 24.1% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
         prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_a8k   1   1           44984         4925        0       14     8192   a---
# bin/../bin-riscv64/mmap -N mmap_a8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     39462                      39462
#                        max   1496185                     162038
#                       mean     65795.67647                60712.09056
#                     median     45119                      44984*
#                     stddev     57259.18818                33792.59786
#             standard error       807.18832                  481.52458
#       99% confidence level      2079.31712                 1240.40732
#                       skew         8.36311                    1.86578
#                   kurtosis       134.63785                    1.79047
#           time correlation        22.21234                   17.30982
#
#               elapsed time        20.00912
#                   run time         4.76538
#          getnsecs overhead      1429
#
#          number of samples      5032
#         number of outliers       107
#    number of final samples      4925
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                904           39462 |***************                     41745.81305
#               1927           42719 |********************************    44113.92008
#                490           45976 |********                            47356.28980
#                283           49233 |****                                50857.97527
#                223           52490 |***                                 54057.74888
#                128           55747 |**                                  57243.36719
#                 61           59004 |*                                   60254.67213
#                 42           62261 |*                                   63834.59524
#                 23           65518 |*                                   66905.47826
#                 15           68775 |*                                   70415.06667
#                 15           72032 |*                                   73642.40000
#                  5           75289 |*                                   76560.20000
#                  5           78546 |*                                   79572.80000
#                  3           81803 |*                                   83975.00000
#                  6           85060 |*                                   87083.83333
#                  5           88317 |*                                   90639.80000
#                 10           91574 |*                                   93493.10000
#                  9           94831 |*                                   96094.00000
#                 12           98088 |*                                   99685.58333
#                 11          101345 |*                                  102903.27273
#                 14          104602 |*                                  106081.85714
#                 10          107859 |*                                  109590.80000
#                 11          111116 |*                                  112768.72727
#                 12          114373 |*                                  115910.58333
#                 11          117630 |*                                  118847.63636
#                 11          120887 |*                                  122474.36364
#                 44          124144 |*                                  126081.40909
#                 86          127401 |*                                  129035.09302
#                110          130658 |*                                  132331.48182
#                 65          133915 |*                                  135382.58462
#                 70          137172 |*                                  138841.34286
#                 57          140429 |*                                  141700.89474
#
#                247           > 95% |****                               151520.75304
#
#        mean of 95%     55917.36212
#          95th %ile          143684
#
# WARNINGS
#     Actual benchmark run time only accounts for 23.8% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_ra128k   1   1          630171        13195        0        1   131072   ar--
# bin/../bin-riscv64/mmap -N mmap_ra128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    594671                     594671
#                        max  24684371                     674571
#                       mean    733821.74495               632487.60477
#                     median    637371                     630171*
#                     stddev    489966.30576                14032.55065
#             standard error      3644.40860                  122.16081
#       99% confidence level      9387.99654                  314.68626
#                       skew        18.06092                    0.65426
#                   kurtosis       509.01447                    0.12134
#           time correlation        31.20151                    3.55417
#
#               elapsed time        20.00447
#                   run time        13.29197
#          getnsecs overhead      1429
#
#          number of samples     18075
#         number of outliers      4880
#    number of final samples     13195
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2          594671 |*                                  595521.00000
#                  4          596718 |*                                  597896.00000
#                 11          598765 |*                                  599952.81818
#                 12          600812 |*                                  602096.00000
#                 24          602859 |*                                  604091.83333
#                 53          604906 |*                                  605961.56604
#                122          606953 |****                               608146.40984
#                178          609000 |******                             610088.41573
#                266          611047 |*********                          612147.69173
#                387          613094 |*************                      614176.94315
#                535          615141 |*******************                616228.57009
#                586          617188 |*********************              618209.05461
#                700          619235 |*************************          620314.71429
#                719          621282 |*************************          622352.50209
#                883          623329 |*******************************    624385.04304
#                888          625376 |********************************   626401.06757
#                877          627423 |*******************************    628443.74800
#                865          629470 |*******************************    630425.10405
#                745          631517 |**************************         632513.01342
#                658          633564 |***********************            634547.44377
#                591          635611 |*********************              636590.96616
#                578          637658 |********************               638646.25952
#                487          639705 |*****************                  640677.98152
#                433          641752 |***************                    642784.85681
#                329          643799 |***********                        644832.39818
#                317          645846 |***********                        646806.64669
#                300          647893 |**********                         648947.33333
#                297          649940 |**********                         650956.52189
#                208          651987 |*******                            653070.03846
#                169          654034 |******                             654980.46746
#                163          656081 |*****                              657091.24540
#                148          658128 |*****                              659223.02703
#
#                660           > 95% |***********************            666365.69697
#
#        mean of 95%    630703.83606
#          95th %ile          660171
#
# WARNINGS
#     Actual benchmark run time only accounts for 66.4% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_ra8k   1   1          134943         5785        0        4     8192   ar--
# bin/../bin-riscv64/mmap -N mmap_ra8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    104536                     104536
#                        max   3120068                     469743
#                       mean    204017.69351               183660.58254
#                     median    136574                     134943*
#                     stddev    165190.17960                95520.75931
#             standard error      2133.12940                 1255.87404
#       99% confidence level      5494.94133                 3235.13154
#                       skew         6.31014                    1.42090
#                   kurtosis        74.35545                    0.65586
#           time correlation        63.41008                   48.49375
#
#               elapsed time        20.01515
#                   run time         5.03725
#          getnsecs overhead      1429
#
#          number of samples      5997
#         number of outliers       212
#    number of final samples      5785
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                566          104536 |**************                     110626.92756
#               1270          113667 |********************************   118122.76457
#                867          122798 |*********************              127041.79815
#                521          131929 |*************                      136184.91555
#                260          141060 |******                             145175.93462
#                224          150191 |*****                              154801.43304
#                165          159322 |****                               163650.83030
#                137          168453 |***                                172634.45985
#                134          177584 |***                                182164.12687
#                111          186715 |**                                 190866.63964
#                 68          195846 |*                                  200825.52941
#                 55          204977 |*                                  209820.09091
#                 59          214108 |*                                  218863.27119
#                 35          223239 |*                                  227477.40000
#                 40          232370 |*                                  237516.30000
#                 65          241501 |*                                  246162.92308
#                 63          250632 |*                                  254920.69841
#                 42          259763 |*                                  264154.97619
#                 59          268894 |*                                  273234.25424
#                 36          278025 |*                                  282182.16667
#                 41          287156 |*                                  291294.53659
#                 28          296287 |*                                  300830.21429
#                 21          305418 |*                                  310212.04762
#                 19          314549 |*                                  318803.47368
#                 37          323680 |*                                  328659.83784
#                 88          332811 |**                                 337705.55682
#                138          341942 |***                                346535.94928
#                 90          351073 |**                                 355680.13333
#                 87          360204 |**                                 364618.49425
#                 59          369335 |*                                  373779.94915
#                 55          378466 |*                                  383268.23636
#                 55          387597 |*                                  391891.23636
#
#                290           > 95% |*******                            427631.18966
#
#        mean of 95%    170784.97270
#          95th %ile          396718
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 25.2% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_rt128k   1   1         1056471        11576        0        1   131072   -r--
# bin/../bin-riscv64/mmap -N mmap_rt128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1001771                    1001771
#                        max   4311171                    1379671
#                       mean   1198994.62856              1102594.42778
#                     median   1061071                    1056471*
#                     stddev    419524.63744                92368.67507
#             standard error      3731.50419                  858.51019
#       99% confidence level      9612.35480                 2211.52225
#                       skew         4.51825                    1.28197
#                   kurtosis        20.84194                    0.34891
#           time correlation        62.02996                   24.08342
#
#               elapsed time        20.00417
#                   run time        15.17476
#          getnsecs overhead      1429
#
#          number of samples     12640
#         number of outliers      1064
#    number of final samples     11576
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 62         1001771 |*                                 1008566.16129
#                217         1011109 |***                               1017187.58986
#                862         1020447 |***************                   1025782.48492
#               1545         1029785 |***************************       1034862.45631
#               1770         1039123 |********************************  1043699.81356
#               1497         1048461 |***************************       1052798.72211
#                969         1057799 |*****************                 1062097.41899
#                571         1067137 |**********                        1071472.57618
#                331         1076475 |*****                             1080825.68278
#                226         1085813 |****                              1090231.17699
#                141         1095151 |**                                1099705.04255
#                100         1104489 |*                                 1109074.00000
#                 80         1113827 |*                                 1118322.25000
#                 69         1123165 |*                                 1128044.91304
#                 63         1132503 |*                                 1137678.93651
#                 80         1141841 |*                                 1146468.50000
#                 90         1151179 |*                                 1155453.22222
#                106         1160517 |*                                 1165337.03774
#                129         1169855 |**                                1174505.88372
#                125         1179193 |**                                1183841.40000
#                172         1188531 |***                               1193318.09302
#                213         1197869 |***                               1202727.80751
#                205         1207207 |***                               1211961.73171
#                218         1216545 |***                               1221199.44037
#                208         1225883 |***                               1230625.32692
#                154         1235221 |**                                1239883.33766
#                158         1244559 |**                                1249313.40506
#                153         1253897 |**                                1258446.16340
#                128         1263235 |**                                1267714.75000
#                125         1272573 |**                                1277316.60000
#                143         1281911 |**                                1286257.71329
#                 87         1291249 |*                                 1295781.34483
#
#                579           > 95% |**********                        1336012.27807
#
#        mean of 95%   1090304.80922
#          95th %ile         1300571
#
# WARNINGS
#     Actual benchmark run time only accounts for 75.9% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_rt8k   1   1          181290         6676        0        3     8192   -r--
# bin/../bin-riscv64/mmap -N mmap_rt8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    139686                     139686
#                        max   1758724                     243993
#                       mean    243726.75614               185435.80782
#                     median    186918                     181290*
#                     stddev    140461.16222                19521.78461
#             standard error      1536.86251                  238.92487
#       99% confidence level      3958.95783                  615.47046
#                       skew         2.76346                    0.90999
#                   kurtosis        10.12120                    0.41471
#           time correlation        40.99517                    9.56549
#
#               elapsed time        20.00638
#                   run time         7.03927
#          getnsecs overhead      1429
#
#          number of samples      8353
#         number of outliers      1677
#    number of final samples      6676
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10          139686 |*                                  141106.00000
#                  7          142424 |*                                  143414.57143
#                 12          145162 |*                                  146890.16667
#                 12          147900 |*                                  148731.83333
#                 17          150638 |*                                  152340.05882
#                 51          153376 |***                                155049.49020
#                125          156114 |********                           157637.23200
#                164          158852 |**********                         160283.72561
#                240          161590 |***************                    162936.18333
#                315          164328 |********************               165770.75556
#                377          167066 |************************           168497.80106
#                471          169804 |*******************************    171167.50955
#                485          172542 |********************************   173978.87216
#                472          175280 |*******************************    176623.56144
#                484          178018 |*******************************    179391.90083
#                484          180756 |*******************************    182082.30372
#                362          183494 |***********************            184729.86740
#                371          186232 |************************           187570.99461
#                319          188970 |*********************              190267.06270
#                235          191708 |***************                    193027.44681
#                204          194446 |*************                      195747.87745
#                165          197184 |**********                         198550.15758
#                123          199922 |********                           201228.86992
#                131          202660 |********                           204010.32061
#                111          205398 |*******                            206697.78378
#                 81          208136 |*****                              209333.40741
#                 86          210874 |*****                              212282.82558
#                 98          213612 |******                             215011.75510
#                 85          216350 |*****                              217854.43529
#                 87          219088 |*****                              220484.81609
#                 88          221826 |*****                              223110.87500
#                 70          224564 |****                               225926.82857
#
#                334           > 95% |**********************             234401.17365
#
#        mean of 95%    182857.05787
#          95th %ile          227293
#
# WARNINGS
#     Actual benchmark run time only accounts for 35.2% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_rz128k   1   1          654471        14434        0        1   131072   -r--
# bin/../bin-riscv64/mmap -N mmap_rz128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    607671                     607671
#                        max   3792571                     856571
#                       mean    763177.80897               679022.62117
#                     median    664071                     654471*
#                     stddev    259497.23675                59189.22288
#             standard error      1968.99825                  492.66225
#       99% confidence level      5072.13949                 1269.09796
#                       skew         4.09077                    1.45162
#                   kurtosis        20.63484                    1.00508
#           time correlation        33.18471                   12.36726
#
#               elapsed time        20.00445
#                   run time        13.28272
#          getnsecs overhead      1429
#
#          number of samples     17369
#         number of outliers      2935
#    number of final samples     14434
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7          607671 |*                                  612385.28571
#                134          614278 |**                                 618647.11940
#                683          620885 |*************                      625026.92972
#               1555          627492 |*****************************      630987.33441
#               1664          634099 |********************************   637362.22596
#               1662          640706 |*******************************    643963.35860
#               1420          647313 |***************************        650500.15493
#               1100          653920 |*********************              657075.00000
#                813          660527 |***************                    663718.60148
#                609          667134 |***********                        670178.06076
#                467          673741 |********                           676917.25268
#                339          680348 |******                             683484.86431
#                299          686955 |*****                              690255.61538
#                256          693562 |****                               696846.78125
#                224          700169 |****                               703339.30357
#                199          706776 |***                                709990.59799
#                169          713383 |***                                716927.80473
#                172          719990 |***                                723372.16279
#                150          726597 |**                                 729908.33333
#                140          733204 |**                                 736508.85714
#                136          739811 |**                                 743259.23529
#                137          746418 |**                                 749601.65693
#                136          753025 |**                                 756257.76471
#                127          759632 |**                                 762933.99213
#                110          766239 |**                                 769465.54545
#                140          772846 |**                                 776242.42857
#                125          779453 |**                                 782835.00000
#                170          786060 |***                                789071.58824
#                152          792667 |**                                 796296.00000
#                134          799274 |**                                 802390.40299
#                150          805881 |**                                 809161.00000
#                133          812488 |**                                 815513.85714
#
#                722           > 95% |*************                      836332.35734
#
#        mean of 95%    670739.53851
#          95th %ile          819071
#
# WARNINGS
#     Actual benchmark run time only accounts for 66.4% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_rz8k   1   1          172293         6266        0        3     8192   -r--
# bin/../bin-riscv64/mmap -N mmap_rz8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    118836                     118836
#                        max   2244968                     259457
#                       mean    243098.04405               178479.61810
#                     median    184168                     172293*
#                     stddev    143246.23115                27093.35199
#             standard error      1588.88095                  342.26898
#       99% confidence level      4092.95732                  881.68490
#                       skew         2.99546                    0.82398
#                   kurtosis        17.18857                    0.12004
#           time correlation        46.36288                   14.33778
#
#               elapsed time        20.00826
#                   run time         7.61166
#          getnsecs overhead      1429
#
#          number of samples      8128
#         number of outliers      1862
#    number of final samples      6266
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9          118836 |*                                  120780.44444
#                  6          122425 |*                                  124077.66667
#                  6          126014 |*                                  128531.83333
#                 15          129603 |*                                  131258.33333
#                 32          133192 |**                                 135113.68750
#                 72          136781 |*****                              138793.12500
#                138          140370 |*********                          142461.66667
#                211          143959 |***************                    145925.43602
#                310          147548 |**********************             149483.78710
#                386          151137 |***************************        152923.33420
#                418          154726 |*****************************      156491.33254
#                450          158315 |********************************   160096.52222
#                398          161904 |****************************       163703.09799
#                364          165493 |*************************          167269.69780
#                354          169082 |*************************          170800.56497
#                306          172671 |*********************              174423.26471
#                272          176260 |*******************                178052.96691
#                269          179849 |*******************                181578.21190
#                260          183438 |******************                 185286.05385
#                231          187027 |****************                   188788.32900
#                191          190616 |*************                      192412.15707
#                178          194205 |************                       196071.93258
#                173          197794 |************                       199610.35260
#                146          201383 |**********                         203140.76027
#                124          204972 |********                           206736.86290
#                141          208561 |**********                         210236.58156
#                111          212150 |*******                            213894.54054
#                 92          215739 |******                             217573.08696
#                 72          219328 |*****                              220941.58333
#                 73          222917 |*****                              224542.67123
#                 71          226506 |*****                              228179.70423
#                 73          230095 |*****                              231853.97260
#
#                314           > 95% |**********************             245055.88854
#
#        mean of 95%    174967.36190
#          95th %ile          233668
#
# WARNINGS
#     Actual benchmark run time only accounts for 38.0% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_t128k   1   1           77346         8494        0        8   131072   ----
# bin/../bin-riscv64/mmap -N mmap_t128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     65243                      65243
#                        max   1797139                     111909
#                       mean    114470.49387                80513.94161
#                     median     81763                      77346*
#                     stddev     89672.37303                10478.65934
#             standard error       854.87596                  113.69715
#       99% confidence level      2202.16048                  292.88387
#                       skew         5.88554                    1.04177
#                   kurtosis        61.76060                    0.33801
#           time correlation        17.66978                    4.01160
#
#               elapsed time        20.01148
#                   run time        10.63796
#          getnsecs overhead      1429
#
#          number of samples     11003
#         number of outliers      2509
#    number of final samples      8494
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 28           65243 |*                                   65963.21429
#                137           66421 |*******                             67096.29927
#                283           67599 |**************                      68227.50530
#                409           68777 |*********************               69419.31540
#                567           69955 |*****************************       70567.71252
#                623           71133 |********************************    71736.83467
#                590           72311 |******************************      72900.83898
#                529           73489 |***************************         74060.55198
#                477           74667 |************************            75238.29560
#                465           75845 |***********************             76419.26237
#                445           77023 |**********************              77591.44270
#                317           78201 |****************                    78771.45110
#                352           79379 |******************                  79938.31534
#                270           80557 |*************                       81134.68148
#                262           81735 |*************                       82313.52672
#                252           82913 |************                        83514.07540
#                229           84091 |***********                         84667.11790
#                190           85269 |*********                           85838.25263
#                167           86447 |********                            87038.23353
#                155           87625 |*******                             88231.72258
#                165           88803 |********                            89386.23030
#                159           89981 |********                            90550.77987
#                141           91159 |*******                             91740.73050
#                123           92337 |******                              92962.15447
#                127           93515 |******                              94031.88976
#                107           94693 |*****                               95298.90654
#                104           95871 |*****                               96405.91346
#                101           97049 |*****                               97628.83168
#                 76           98227 |***                                 98795.48684
#                 76           99405 |***                                 99978.01316
#                 82          100583 |****                               101189.19512
#                 61          101761 |***                                102383.62295
#
#                425           > 95% |*********************              107228.95529
#
#        mean of 95%     79106.84273
#          95th %ile          102934
#
# WARNINGS
#     Actual benchmark run time only accounts for 53.2% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
         prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_t8k   1   1           97229         5669        0        5     8192   ----
# bin/../bin-riscv64/mmap -N mmap_t8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     65979                      65979
#                        max   1309695                     355512
#                       mean    142429.47092               134903.37608
#                     median     98629                      97229*
#                     stddev     89107.79693                74058.49602
#             standard error      1168.83418                  983.60711
#       99% confidence level      3010.91685                 2533.77192
#                       skew         2.02540                    1.11002
#                   kurtosis         8.86303                   -0.06475
#           time correlation        45.32939                   40.64725
#
#               elapsed time        20.01632
#                   run time         4.85609
#          getnsecs overhead      1429
#
#          number of samples      5812
#         number of outliers       143
#    number of final samples      5669
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                450           65979 |*************                       70675.46000
#               1079           72851 |********************************    76178.39666
#                724           79723 |*********************               82880.87707
#                404           86595 |***********                         89863.61634
#                311           93467 |*********                           96729.86174
#                272          100339 |********                           103529.75000
#                208          107211 |******                             110497.08654
#                159          114083 |****                               117071.70440
#                105          120955 |***                                124313.06667
#                 70          127827 |**                                 131018.17143
#                 64          134699 |*                                  137685.89062
#                 54          141571 |*                                  144861.11111
#                 34          148443 |*                                  151358.50000
#                 46          155315 |*                                  158893.08696
#                 66          162187 |*                                  165765.43939
#                 60          169059 |*                                  172633.60000
#                 86          175931 |**                                 179013.36047
#                 65          182803 |*                                  186261.49231
#                 73          189675 |**                                 193077.34247
#                 88          196547 |**                                 199998.05682
#                 70          203419 |**                                 207050.01429
#                 62          210291 |*                                  214097.00000
#                 91          217163 |**                                 221036.13187
#                133          224035 |***                                227444.55639
#                108          230907 |***                                234327.13889
#                 83          237779 |**                                 241281.40964
#                103          244651 |***                                247892.13592
#                 82          251523 |**                                 255086.39024
#                 64          258395 |*                                  261262.82812
#                 63          265267 |*                                  268403.14286
#                 51          272139 |*                                  275385.50980
#                 57          279011 |*                                  282794.49123
#
#                284           > 95% |********                           313720.20070
#
#        mean of 95%    125472.73946
#          95th %ile          285862
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 24.3% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_wa128k   1   1         2163571         4309        0        1   131072   a-w-
# bin/../bin-riscv64/mmap -N mmap_wa128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1231771                    1792371
#                        max   6802371                    2599571
#                       mean   2168974.56333              2179702.74751
#                     median   2158271                    2163571*
#                     stddev    365600.06042               140186.50438
#             standard error      5298.55160                 2135.59040
#       99% confidence level     13649.06892                 5501.28086
#                       skew         4.40116                    0.60570
#                   kurtosis        51.07881                   -0.13920
#           time correlation       185.79578                  109.63010
#
#               elapsed time        20.00819
#                   run time        10.33721
#          getnsecs overhead      1429
#
#          number of samples      4761
#         number of outliers       452
#    number of final samples      4309
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         1792371 |*                                 1792371.00000
#                  1         1812803 |*                                 1830771.00000
#                  0         1833235 |                                              -
#                  4         1853667 |*                                 1860046.00000
#                  1         1874099 |*                                 1889071.00000
#                  1         1894531 |*                                 1902971.00000
#                  0         1914963 |                                              -
#                  5         1935395 |*                                 1951751.00000
#                 72         1955827 |********                          1968477.94444
#                227         1976259 |**************************        1987984.21586
#                260         1996691 |******************************    2006556.38462
#                214         2017123 |*************************         2026785.95327
#                164         2037555 |*******************               2048408.19512
#                200         2057987 |***********************           2068570.00000
#                206         2078419 |************************          2088559.34951
#                236         2098851 |***************************       2109142.18644
#                271         2119283 |********************************  2129770.26199
#                249         2139715 |*****************************     2150117.58635
#                259         2160147 |******************************    2170136.25097
#                260         2180579 |******************************    2190381.76923
#                221         2201011 |**************************        2210487.28959
#                193         2221443 |**********************            2231546.64767
#                162         2241875 |*******************               2251444.45679
#                152         2262307 |*****************                 2272096.00000
#                131         2282739 |***************                   2292809.16794
#                122         2303171 |**************                    2313483.29508
#                109         2323603 |************                      2334691.18349
#                 90         2344035 |**********                        2353368.77778
#                 92         2364467 |**********                        2375192.73913
#                 61         2384899 |*******                           2395010.34426
#                 75         2405331 |********                          2415820.33333
#                 54         2425763 |******                            2435798.77778
#
#                216           > 95% |*************************         2509262.66667
#
#        mean of 95%   2162310.87295
#          95th %ile         2446171
#
# WARNINGS
#     Actual benchmark run time only accounts for 51.7% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_wa8k   1   1          182368         5070        0        3     8192   a-w-
# bin/../bin-riscv64/mmap -N mmap_wa8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    150568                     150568
#                        max   1683893                     258618
#                       mean    236075.96092               189293.23511
#                     median    188868                     182368*
#                     stddev    128481.37443                23117.19608
#             standard error      1639.53475                  324.66179
#       99% confidence level      4223.44151                  836.32877
#                       skew         3.66757                    0.92788
#                   kurtosis        19.89336                    0.10725
#           time correlation        48.87554                   14.98861
#
#               elapsed time        20.00757
#                   run time         5.80091
#          getnsecs overhead      1429
#
#          number of samples      6141
#         number of outliers      1071
#    number of final samples      5070
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          150568 |*                                  151856.25000
#                 28          153263 |**                                 154900.32143
#                 67          155958 |******                             157570.55224
#                135          158653 |************                       160111.85185
#                192          161348 |*****************                  162738.11458
#                234          164043 |*********************              165341.75214
#                302          166738 |****************************       168174.32450
#                340          169433 |*******************************    170804.30294
#                330          172128 |******************************     173516.20000
#                315          174823 |*****************************      176131.34286
#                342          177518 |********************************   178808.71637
#                290          180213 |***************************        181454.54138
#                239          182908 |**********************             184138.92050
#                213          185603 |*******************                186930.46948
#                159          188298 |**************                     189543.64780
#                157          190993 |**************                     192311.78981
#                148          193688 |*************                      195006.85135
#                140          196383 |*************                      197834.37857
#                110          199078 |**********                         200388.58182
#                109          201773 |**********                         203086.04587
#                117          204468 |**********                         205820.31624
#                119          207163 |***********                        208400.31933
#                 91          209858 |********                           211118.00000
#                 97          212553 |*********                          213790.56701
#                 96          215248 |********                           216525.29167
#                 62          217943 |*****                              219078.88710
#                 76          220638 |*******                            221977.21053
#                 72          223333 |******                             224731.19444
#                 67          226028 |******                             227319.11940
#                 62          228723 |*****                              230045.01613
#                 51          231418 |****                               232633.19608
#                 52          234113 |****                               235424.25000
#
#                254           > 95% |***********************            246233.45276
#
#        mean of 95%    186290.15885
#          95th %ile          236793
#
# WARNINGS
#     Actual benchmark run time only accounts for 29.0% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_wt128k   1   1         1615971         8408        0        1   131072   --w-
# bin/../bin-riscv64/mmap -N mmap_wt128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1434471                    1434471
#                        max   6847271                    2024271
#                       mean   1711450.65473              1637750.33099
#                     median   1631571                    1615971*
#                     stddev    410028.42323               129006.93401
#             standard error      4337.77164                 1406.91125
#       99% confidence level     11174.09974                 3624.20338
#                       skew         6.13196                    0.73937
#                   kurtosis        46.28561                   -0.23854
#           time correlation        90.57668                   51.33140
#
#               elapsed time        20.00375
#                   run time        15.30638
#          getnsecs overhead      1429
#
#          number of samples      8935
#         number of outliers       527
#    number of final samples      8408
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8         1434471 |*                                 1442896.00000
#                 60         1448715 |***                               1457359.33333
#                193         1462959 |*********                         1471237.83938
#                390         1477203 |*******************               1484864.84615
#                515         1491447 |*************************         1498928.08738
#                638         1505691 |********************************  1512940.59248
#                606         1519935 |******************************    1526965.88449
#                528         1534179 |**************************        1540836.15152
#                382         1548423 |*******************               1554762.36126
#                275         1562667 |*************                     1569427.00000
#                230         1576911 |***********                       1583913.60870
#                222         1591155 |***********                       1598194.42342
#                213         1605399 |**********                        1612447.05634
#                246         1619643 |************                      1626784.00813
#                259         1633887 |************                      1641396.09653
#                320         1648131 |****************                  1655342.25000
#                311         1662375 |***************                   1670053.31511
#                325         1676619 |****************                  1683587.92308
#                298         1690863 |**************                    1697995.49664
#                264         1705107 |*************                     1711672.51515
#                232         1719351 |***********                       1726394.27586
#                211         1733595 |**********                        1741147.30332
#                192         1747839 |*********                         1755402.25000
#                162         1762083 |********                          1768989.51852
#                171         1776327 |********                          1782970.41520
#                141         1790571 |*******                           1797427.13475
#                129         1804815 |******                            1811160.14729
#                121         1819059 |******                            1825773.47934
#                101         1833303 |*****                             1839555.15842
#                 80         1847547 |****                              1854931.00000
#                 92         1861791 |****                              1868893.82609
#                 72         1876035 |***                               1882869.61111
#
#                421           > 95% |*********************             1944064.34917
#
#        mean of 95%   1621604.31852
#          95th %ile         1890271
#
# WARNINGS
#     Actual benchmark run time only accounts for 76.5% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_wt8k   1   1          243924         8046        0        2     8192   --w-
# bin/../bin-riscv64/mmap -N mmap_wt8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    184571                     184571
#                        max   1982624                     367336
#                       mean    337494.04773               254003.64765
#                     median    257490                     243924*
#                     stddev    191856.86048                37785.47904
#             standard error      1905.27801                  421.24515
#       99% confidence level      4907.99616                 1085.12752
#                       skew         2.36075                    0.95193
#                   kurtosis         6.25221                    0.20596
#           time correlation        49.74574                   15.41556
#
#               elapsed time        20.00390
#                   run time         8.39715
#          getnsecs overhead      1429
#
#          number of samples     10140
#         number of outliers      2094
#    number of final samples      8046
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5          184571 |*                                  185991.00000
#                  9          189183 |*                                  192137.66667
#                 15          193795 |*                                  196733.66667
#                 79          198407 |****                               201272.96203
#                197          203019 |**********                         205537.04061
#                303          207631 |***************                    210042.20792
#                423          212243 |*********************              214695.45390
#                513          216855 |**************************         219271.12671
#                553          221467 |****************************       223752.11573
#                626          226079 |********************************   228431.79712
#                500          230691 |*************************          232883.12800
#                447          235303 |**********************             237552.47651
#                407          239915 |********************               242171.14005
#                372          244527 |*******************                246810.95430
#                365          249139 |******************                 251427.65479
#                320          253751 |****************                   256150.49063
#                277          258363 |**************                     260719.01444
#                277          262975 |**************                     265141.01083
#                218          267587 |***********                        269930.43119
#                209          272199 |**********                         274354.01914
#                191          276811 |*********                          279153.73822
#                173          281423 |********                           283680.21965
#                169          286035 |********                           288223.44970
#                135          290647 |******                             292984.15556
#                133          295259 |******                             297391.61654
#                112          299871 |*****                              302151.24107
#                124          304483 |******                             306736.37903
#                112          309095 |*****                              311254.91964
#                109          313707 |*****                              316065.67890
#                 98          318319 |*****                              320486.81633
#                104          322931 |*****                              325237.72115
#                 68          327543 |***                                329689.63235
#
#                403           > 95% |********************               348365.56079
#
#        mean of 95%    249028.13398
#          95th %ile          332124
#
# WARNINGS
#     Actual benchmark run time only accounts for 42.0% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_wz128k   1   1         1440071         5509        0        1   131072   --w-
# bin/../bin-riscv64/mmap -N mmap_wz128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1268771                    1268771
#                        max   5042771                    1877771
#                       mean   1514902.61820              1463607.70358
#                     median   1452871                    1440071*
#                     stddev    320783.88030               138279.97882
#             standard error      4207.74811                 1863.04317
#       99% confidence level     10839.15913                 4799.19920
#                       skew         6.01822                    0.89978
#                   kurtosis        49.18235                    0.17458
#           time correlation       121.87984                   82.90765
#
#               elapsed time        20.00511
#                   run time         8.81796
#          getnsecs overhead      1429
#
#          number of samples      5812
#         number of outliers       303
#    number of final samples      5509
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15         1268771 |*                                 1278331.00000
#                159         1283825 |***********                       1293487.35220
#                313         1298879 |*********************             1307225.63259
#                462         1313933 |********************************  1321534.41991
#                408         1328987 |****************************      1335970.75490
#                337         1344041 |***********************           1350964.47181
#                244         1359095 |****************                  1366471.00000
#                221         1374149 |***************                   1381483.66968
#                218         1389203 |***************                   1396858.15596
#                149         1404257 |**********                        1411209.25503
#                167         1419311 |***********                       1426924.89222
#                179         1434365 |************                      1442176.02793
#                200         1449419 |*************                     1457576.50000
#                188         1464473 |*************                     1472235.36170
#                229         1479527 |***************                   1486940.86900
#                241         1494581 |****************                  1501430.33610
#                198         1509635 |*************                     1516979.58586
#                169         1524689 |***********                       1531553.24852
#                163         1539743 |***********                       1546707.80982
#                139         1554797 |*********                         1561879.63309
#                120         1569851 |********                          1576870.16667
#                120         1584905 |********                          1592396.83333
#                 89         1599959 |******                            1607366.50562
#                 70         1615013 |****                              1621598.14286
#                 69         1630067 |****                              1637926.07246
#                 72         1645121 |****                              1652452.94444
#                 60         1660175 |****                              1667312.66667
#                 51         1675229 |***                               1682204.33333
#                 59         1690283 |****                              1697859.13559
#                 47         1705337 |***                               1712753.97872
#                 42         1720391 |**                                1729304.33333
#                 35         1735445 |**                                1742671.00000
#
#                276           > 95% |*******************               1811939.47826
#
#        mean of 95%   1445235.91496
#          95th %ile         1750471
#
# WARNINGS
#     Actual benchmark run time only accounts for 44.1% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_wz8k   1   1          243757         7424        0        2     8192   --w-
# bin/../bin-riscv64/mmap -N mmap_wz8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    170571                     170571
#                        max   1891724                     352824
#                       mean    296458.71039               251378.33675
#                     median    249324                     243757*
#                     stddev    145875.29748                33820.57209
#             standard error      1577.32984                  392.52016
#       99% confidence level      4063.20166                 1011.13193
#                       skew         3.88287                    0.85743
#                   kurtosis        20.46756                    0.33705
#           time correlation        38.70526                   14.98683
#
#               elapsed time        20.00705
#                   run time         7.49375
#          getnsecs overhead      1429
#
#          number of samples      8553
#         number of outliers      1129
#    number of final samples      7424
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          170571 |*                                  172496.00000
#                  4          175247 |*                                  176721.00000
#                 22          179923 |*                                  182863.50000
#                 32          184599 |*                                  186820.37500
#                 35          189275 |**                                 191545.28571
#                 45          193951 |**                                 196607.48889
#                 57          198627 |***                                201332.43860
#                103          203303 |******                             206021.25243
#                213          207979 |************                       210715.79812
#                360          212655 |*********************              215126.82222
#                418          217331 |*************************          219841.51196
#                527          222007 |*******************************    224333.68691
#                530          226683 |*******************************    229023.34151
#                515          231359 |******************************     233752.00971
#                533          236035 |********************************   238370.07880
#                493          240711 |*****************************      243086.91075
#                454          245387 |***************************        247696.00661
#                368          250063 |**********************             252310.71196
#                305          254739 |******************                 257090.33115
#                262          259415 |***************                    261624.38550
#                265          264091 |***************                    266291.74717
#                188          268767 |***********                        271206.38830
#                189          273443 |***********                        275610.86243
#                187          278119 |***********                        280289.60428
#                149          282795 |********                           285137.10738
#                142          287471 |********                           289856.35915
#                137          292147 |********                           294460.08759
#                134          296823 |********                           299079.09701
#                111          301499 |******                             303695.98198
#                120          306175 |*******                            308498.76667
#                 83          310851 |****                               313114.79518
#                 67          315527 |****                               317770.43284
#
#                372           > 95% |**********************             336264.80108
#
#        mean of 95%    246900.49149
#          95th %ile          320190
#
# WARNINGS
#     Actual benchmark run time only accounts for 37.5% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_z128k   1   1           82252         9741        0        8   131072   ----
# bin/../bin-riscv64/mmap -N mmap_z128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     63268                      63268
#                        max   1677309                     120575
#                       mean    110735.96553                85589.48671
#                     median     85371                      82252*
#                     stddev     85203.91651                11674.80770
#             standard error       788.99280                  118.28998
#       99% confidence level      2032.44545                  304.71499
#                       skew         6.45348                    0.93621
#                   kurtosis        60.99776                    0.18863
#           time correlation        13.99004                    3.93536
#
#               elapsed time        20.00578
#                   run time        10.58596
#          getnsecs overhead      1429
#
#          number of samples     11662
#         number of outliers      1921
#    number of final samples      9741
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6           63268 |*                                   63854.00000
#                 12           64728 |*                                   65599.16667
#                 35           66188 |*                                   67049.71429
#                 71           67648 |***                                 68406.95775
#                162           69108 |******                              69900.17901
#                280           70568 |************                        71336.48571
#                415           72028 |*****************                   72792.66024
#                543           73488 |***********************             74252.09945
#                658           74948 |****************************        75703.17629
#                745           76408 |********************************    77119.58121
#                719           77868 |******************************      78574.10709
#                650           79328 |***************************         80044.52769
#                571           80788 |************************            81492.10683
#                498           82248 |*********************               82963.23293
#                423           83708 |******************                  84435.53428
#                361           85168 |***************                     85852.98061
#                368           86628 |***************                     87348.02446
#                270           88088 |***********                         88800.88889
#                277           89548 |***********                         90288.79422
#                258           91008 |***********                         91729.97674
#                255           92468 |**********                          93184.18431
#                223           93928 |*********                           94652.00897
#                212           95388 |*********                           96103.68396
#                193           96848 |********                            97549.03109
#                167           98308 |*******                             99030.34132
#                175           99768 |*******                            100478.24000
#                154          101228 |******                             101933.83117
#                131          102688 |*****                              103451.25954
#                126          104148 |*****                              104888.39683
#                 99          105608 |****                               106356.87879
#                108          107068 |****                               107723.70370
#                 88          108528 |***                                109235.57955
#
#                488           > 95% |********************               114650.02664
#
#        mean of 95%     84056.84394
#          95th %ile          109963
#
# WARNINGS
#     Actual benchmark run time only accounts for 52.9% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
         prc thr      nsecs/call      samples   errors cnt/samp   length  flags
mmap_z8k   1   1           75408         8040        0        8     8192   ----
# bin/../bin-riscv64/mmap -N mmap_z8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     64741                      64741
#                        max   1489386                     103752
#                       mean    111744.24024                78010.87376
#                     median     79308                      75408*
#                     stddev     86579.60047                 8580.66111
#             standard error       844.84993                   95.69577
#       99% confidence level      2176.33341                  246.51229
#                       skew         5.61452                    1.00344
#                   kurtosis        53.66921                    0.19051
#           time correlation        17.88716                    3.47982
#
#               elapsed time        20.00569
#                   run time        10.48916
#          getnsecs overhead      1429
#
#          number of samples     10502
#         number of outliers      2462
#    number of final samples      8040
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6           64741 |*                                   65289.16667
#                 62           65711 |***                                 66283.53226
#                158           66681 |********                            67261.13924
#                284           67651 |**************                      68181.84155
#                416           68621 |*********************               69146.41827
#                522           69591 |***************************         70099.58812
#                597           70561 |******************************      71053.09715
#                618           71531 |********************************    72033.12136
#                513           72501 |**************************          72954.17739
#                479           73471 |************************            73934.18163
#                366           74441 |******************                  74911.74317
#                400           75411 |********************                75886.65000
#                323           76381 |****************                    76857.16718
#                278           77351 |**************                      77840.12590
#                226           78321 |***********                         78824.52212
#                270           79291 |*************                       79764.30741
#                223           80261 |***********                         80734.29148
#                195           81231 |**********                          81719.43590
#                157           82201 |********                            82650.11465
#                179           83171 |*********                           83639.68156
#                136           84141 |*******                             84656.34559
#                143           85111 |*******                             85667.84615
#                143           86081 |*******                             86583.84615
#                125           87051 |******                              87522.33600
#                132           88021 |******                              88495.26515
#                103           88991 |*****                               89498.28155
#                111           89961 |*****                               90470.04505
#                 90           90931 |****                                91406.52222
#                112           91901 |*****                               92377.83929
#                 91           92871 |****                                93344.10989
#                 84           93841 |****                                94276.82143
#                 96           94811 |****                                95236.05208
#
#                402           > 95% |********************                99384.41542
#
#        mean of 95%     76885.95051
#          95th %ile           95752
#
# WARNINGS
#     Actual benchmark run time only accounts for 52.4% of elapsed time.
#
# Usage: mmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures mmap()
             prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_tw128k   1   1          390112          130        0      500   131072 --w-t
# bin/../bin-riscv64/mprotect -N mprot_tw128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -t -f /dev/zero -B 500 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    192046                     192046
#                        max    576105                     576105
#                       mean    385184.74615               385184.74615
#                     median    390112                     390112*
#                     stddev     74977.35953                74977.35953
#             standard error      6575.94944                 6575.94944
#       99% confidence level     16939.64577                16939.64577
#                       skew        -0.04045                   -0.04045
#                   kurtosis        -0.35096                   -0.35096
#           time correlation      1945.72731                 1945.72731
#
#               elapsed time        25.08297
#                   run time        25.03719
#          getnsecs overhead      1429
#
#          number of samples       130
#         number of outliers         0
#    number of final samples       130
#             ops per sample       500.00000 (-B 500)
#
#       recommended -B value         3
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2          192046 |****                               194095.00000
#                  0          201952 |                                              -
#                  0          211858 |                                              -
#                  0          221764 |                                              -
#                  0          231670 |                                              -
#                  1          241576 |**                                 243010.00000
#                  3          251482 |******                             254435.00000
#                  0          261388 |                                              -
#                  2          271294 |****                               278073.50000
#                  2          281200 |****                               286332.50000
#                  8          291106 |******************                 297145.25000
#                 10          301012 |**********************             305529.50000
#                  9          310918 |********************               314355.66667
#                  0          320824 |                                              -
#                  4          330730 |*********                          335937.50000
#                  1          340636 |**                                 348230.00000
#                  2          350542 |****                               355812.00000
#                  2          360448 |****                               364016.50000
#                  6          370354 |*************                      375878.33333
#                 14          380260 |********************************   385698.85714
#                  9          390166 |********************               395639.00000
#                 11          400072 |*************************          404403.36364
#                  5          409978 |***********                        414300.20000
#                  4          419884 |*********                          427186.25000
#                  1          429790 |**                                 435034.00000
#                  2          439696 |****                               447238.50000
#                 12          449602 |***************************        453822.16667
#                  5          459508 |***********                        464177.00000
#                  2          469414 |****                               473108.50000
#                  3          479320 |******                             485737.00000
#                  3          489226 |******                             492733.33333
#
#                  7           > 95% |****************                   533575.28571
#
#        mean of 95%    376739.75610
#          95th %ile          509015
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
           prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_tw4m   1   1          851299          523        0       40  4194304 --w-t
# bin/../bin-riscv64/mprotect -N mprot_tw4m -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 4m -w -t -f /dev/zero -B 40 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    725527                     796652
#                        max   1821419                     920307
#                       mean    869469.92683               854569.70554
#                     median    854252                     851299*
#                     stddev     76224.42427                22167.87915
#             standard error      3181.54600                  969.33368
#       99% confidence level      8195.66249                 2497.00355
#                       skew         7.77085                    0.52886
#                   kurtosis        85.91055                    0.13517
#           time correlation       263.67686                  141.69460
#
#               elapsed time        20.03679
#                   run time        19.96385
#          getnsecs overhead      1429
#
#          number of samples       574
#         number of outliers        51
#    number of final samples       523
#             ops per sample        40.00000 (-B 40)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          796652 |*                                  796652.00000
#                  1          799746 |*                                  800177.00000
#                  0          802840 |                                              -
#                  3          805934 |**                                 807466.00000
#                  2          809028 |*                                  810480.50000
#                  3          812122 |**                                 814740.66667
#                  7          815216 |******                             817136.14286
#                  6          818310 |*****                              819435.83333
#                  7          821404 |******                             823397.14286
#                 17          824498 |**************                     826448.17647
#                 12          827592 |**********                         829337.16667
#                 23          830686 |*******************                832517.17391
#                 28          833780 |************************           835317.89286
#                 28          836874 |************************           838543.71429
#                 34          839968 |*****************************      841732.17647
#                 37          843062 |********************************   844377.40541
#                 31          846156 |**************************         847885.35484
#                 30          849250 |*************************          850596.30000
#                 30          852344 |*************************          853950.70000
#                 22          855438 |*******************                857216.68182
#                 34          858532 |*****************************      860150.85294
#                 21          861626 |******************                 863167.90476
#                 11          864720 |*********                          866154.72727
#                 24          867814 |********************               869475.29167
#                 13          870908 |***********                        872089.46154
#                 19          874002 |****************                   876025.05263
#                  6          877096 |*****                              878916.66667
#                  9          880190 |*******                            881364.00000
#                 14          883284 |************                       884573.64286
#                 10          886378 |********                           887605.40000
#                  5          889472 |****                               890754.20000
#                  8          892566 |******                             893933.12500
#
#                 27           > 95% |***********************            906575.25926
#
#        mean of 95%    851738.75806
#          95th %ile          895654
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
            prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_twz8k   1   1          377211           74        0      900     8192 --w-t
# bin/../bin-riscv64/mprotect -N mprot_twz8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -t -f /dev/zero -B 900 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    193917                     251650
#                        max    450731                     450731
#                       mean    373773.85333               376204.35135
#                     median    377076                     377211*
#                     stddev     46545.75958                41797.93909
#             standard error      5374.64136                 4858.91172
#       99% confidence level     13845.07616                12516.55660
#                       skew        -0.83611                   -0.25366
#                   kurtosis         1.75676                   -0.24254
#           time correlation      2022.14350                 1905.47833
#
#               elapsed time        25.26318
#                   run time        25.22984
#          getnsecs overhead      1429
#
#          number of samples        75
#         number of outliers         1
#    number of final samples        74
#             ops per sample       900.00000 (-B 900)
#
#       recommended -B value         3
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          251650 |****                               251650.00000
#                  0          257701 |                                              -
#                  0          263752 |                                              -
#                  0          269803 |                                              -
#                  0          275854 |                                              -
#                  0          281905 |                                              -
#                  0          287956 |                                              -
#                  0          294007 |                                              -
#                  1          300058 |****                               302694.00000
#                  2          306109 |********                           307794.50000
#                  3          312160 |************                       314852.33333
#                  1          318211 |****                               322815.00000
#                  3          324262 |************                       326000.33333
#                  3          330313 |************                       331471.00000
#                  2          336364 |********                           337968.50000
#                  3          342415 |************                       343502.33333
#                  3          348466 |************                       350341.00000
#                  2          354517 |********                           355765.50000
#                  3          360568 |************                       363415.66667
#                  4          366619 |****************                   369825.25000
#                  8          372670 |********************************   375633.00000
#                  4          378721 |****************                   381015.00000
#                  3          384772 |************                       385556.66667
#                  5          390823 |********************               393708.40000
#                  5          396874 |********************               398985.20000
#                  0          402925 |                                              -
#                  3          408976 |************                       411846.00000
#                  1          415027 |****                               418629.00000
#                  5          421078 |********************               422349.00000
#                  1          427129 |****                               430282.00000
#                  2          433180 |********                           434242.00000
#                  2          439231 |********                           442954.50000
#
#                  4           > 95% |****************                   447752.00000
#
#        mean of 95%    372115.91429
#          95th %ile          445253
#
# WARNINGS
#     Too few samples, 75 < 100, consider running test longer, or for a least 100 samples
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
             prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_wz128k   1   1          389054           88        0      800   131072 --w--
# bin/../bin-riscv64/mprotect -N mprot_wz128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /dev/zero -B 800 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    150431                     150431
#                        max    486345                     486345
#                       mean    356680.92045               356680.92045
#                     median    389054                     389054*
#                     stddev     90611.30891                90611.30891
#             standard error      9659.19799                 9659.19799
#       99% confidence level     24882.09401                24882.09401
#                       skew        -1.16633                   -1.16633
#                   kurtosis         0.24705                    0.24705
#           time correlation      3169.43081                 3169.43081
#
#               elapsed time        25.16319
#                   run time        25.11047
#          getnsecs overhead      1429
#
#          number of samples        88
#         number of outliers         0
#    number of final samples        88
#             ops per sample       800.00000 (-B 800)
#
#       recommended -B value         3
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6          150431 |**************                     156004.33333
#                  3          160249 |*******                            168077.00000
#                  2          170067 |****                               170551.50000
#                  1          179885 |**                                 185983.00000
#                  0          189703 |                                              -
#                  0          199521 |                                              -
#                  0          209339 |                                              -
#                  1          219157 |**                                 228313.00000
#                  0          228975 |                                              -
#                  1          238793 |**                                 247125.00000
#                  0          248611 |                                              -
#                  2          258429 |****                               263865.50000
#                  0          268247 |                                              -
#                  1          278065 |**                                 283073.00000
#                  1          287883 |**                                 292245.00000
#                  1          297701 |**                                 297903.00000
#                  0          307519 |                                              -
#                  1          317337 |**                                 326134.00000
#                  2          327155 |****                               333581.00000
#                  3          336973 |*******                            341469.33333
#                  1          346791 |**                                 350845.00000
#                  5          356609 |************                       362387.80000
#                  5          366427 |************                       373382.80000
#                  6          376245 |**************                     383687.00000
#                  6          386063 |**************                     390417.66667
#                 13          395881 |********************************   400163.46154
#                 11          405699 |***************************        408736.18182
#                  4          415517 |*********                          422125.50000
#                  3          425335 |*******                            433367.33333
#                  2          435153 |****                               441684.00000
#                  1          444971 |**                                 445576.00000
#                  1          454789 |**                                 457659.00000
#
#                  5           > 95% |************                       475745.60000
#
#        mean of 95%    349508.34940
#          95th %ile          464578
#
# WARNINGS
#     Too few samples, 88 < 100, consider running test longer, or for a least 100 samples
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
           prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_wz8k   1   1          378931           65        0     1024     8192 --w--
# bin/../bin-riscv64/mprotect -N mprot_wz8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /dev/zero -B 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    202079                     292769
#                        max    475777                     475777
#                       mean    371478.10606               374084.24615
#                     median    378931                     378931*
#                     stddev     44202.67502                39104.11507
#             standard error      5440.97317                 4850.26853
#       99% confidence level     14015.94689                12494.29174
#                       skew        -0.62813                    0.14857
#                   kurtosis         2.02128                   -0.24266
#           time correlation      2158.02403                 2014.85577
#
#               elapsed time        25.13905
#                   run time        25.10607
#          getnsecs overhead      1429
#
#          number of samples        66
#         number of outliers         1
#    number of final samples        65
#             ops per sample      1024.00000 (-B 1024)
#
#       recommended -B value         3
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          292769 |****                               292769.00000
#                  0          297193 |                                              -
#                  1          301617 |****                               303609.00000
#                  1          306041 |****                               306310.00000
#                  0          310465 |                                              -
#                  3          314889 |*************                      315929.33333
#                  2          319313 |*********                          321902.50000
#                  1          323737 |****                               327616.00000
#                  3          328161 |*************                      330163.66667
#                  3          332585 |*************                      335465.33333
#                  0          337009 |                                              -
#                  2          341433 |*********                          344796.00000
#                  1          345857 |****                               348222.00000
#                  2          350281 |*********                          353493.00000
#                  1          354705 |****                               358539.00000
#                  3          359129 |*************                      360937.33333
#                  0          363553 |                                              -
#                  3          367977 |*************                      370071.33333
#                  4          372401 |******************                 374141.75000
#                  7          376825 |********************************   379477.00000
#                  5          381249 |**********************             383099.60000
#                  2          385673 |*********                          387841.00000
#                  2          390097 |*********                          391665.00000
#                  3          394521 |*************                      395562.33333
#                  2          398945 |*********                          400908.50000
#                  2          403369 |*********                          405774.50000
#                  1          407793 |****                               409262.00000
#                  0          412217 |                                              -
#                  1          416641 |****                               419706.00000
#                  3          421065 |*************                      424127.66667
#                  2          425489 |*********                          428474.00000
#
#                  4           > 95% |******************                 453639.75000
#
#        mean of 95%    368867.49180
#          95th %ile          434312
#
# WARNINGS
#     Too few samples, 66 < 100, consider running test longer, or for a least 100 samples
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
            prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_z128k   1   1          101087          199        0     1024   131072 -----
# bin/../bin-riscv64/mprotect -N mprot_z128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /dev/zero -B 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     82168                      82168
#                        max    211186                     203706
#                       mean    114483.79000               113997.84925
#                     median    101428                     101087*
#                     stddev     31943.13540                31273.80766
#             standard error      2258.72077                 2216.94145
#       99% confidence level      5818.46469                 5710.84116
#                       skew         1.17028                    1.15064
#                   kurtosis         0.29417                    0.21184
#           time correlation       501.05432                  493.92057
#
#               elapsed time        23.48901
#                   run time        23.44657
#          getnsecs overhead      1429
#
#          number of samples       200
#         number of outliers         1
#    number of final samples       199
#             ops per sample      1024.00000 (-B 1024)
#
#       recommended -B value         9
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 21           82168 |********************************    83861.38095
#                 16           85193 |************************            86905.81250
#                 18           88218 |***************************         90238.05556
#                  9           91243 |*************                       92751.22222
#                 17           94268 |*************************           95641.35294
#                 14           97293 |*********************               98999.71429
#                 20          100318 |******************************     101749.35000
#                  5          103343 |*******                            103867.80000
#                  8          106368 |************                       107775.50000
#                  4          109393 |******                             110935.25000
#                  2          112418 |***                                114048.00000
#                  2          115443 |***                                117452.50000
#                  4          118468 |******                             120165.75000
#                  1          121493 |*                                  122549.00000
#                  2          124518 |***                                125670.50000
#                  5          127543 |*******                            129259.60000
#                  2          130568 |***                                131159.00000
#                  2          133593 |***                                134950.00000
#                  1          136618 |*                                  139160.00000
#                  2          139643 |***                                141625.00000
#                  3          142668 |****                               144159.33333
#                  4          145693 |******                             147464.00000
#                  7          148718 |**********                         150956.42857
#                  3          151743 |****                               153618.33333
#                  5          154768 |*******                            156039.60000
#                  1          157793 |*                                  160690.00000
#                  2          160818 |***                                161227.50000
#                  1          163843 |*                                  165573.00000
#                  1          166868 |*                                  169274.00000
#                  1          169893 |*                                  170233.00000
#                  2          172918 |***                                173454.50000
#                  4          175943 |******                             177857.75000
#
#                 10           > 95% |***************                    191764.70000
#
#        mean of 95%    109883.20106
#          95th %ile          178936
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
          prc thr      nsecs/call      samples   errors cnt/samp     size flags
mprot_z8k   1   1          103565          198        0     1024     8192 -----
# bin/../bin-riscv64/mprotect -N mprot_z8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /dev/zero -B 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     82709                      82709
#                        max    234490                     194189
#                       mean    117112.89500               116026.95455
#                     median    103768                     103565*
#                     stddev     32150.59062                30407.90044
#             standard error      2273.39006                 2160.99539
#       99% confidence level      5856.25281                 5566.72411
#                       skew         1.04954                    0.90029
#                   kurtosis         0.23382                   -0.46328
#           time correlation       515.49257                  498.01636
#
#               elapsed time        24.02156
#                   run time        23.98500
#          getnsecs overhead      1429
#
#          number of samples       200
#         number of outliers         2
#    number of final samples       198
#             ops per sample      1024.00000 (-B 1024)
#
#       recommended -B value         9
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15           82709 |****************************        84334.33333
#                 17           85671 |********************************    86956.70588
#                 16           88633 |******************************      89931.68750
#                 12           91595 |**********************              92881.58333
#                 17           94557 |********************************    95988.47059
#                  9           97519 |****************                    98768.33333
#                 13          100481 |************************           101742.76923
#                 10          103443 |******************                 104529.20000
#                  9          106405 |****************                   108011.11111
#                  2          109367 |***                                110829.00000
#                  6          112329 |***********                        113969.00000
#                  2          115291 |***                                117506.50000
#                  3          118253 |*****                              119956.00000
#                  3          121215 |*****                              122580.00000
#                  3          124177 |*****                              125836.66667
#                  3          127139 |*****                              128677.66667
#                  3          130101 |*****                              131646.66667
#                  2          133063 |***                                134284.00000
#                  2          136025 |***                                136921.00000
#                  2          138987 |***                                141406.50000
#                  6          141949 |***********                        143563.33333
#                  6          144911 |***********                        146380.00000
#                  2          147873 |***                                149832.00000
#                  4          150835 |*******                            151680.75000
#                  4          153797 |*******                            155141.75000
#                  0          156759 |                                              -
#                  2          159721 |***                                160259.50000
#                  5          162683 |*********                          164029.40000
#                  3          165645 |*****                              167698.66667
#                  3          168607 |*****                              169841.33333
#                  0          171569 |                                              -
#                  4          174531 |*******                            175743.75000
#
#                 10           > 95% |******************                 184113.10000
#
#        mean of 95%    112405.35106
#          95th %ile          177471
#
# Usage: mprotect
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mprotect')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte on each page)
#     [-s] (use MAP_SHARED)
#     [-t] (touch each page after restoring permissions)
# notes: measures mprotect()
               prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rait128k   1   1            2743        19664        0      289   131072  air--
# bin/../bin-riscv64/msync -N msync_rait128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /tmp/libmicro.2370/data -a -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2640                       2640
#                        max   1869186                       3302
#                       mean      3041.38409                 2817.10390
#                     median      2749                       2743*
#                     stddev     12884.93332                  161.53513
#             standard error        87.95432                    1.15194
#       99% confidence level       226.57034                    2.96741
#                       skew       141.95988                    1.53116
#                   kurtosis     20508.21336                    0.91394
#           time correlation         0.07926                    0.02346
#
#               elapsed time        20.00393
#                   run time        17.95919
#          getnsecs overhead      1429
#
#          number of samples     21461
#         number of outliers      1797
#    number of final samples     19664
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 30            2640 |*                                    2652.46667
#                160            2658 |*                                    2668.90625
#                762            2676 |******                               2686.43045
#               2514            2694 |********************                 2703.58154
#               3898            2712 |********************************     2720.45639
#               3126            2730 |*************************            2737.95585
#               1993            2748 |****************                     2755.66884
#               1243            2766 |**********                           2773.32985
#                666            2784 |*****                                2791.64565
#                401            2802 |***                                  2810.08978
#                280            2820 |**                                   2828.11071
#                188            2838 |*                                    2846.04255
#                176            2856 |*                                    2863.80114
#                135            2874 |*                                    2882.28148
#                101            2892 |*                                    2900.73267
#                 98            2910 |*                                    2918.55102
#                 96            2928 |*                                    2935.78125
#                 79            2946 |*                                    2954.53165
#                 78            2964 |*                                    2972.32051
#                 78            2982 |*                                    2990.00000
#                108            3000 |*                                    3008.95370
#                161            3018 |*                                    3027.12422
#                229            3036 |*                                    3044.79039
#                289            3054 |**                                   3062.52249
#                293            3072 |**                                   3080.37543
#                283            3090 |**                                   3098.46290
#                342            3108 |**                                   3116.02924
#                298            3126 |**                                   3134.58389
#                273            3144 |**                                   3152.55678
#                254            3162 |**                                   3170.41339
#                 48            3180 |*                                    3181.31250
#
#                984           > 95% |********                             3236.42378
#
#        mean of 95%      2795.01552
#          95th %ile            3184
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rait8k   1   1            2345        18851        0      353     8192  air--
# bin/../bin-riscv64/msync -N msync_rait8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /tmp/libmicro.2370/data -a -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2251                       2251
#                        max    504236                       2853
#                       mean      2559.64166                 2412.11129
#                     median      2351                       2345*
#                     stddev      4489.81529                  146.86180
#             standard error        31.32844                    1.06965
#       99% confidence level        80.70207                    2.75542
#                       skew        99.83201                    1.52322
#                   kurtosis     10343.56763                    0.88750
#           time correlation         0.05900                    0.02224
#
#               elapsed time        20.00588
#                   run time        17.99164
#          getnsecs overhead      1429
#
#          number of samples     20539
#         number of outliers      1688
#    number of final samples     18851
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4            2251 |*                                    2260.00000
#                 41            2267 |*                                    2278.09756
#                625            2283 |*****                                2293.46240
#               2463            2299 |********************                 2307.47868
#               3802            2315 |********************************     2322.34114
#               2718            2331 |**********************               2337.91501
#               2100            2347 |*****************                    2354.07619
#               1362            2363 |***********                          2369.73642
#                638            2379 |*****                                2385.59561
#                385            2395 |***                                  2401.95325
#                238            2411 |**                                   2417.58403
#                199            2427 |*                                    2434.25126
#                164            2443 |*                                    2450.57317
#                 99            2459 |*                                    2465.63636
#                 85            2475 |*                                    2483.07059
#                 84            2491 |*                                    2499.15476
#                 78            2507 |*                                    2514.82051
#                 76            2523 |*                                    2530.56579
#                 83            2539 |*                                    2546.96386
#                 89            2555 |*                                    2562.33708
#                 83            2571 |*                                    2578.65060
#                116            2587 |*                                    2595.12931
#                229            2603 |*                                    2611.30131
#                301            2619 |**                                   2626.79070
#                317            2635 |**                                   2642.36593
#                315            2651 |**                                   2658.78095
#                300            2667 |**                                   2674.39667
#                283            2683 |**                                   2689.96113
#                219            2699 |*                                    2706.32877
#                216            2715 |*                                    2722.66204
#                189            2731 |*                                    2738.26455
#                  7            2747 |*                                    2747.00000
#
#                943           > 95% |*******                              2794.21845
#
#        mean of 95%      2391.99028
#          95th %ile            2747
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
              prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rat128k   1   1           10389         7420        0       75   131072  a-r--
# bin/../bin-riscv64/msync -N msync_rat128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /tmp/libmicro.2370/data -a 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      9876                       9876
#                        max   2028236                      12361
#                       mean     11490.43170                10624.72291
#                     median     10416                      10389*
#                     stddev     23501.81763                  579.36817
#             standard error       262.85690                    6.72594
#       99% confidence level       677.11937                   17.32601
#                       skew        80.04574                    1.41746
#                   kurtosis      6796.56399                    0.70968
#           time correlation         0.82208                    0.23213
#
#               elapsed time        20.00688
#                   run time         6.63051
#          getnsecs overhead      1429
#
#          number of samples      7994
#         number of outliers       574
#    number of final samples      7420
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11            9876 |*                                    9917.36364
#                 43            9940 |*                                    9979.81395
#                147           10004 |*****                               10041.89116
#                298           10068 |**********                          10104.06711
#                563           10132 |*******************                 10167.17052
#                863           10196 |*****************************       10229.27231
#                922           10260 |********************************    10291.19740
#                847           10324 |*****************************       10354.62810
#                685           10388 |***********************             10419.54015
#                567           10452 |*******************                 10482.41446
#                405           10516 |**************                      10542.98272
#                169           10580 |*****                               10608.18935
#                139           10644 |****                                10670.87770
#                 77           10708 |**                                  10735.88312
#                 62           10772 |**                                  10801.38710
#                 53           10836 |*                                   10866.81132
#                 37           10900 |*                                   10929.59459
#                 34           10964 |*                                   10994.50000
#                 24           11028 |*                                   11059.16667
#                 31           11092 |*                                   11120.29032
#                 31           11156 |*                                   11193.16129
#                 42           11220 |*                                   11258.16667
#                 54           11284 |*                                   11319.81481
#                 78           11348 |**                                  11378.85897
#                101           11412 |***                                 11443.60396
#                118           11476 |****                                11507.57627
#                127           11540 |****                                11570.51181
#                126           11604 |****                                11636.92063
#                121           11668 |****                                11699.77686
#                108           11732 |***                                 11764.31481
#                118           11796 |****                                11827.35593
#                 48           11860 |*                                   11880.50000
#
#                371           > 95% |************                        12106.59030
#
#        mean of 95%     10546.72989
#          95th %ile           11901
#
# WARNINGS
#     Actual benchmark run time only accounts for 33.1% of elapsed time.
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rat8k   1   1            2366        18558        0      363     8192  a-r--
# bin/../bin-riscv64/msync -N msync_rat8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /tmp/libmicro.2370/data -a 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2266                       2266
#                        max    310486                       2911
#                       mean      2551.09993                 2442.35828
#                     median      2371                       2366*
#                     stddev      2413.67890                  156.22837
#             standard error        17.10410                    1.14682
#       99% confidence level        44.06016                    2.95420
#                       skew       110.49801                    1.44115
#                   kurtosis     13594.30805                    0.69150
#           time correlation         0.05161                    0.02447
#
#               elapsed time        20.00444
#                   run time        18.08887
#          getnsecs overhead      1429
#
#          number of samples     19914
#         number of outliers      1356
#    number of final samples     18558
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8            2266 |*                                    2274.50000
#                 33            2283 |*                                    2295.15152
#                379            2300 |***                                  2311.00264
#               2239            2317 |*******************                  2326.48325
#               3770            2334 |********************************     2342.16286
#               3054            2351 |*************************            2358.35429
#               1881            2368 |***************                      2375.40457
#               1157            2385 |*********                            2391.88764
#                578            2402 |****                                 2409.48270
#                374            2419 |***                                  2425.94118
#                268            2436 |**                                   2443.89179
#                209            2453 |*                                    2460.83254
#                133            2470 |*                                    2478.45865
#                113            2487 |*                                    2494.52212
#                 91            2504 |*                                    2511.92308
#                105            2521 |*                                    2529.54286
#                 92            2538 |*                                    2545.94565
#                 97            2555 |*                                    2562.89691
#                139            2572 |*                                    2580.06475
#                234            2589 |*                                    2597.21795
#                227            2606 |*                                    2614.21145
#                290            2623 |**                                   2631.32759
#                260            2640 |**                                   2647.96923
#                270            2657 |**                                   2664.68148
#                256            2674 |**                                   2681.95312
#                250            2691 |**                                   2699.17200
#                221            2708 |*                                    2716.41176
#                221            2725 |*                                    2733.00452
#                231            2742 |*                                    2749.27706
#                228            2759 |*                                    2766.88158
#                198            2776 |*                                    2783.62626
#                 24            2793 |*                                    2793.70833
#
#                928           > 95% |*******                              2844.95259
#
#        mean of 95%      2421.16670
#          95th %ile            2795
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
              prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rit128k   1   1            2864        19280        0      281   131072  -ir--
# bin/../bin-riscv64/msync -N msync_rit128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /tmp/libmicro.2370/data -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2695                       2695
#                        max   1217236                       3601
#                       mean      3193.27325                 2967.17241
#                     median      2878                       2864*
#                     stddev      8887.82395                  211.11629
#             standard error        61.85238                    1.52044
#       99% confidence level       159.33174                    3.91664
#                       skew       126.95211                    1.25783
#                   kurtosis     17003.74389                    0.53400
#           time correlation         0.09199                    0.03405
#
#               elapsed time        20.00525
#                   run time        17.81182
#          getnsecs overhead      1429
#
#          number of samples     20648
#         number of outliers      1368
#    number of final samples     19280
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10            2695 |*                                    2711.80000
#                 22            2719 |*                                    2733.09091
#                306            2743 |***                                  2758.63725
#               1792            2767 |*******************                  2780.43862
#               2924            2791 |********************************     2802.88201
#               2756            2815 |******************************       2825.79390
#               1753            2839 |*******************                  2849.59384
#               1015            2863 |***********                          2872.58522
#                515            2887 |*****                                2898.20194
#                422            2911 |****                                 2922.53791
#                607            2935 |******                               2947.89786
#                638            2959 |******                               2970.81661
#                627            2983 |******                               2993.92026
#                533            3007 |*****                                3017.97749
#                377            3031 |****                                 3041.64191
#                317            3055 |***                                  3066.05047
#                242            3079 |**                                   3090.20248
#                282            3103 |***                                  3114.66312
#                263            3127 |**                                   3138.03042
#                328            3151 |***                                  3162.80488
#                342            3175 |***                                  3186.56433
#                330            3199 |***                                  3209.82424
#                305            3223 |***                                  3234.10820
#                285            3247 |***                                  3258.12632
#                220            3271 |**                                   3282.19545
#                194            3295 |**                                   3306.31443
#                176            3319 |*                                    3329.64773
#                164            3343 |*                                    3354.79878
#                188            3367 |**                                   3378.57447
#                172            3391 |*                                    3403.28488
#                190            3415 |**                                   3426.52105
#                 21            3439 |*                                    3439.95238
#
#                964           > 95% |**********                           3513.65664
#
#        mean of 95%      2938.41008
#          95th %ile            3441
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rit8k   1   1            2375        18528        0      361     8192  -ir--
# bin/../bin-riscv64/msync -N msync_rit8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /tmp/libmicro.2370/data -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2277                       2277
#                        max    304786                       2976
#                       mean      2566.78205                 2458.24271
#                     median      2380                       2375*
#                     stddev      2364.13034                  172.62669
#             standard error        16.76309                    1.26822
#       99% confidence level        43.18171                    3.26693
#                       skew       111.37693                    1.43693
#                   kurtosis     13733.52733                    0.72454
#           time correlation         0.05373                    0.02724
#
#               elapsed time        20.00406
#                   run time        18.11839
#          getnsecs overhead      1429
#
#          number of samples     19890
#         number of outliers      1362
#    number of final samples     18528
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 16            2277 |*                                    2290.50000
#                280            2295 |**                                   2306.24286
#               1450            2313 |**************                       2323.04897
#               3092            2331 |******************************       2340.13131
#               3277            2349 |********************************     2357.21117
#               2279            2367 |**********************               2374.98420
#               1516            2385 |**************                       2392.46900
#                808            2403 |*******                              2410.55569
#                406            2421 |***                                  2428.53448
#                294            2439 |**                                   2447.53061
#                234            2457 |**                                   2465.30342
#                182            2475 |*                                    2482.62088
#                158            2493 |*                                    2501.51266
#                144            2511 |*                                    2519.86806
#                133            2529 |*                                    2536.96241
#                103            2547 |*                                    2555.94175
#                122            2565 |*                                    2574.22131
#                 99            2583 |*                                    2590.90909
#                104            2601 |*                                    2609.76923
#                153            2619 |*                                    2628.19608
#                224            2637 |**                                   2646.24554
#                336            2655 |***                                  2663.84226
#                303            2673 |**                                   2681.66007
#                310            2691 |***                                  2699.51290
#                255            2709 |**                                   2716.77647
#                239            2727 |**                                   2735.58577
#                178            2745 |*                                    2752.88202
#                187            2763 |*                                    2772.09091
#                196            2781 |*                                    2789.09694
#                180            2799 |*                                    2807.67778
#                171            2817 |*                                    2825.73684
#                172            2835 |*                                    2843.22093
#
#                927           > 95% |*********                            2906.51241
#
#        mean of 95%      2434.63349
#          95th %ile            2852
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rt128k   1   1            2781        18306        0      319   131072  --r--
# bin/../bin-riscv64/msync -N msync_rt128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2685                       2685
#                        max    559586                       3434
#                       mean      2965.08129                 2871.95832
#                     median      2786                       2781*
#                     stddev      4133.32206                  187.34699
#             standard error        29.73151                    1.38468
#       99% confidence level        76.58838                    3.56694
#                       skew       127.92716                    1.38876
#                   kurtosis     17061.85878                    0.53000
#           time correlation         0.05375                    0.02998
#
#               elapsed time        20.00510
#                   run time        18.07437
#          getnsecs overhead      1429
#
#          number of samples     19327
#         number of outliers      1021
#    number of final samples     18306
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 56            2685 |*                                    2698.83929
#                575            2704 |*****                                2715.81565
#               2293            2723 |********************                 2733.34496
#               3658            2742 |********************************     2751.02242
#               2454            2761 |*********************                2769.04564
#               1787            2780 |***************                      2788.89144
#               1308            2799 |***********                          2807.10321
#                623            2818 |*****                                2825.61316
#                366            2837 |***                                  2845.07377
#                274            2856 |**                                   2864.69343
#                186            2875 |*                                    2883.90860
#                142            2894 |*                                    2902.30282
#                108            2913 |*                                    2920.88889
#                 95            2932 |*                                    2941.07368
#                103            2951 |*                                    2960.41748
#                 84            2970 |*                                    2978.35714
#                 89            2989 |*                                    2997.69663
#                 74            3008 |*                                    3017.02703
#                 77            3027 |*                                    3035.77922
#                119            3046 |*                                    3056.01681
#                205            3065 |*                                    3074.99024
#                313            3084 |**                                   3092.83067
#                306            3103 |**                                   3111.97059
#                346            3122 |***                                  3130.96821
#                304            3141 |**                                   3149.69079
#                280            3160 |**                                   3168.43929
#                251            3179 |**                                   3187.85259
#                229            3198 |**                                   3206.97380
#                166            3217 |*                                    3226.57831
#                204            3236 |*                                    3244.13725
#                215            3255 |*                                    3263.69767
#                100            3274 |*                                    3278.32000
#
#                916           > 95% |********                             3348.40830
#
#        mean of 95%      2846.86182
#          95th %ile            3283
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_rt8k   1   1            2363        18614        0      364     8192  --r--
# bin/../bin-riscv64/msync -N msync_rt8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2267                       2267
#                        max    297336                       2942
#                       mean      2548.68258                 2444.69501
#                     median      2368                       2363*
#                     stddev      2346.84934                  165.67957
#             standard error        16.67034                    1.21436
#       99% confidence level        42.94278                    3.12820
#                       skew       107.57829                    1.37324
#                   kurtosis     12941.24233                    0.47523
#           time correlation         0.05229                    0.02612
#
#               elapsed time        20.00431
#                   run time        18.06941
#          getnsecs overhead      1429
#
#          number of samples     19819
#         number of outliers      1205
#    number of final samples     18614
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7            2267 |*                                    2279.14286
#                176            2284 |*                                    2295.37500
#               1090            2301 |*********                            2310.66972
#               2663            2318 |**********************               2327.27863
#               3731            2335 |********************************     2342.76923
#               2332            2352 |********************                 2359.31861
#               1636            2369 |**************                       2376.54095
#                986            2386 |********                             2393.02840
#                455            2403 |***                                  2409.90769
#                316            2420 |**                                   2427.47785
#                249            2437 |**                                   2443.84337
#                196            2454 |*                                    2461.67857
#                147            2471 |*                                    2478.85714
#                130            2488 |*                                    2495.37692
#                 89            2505 |*                                    2513.20225
#                 95            2522 |*                                    2530.50526
#                 82            2539 |*                                    2547.98780
#                 74            2556 |*                                    2563.52703
#                 76            2573 |*                                    2580.71053
#                105            2590 |*                                    2598.01905
#                167            2607 |*                                    2615.88623
#                234            2624 |**                                   2632.32479
#                319            2641 |**                                   2649.08777
#                322            2658 |**                                   2666.31677
#                328            2675 |**                                   2682.58841
#                319            2692 |**                                   2700.17555
#                307            2709 |**                                   2716.60912
#                275            2726 |**                                   2733.86182
#                220            2743 |*                                    2751.36818
#                220            2760 |*                                    2767.76818
#                189            2777 |*                                    2784.36508
#                148            2794 |*                                    2800.06757
#
#                931           > 95% |*******                              2863.28249
#
#        mean of 95%      2422.65662
#          95th %ile            2807
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_t128k   1   1            2309        18232        0      381   131072  -----
# bin/../bin-riscv64/msync -N msync_t128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2233                       2233
#                        max    145736                       2870
#                       mean      2471.99974                 2389.26958
#                     median      2315                       2309*
#                     stddev      1185.13984                  160.08097
#             standard error         8.49503                    1.18556
#       99% confidence level        21.88319                    3.05400
#                       skew        95.17894                    1.43497
#                   kurtosis     11130.71529                    0.63565
#           time correlation         0.04550                    0.02533
#
#               elapsed time        20.00312
#                   run time        18.15761
#          getnsecs overhead      1429
#
#          number of samples     19463
#         number of outliers      1231
#    number of final samples     18232
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 33            2233 |*                                    2244.78788
#                631            2250 |****                                 2261.21395
#               2642            2267 |*******************                  2276.16086
#               4344            2284 |********************************     2291.83310
#               2451            2301 |******************                   2308.18482
#               1788            2318 |*************                        2325.57159
#                842            2335 |******                               2341.50831
#                367            2352 |**                                   2358.99728
#                249            2369 |*                                    2376.38153
#                197            2386 |*                                    2393.14721
#                177            2403 |*                                    2410.19774
#                121            2420 |*                                    2428.01653
#                 92            2437 |*                                    2444.07609
#                107            2454 |*                                    2461.89720
#                 75            2471 |*                                    2478.81333
#                 82            2488 |*                                    2495.92683
#                 87            2505 |*                                    2513.19540
#                 73            2522 |*                                    2529.57534
#                116            2539 |*                                    2547.18103
#                187            2556 |*                                    2565.38503
#                343            2573 |**                                   2581.35569
#                375            2590 |**                                   2598.02667
#                313            2607 |**                                   2614.24281
#                264            2624 |*                                    2632.01894
#                230            2641 |*                                    2648.47391
#                223            2658 |*                                    2666.26906
#                245            2675 |*                                    2682.97959
#                242            2692 |*                                    2699.95868
#                205            2709 |*                                    2717.53171
#                170            2726 |*                                    2733.68824
#                 49            2743 |*                                    2744.57143
#
#                912           > 95% |******                               2800.08772
#
#        mean of 95%      2367.63759
#          95th %ile            2746
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_t8k   1   1            2363        18411        0      376     8192  -----
# bin/../bin-riscv64/msync -N msync_t8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2247                       2247
#                        max    143736                       2951
#                       mean      2515.77542                 2443.01847
#                     median      2367                       2363*
#                     stddev      1154.12440                  169.17645
#             standard error         8.28698                    1.24681
#       99% confidence level        21.34727                    3.21179
#                       skew        97.23214                    1.35480
#                   kurtosis     11623.31246                    0.45292
#           time correlation         0.04520                    0.02719
#
#               elapsed time        20.00476
#                   run time        18.17078
#          getnsecs overhead      1429
#
#          number of samples     19396
#         number of outliers       985
#    number of final samples     18411
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11            2247 |*                                    2258.90909
#                 80            2265 |*                                    2276.96250
#                581            2283 |******                               2293.74355
#               1673            2301 |******************                   2310.85714
#               2906            2319 |********************************     2327.70509
#               2759            2337 |******************************       2345.41682
#               2333            2355 |*************************            2362.92970
#               1593            2373 |*****************                    2380.80540
#                822            2391 |*********                            2398.62409
#                443            2409 |****                                 2416.16479
#                248            2427 |**                                   2434.71371
#                155            2445 |*                                    2453.09032
#                139            2463 |*                                    2471.14388
#                108            2481 |*                                    2490.07407
#                 89            2499 |*                                    2506.56180
#                 89            2517 |*                                    2524.94382
#                 97            2535 |*                                    2544.12371
#                 88            2553 |*                                    2563.13636
#                101            2571 |*                                    2580.03960
#                166            2589 |*                                    2598.29518
#                204            2607 |**                                   2616.02451
#                269            2625 |**                                   2633.50186
#                297            2643 |***                                  2651.76768
#                335            2661 |***                                  2669.68955
#                300            2679 |***                                  2687.26000
#                325            2697 |***                                  2705.87077
#                277            2715 |***                                  2723.64982
#                258            2733 |**                                   2741.79070
#                244            2751 |**                                   2759.05738
#                246            2769 |**                                   2777.71545
#                199            2787 |**                                   2794.90452
#                 55            2805 |*                                    2807.40000
#
#                921           > 95% |**********                           2869.66015
#
#        mean of 95%      2420.55209
#          95th %ile            2811
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_ta128k   1   1            2387        18625        0      372   131072  a----
# bin/../bin-riscv64/msync -N msync_ta128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /tmp/libmicro.2370/data -a 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2266                       2266
#                        max    148886                       3003
#                       mean      2539.19292                 2472.44655
#                     median      2390                       2387*
#                     stddev      1217.72025                  176.74512
#             standard error         8.74114                    1.29509
#       99% confidence level        22.51719                    3.33615
#                       skew        94.04008                    1.35758
#                   kurtosis     10901.33088                    0.49331
#           time correlation         0.04514                    0.02814
#
#               elapsed time        20.00371
#                   run time        18.14476
#          getnsecs overhead      1429
#
#          number of samples     19407
#         number of outliers       782
#    number of final samples     18625
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14            2266 |*                                    2276.92857
#                163            2285 |*                                    2297.35583
#                652            2304 |******                               2314.44018
#               1328            2323 |************                         2333.19880
#               2702            2342 |************************             2352.11362
#               3471            2361 |********************************     2369.63181
#               2274            2380 |********************                 2388.48329
#               1476            2399 |*************                        2407.26220
#                689            2418 |******                               2425.91582
#                457            2437 |****                                 2445.16630
#                283            2456 |**                                   2464.18375
#                201            2475 |*                                    2483.47264
#                138            2494 |*                                    2503.08696
#                103            2513 |*                                    2521.29126
#                105            2532 |*                                    2541.46667
#                 93            2551 |*                                    2559.34409
#                 99            2570 |*                                    2579.80808
#                119            2589 |*                                    2598.31933
#                145            2608 |*                                    2617.75172
#                202            2627 |*                                    2636.95050
#                301            2646 |**                                   2655.45847
#                335            2665 |***                                  2673.91343
#                299            2684 |**                                   2692.45819
#                283            2703 |**                                   2712.15548
#                282            2722 |**                                   2730.86879
#                250            2741 |**                                   2749.98800
#                248            2760 |**                                   2768.46371
#                264            2779 |**                                   2788.21591
#                220            2798 |**                                   2806.75909
#                221            2817 |**                                   2825.83710
#                219            2836 |**                                   2845.44292
#                 57            2855 |*                                    2857.40351
#
#                932           > 95% |********                             2920.96030
#
#        mean of 95%      2448.82055
#          95th %ile            2860
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_ta8k   1   1            2379        18129        0      383     8192  a----
# bin/../bin-riscv64/msync -N msync_ta8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /tmp/libmicro.2370/data -a 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2269                       2269
#                        max     50136                       3012
#                       mean      2524.25764                 2466.67847
#                     median      2382                       2379*
#                     stddev       534.80040                  181.75325
#             standard error         3.87791                    1.34988
#       99% confidence level         9.98950                    3.47729
#                       skew        40.85392                    1.37654
#                   kurtosis      3335.90072                    0.47262
#           time correlation         0.04308                    0.02934
#
#               elapsed time        20.00472
#                   run time        18.37074
#          getnsecs overhead      1429
#
#          number of samples     19019
#         number of outliers       890
#    number of final samples     18129
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 30            2269 |*                                    2281.23333
#                229            2288 |**                                   2300.38865
#                989            2307 |*********                            2317.99798
#               2131            2326 |*********************                2335.65040
#               3194            2345 |********************************     2354.46963
#               3006            2364 |******************************       2372.39554
#               1908            2383 |*******************                  2391.16771
#               1097            2402 |**********                           2409.83592
#                431            2421 |****                                 2428.80974
#                225            2440 |**                                   2448.19111
#                140            2459 |*                                    2466.59286
#                128            2478 |*                                    2486.70312
#                 88            2497 |*                                    2504.45455
#                 76            2516 |*                                    2524.88158
#                 96            2535 |*                                    2543.64583
#                 76            2554 |*                                    2562.15789
#                 67            2573 |*                                    2582.35821
#                 71            2592 |*                                    2602.33803
#                131            2611 |*                                    2619.80916
#                212            2630 |**                                   2638.14151
#                280            2649 |**                                   2658.64286
#                271            2668 |**                                   2676.67897
#                286            2687 |**                                   2695.63636
#                316            2706 |***                                  2715.15823
#                247            2725 |**                                   2734.18219
#                227            2744 |**                                   2753.28634
#                259            2763 |**                                   2772.01931
#                228            2782 |**                                   2791.00877
#                239            2801 |**                                   2810.28870
#                236            2820 |**                                   2828.66949
#                214            2839 |**                                   2848.50467
#                 94            2858 |*                                    2861.56383
#
#                907           > 95% |*********                            2923.88423
#
#        mean of 95%      2442.59964
#          95th %ile            2866
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
              prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_tai128k   1   1            2332        18409        0      368   131072  ai---
# bin/../bin-riscv64/msync -N msync_tai128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /tmp/libmicro.2370/data -a -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2247                       2247
#                        max    289186                       2840
#                       mean      2519.02793                 2401.09017
#                     median      2337                       2332*
#                     stddev      2231.93188                  146.33693
#             standard error        15.79162                    1.07855
#       99% confidence level        40.67921                    2.77834
#                       skew       110.33825                    1.42635
#                   kurtosis     13784.68253                    0.64283
#           time correlation         0.05236                    0.02321
#
#               elapsed time        20.00426
#                   run time        18.17929
#          getnsecs overhead      1429
#
#          number of samples     19976
#         number of outliers      1567
#    number of final samples     18409
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 27            2247 |*                                    2258.33333
#                429            2263 |****                                 2272.87179
#               1575            2279 |***************                      2287.88063
#               3244            2295 |********************************     2302.92232
#               3069            2311 |******************************       2318.30108
#               2346            2327 |***********************              2334.12788
#               1401            2343 |*************                        2349.76588
#                752            2359 |*******                              2365.71676
#                452            2375 |****                                 2381.86726
#                301            2391 |**                                   2398.20266
#                236            2407 |**                                   2414.19068
#                160            2423 |*                                    2430.43125
#                126            2439 |*                                    2446.50794
#                101            2455 |*                                    2462.39604
#                117            2471 |*                                    2477.73504
#                 82            2487 |*                                    2494.28049
#                 90            2503 |*                                    2510.21111
#                 92            2519 |*                                    2526.91304
#                121            2535 |*                                    2542.85124
#                174            2551 |*                                    2558.74713
#                207            2567 |**                                   2574.96135
#                271            2583 |**                                   2590.80074
#                297            2599 |**                                   2606.71717
#                330            2615 |***                                  2622.38182
#                322            2631 |***                                  2638.40683
#                283            2647 |**                                   2654.44170
#                251            2663 |**                                   2670.46614
#                239            2679 |**                                   2686.69456
#                203            2695 |**                                   2702.44828
#                177            2711 |*                                    2718.10734
#                 13            2727 |*                                    2727.15385
#
#                921           > 95% |*********                            2776.28339
#
#        mean of 95%      2381.33074
#          95th %ile            2728
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_tai8k   1   1            3644         7418        0      236     8192  ai---
# bin/../bin-riscv64/msync -N msync_tai8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /tmp/libmicro.2370/data -a -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      3429                       3429
#                        max    156836                       4492
#                       mean      3918.34648                 3752.17929
#                     median      3649                       3644*
#                     stddev      2059.82427                  246.85449
#             standard error        23.27374                    2.86614
#       99% confidence level        59.95314                    7.38318
#                       skew        55.33144                    1.25965
#                   kurtosis      3937.64603                    0.26331
#           time correlation         0.20989                    0.10063
#
#               elapsed time        20.00498
#                   run time         7.10936
#          getnsecs overhead      1429
#
#          number of samples      7833
#         number of outliers       415
#    number of final samples      7418
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13            3429 |*                                    3448.84615
#                103            3456 |**                                   3472.00971
#                229            3483 |******                               3496.18777
#                234            3510 |******                               3522.92308
#                364            3537 |**********                           3551.41758
#                652            3564 |******************                   3578.04755
#               1022            3591 |*****************************        3604.35127
#               1119            3618 |********************************     3630.75067
#                816            3645 |***********************              3657.02941
#                472            3672 |*************                        3683.95551
#                274            3699 |*******                              3710.90146
#                144            3726 |****                                 3737.54861
#                 57            3753 |*                                    3766.56140
#                 53            3780 |*                                    3792.79245
#                 40            3807 |*                                    3818.02500
#                 30            3834 |*                                    3845.86667
#                 27            3861 |*                                    3876.07407
#                 26            3888 |*                                    3901.76923
#                 23            3915 |*                                    3928.04348
#                 32            3942 |*                                    3956.15625
#                 47            3969 |*                                    3984.68085
#                 75            3996 |**                                   4009.80000
#                 91            4023 |**                                   4037.36264
#                160            4050 |****                                 4063.52500
#                162            4077 |****                                 4090.45062
#                195            4104 |*****                                4117.55897
#                161            4131 |****                                 4143.12422
#                130            4158 |***                                  4171.05385
#                104            4185 |**                                   4197.86538
#                 84            4212 |**                                   4224.19048
#                 87            4239 |**                                   4251.82759
#                 21            4266 |*                                    4269.57143
#
#                371           > 95% |**********                           4361.02156
#
#        mean of 95%      3720.12587
#          95th %ile            4273
#
# WARNINGS
#     Actual benchmark run time only accounts for 35.5% of elapsed time.
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_ti128k   1   1            2450        18502        0      357   131072  -i---
# bin/../bin-riscv64/msync -N msync_ti128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /tmp/libmicro.2370/data -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2257                       2257
#                        max    399136                       2977
#                       mean      2618.17112                 2510.33018
#                     median      2455                       2450*
#                     stddev      2961.36943                  155.41071
#             standard error        21.05245                    1.14254
#       99% confidence level        54.23111                    2.94318
#                       skew       123.64886                    1.29978
#                   kurtosis     16322.96687                    0.54687
#           time correlation         0.05264                    0.02550
#
#               elapsed time        20.00439
#                   run time        18.21009
#          getnsecs overhead      1429
#
#          number of samples     19787
#         number of outliers      1285
#    number of final samples     18502
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 19            2257 |*                                    2270.15789
#                 70            2276 |*                                    2286.64286
#                223            2295 |***                                  2305.20179
#                285            2314 |***                                  2321.76491
#                184            2333 |**                                   2341.60870
#                293            2352 |***                                  2362.63140
#               1059            2371 |**************                       2381.59112
#               2042            2390 |***************************          2399.84672
#               2267            2409 |******************************       2418.15439
#               2348            2428 |********************************     2437.17249
#               2157            2447 |*****************************        2455.50116
#               1472            2466 |********************                 2474.27174
#                927            2485 |************                         2492.82740
#                507            2504 |******                               2512.07101
#                228            2523 |***                                  2531.15789
#                122            2542 |*                                    2550.33607
#                115            2561 |*                                    2569.84348
#                 71            2580 |*                                    2589.91549
#                 93            2599 |*                                    2607.49462
#                 75            2618 |*                                    2626.56000
#                 94            2637 |*                                    2646.93617
#                158            2656 |**                                   2664.34810
#                255            2675 |***                                  2684.86275
#                365            2694 |****                                 2702.99726
#                396            2713 |*****                                2722.05051
#                366            2732 |****                                 2740.82787
#                301            2751 |****                                 2759.82724
#                258            2770 |***                                  2778.86434
#                258            2789 |***                                  2798.01938
#                271            2808 |***                                  2816.93358
#                242            2827 |***                                  2835.49587
#                 55            2846 |*                                    2848.16364
#
#                926           > 95% |************                         2903.78726
#
#        mean of 95%      2489.60071
#          95th %ile            2851
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_ti8k   1   1            2357        18190        0      377     8192  -i---
# bin/../bin-riscv64/msync -N msync_ti8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /tmp/libmicro.2370/data -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2229                       2229
#                        max    106286                       2909
#                       mean      2506.55312                 2432.09725
#                     median      2361                       2357*
#                     stddev       951.72813                  158.83361
#             standard error         6.85816                    1.17768
#       99% confidence level        17.66661                    3.03369
#                       skew        74.43993                    1.36634
#                   kurtosis      7582.59133                    0.49859
#           time correlation         0.04430                    0.02580
#
#               elapsed time        20.00402
#                   run time        18.03273
#          getnsecs overhead      1429
#
#          number of samples     19258
#         number of outliers      1068
#    number of final samples     18190
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            2229 |*                                    2229.00000
#                  8            2247 |*                                    2258.87500
#                117            2265 |*                                    2277.25641
#                751            2283 |*******                              2293.45939
#               1743            2301 |*****************                    2310.55192
#               3248            2319 |********************************     2328.05357
#               2935            2337 |****************************         2345.04293
#               2136            2355 |*********************                2363.05478
#               1254            2373 |************                         2380.30223
#                617            2391 |******                               2398.60454
#                399            2409 |***                                  2416.94486
#                235            2427 |**                                   2435.45106
#                157            2445 |*                                    2452.11465
#                119            2463 |*                                    2470.36134
#                 88            2481 |*                                    2489.38636
#                 73            2499 |*                                    2507.69863
#                100            2517 |*                                    2525.65000
#                100            2535 |*                                    2543.44000
#                101            2553 |*                                    2562.01980
#                122            2571 |*                                    2580.09016
#                171            2589 |*                                    2597.78363
#                296            2607 |**                                   2616.09797
#                389            2625 |***                                  2633.83033
#                401            2643 |***                                  2651.62843
#                371            2661 |***                                  2669.30728
#                321            2679 |***                                  2687.02804
#                269            2697 |**                                   2705.24535
#                216            2715 |**                                   2723.52778
#                237            2733 |**                                   2741.32068
#                200            2751 |*                                    2759.22000
#                105            2769 |*                                    2773.51429
#
#                910           > 95% |********                             2835.84835
#
#        mean of 95%      2410.83490
#          95th %ile            2779
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
               prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wait128k   1   1            2804        15578        0      272   131072  ai-w-
# bin/../bin-riscv64/msync -N msync_wait128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /tmp/libmicro.2370/data -a -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2711                       2711
#                        max   2533286                       2911
#                       mean      3168.20149                 2809.75735
#                     median      2824                       2804*
#                     stddev     17246.64755                   33.66285
#             standard error       116.22142                    0.26971
#       99% confidence level       299.38637                    0.69477
#                       skew       143.78570                    0.65844
#                   kurtosis     21039.55857                    0.08482
#           time correlation         0.09131                    0.00721
#
#               elapsed time        20.00395
#                   run time        17.85839
#          getnsecs overhead      1429
#
#          number of samples     22021
#         number of outliers      6443
#    number of final samples     15578
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            2711 |*                                    2711.00000
#                  2            2717 |*                                    2719.00000
#                  9            2723 |*                                    2726.00000
#                 13            2729 |*                                    2731.69231
#                 28            2735 |*                                    2737.92857
#                 61            2741 |*                                    2744.09836
#                133            2747 |***                                  2749.99248
#                238            2753 |*****                                2755.79832
#                358            2759 |********                             2761.68994
#                591            2765 |*************                        2767.78003
#                776            2771 |******************                   2773.64820
#               1011            2777 |***********************              2779.55292
#               1232            2783 |****************************         2785.50649
#               1283            2789 |******************************       2791.55183
#               1366            2795 |********************************     2797.47511
#               1273            2801 |*****************************        2803.54438
#               1079            2807 |*************************            2809.46895
#                950            2813 |**********************               2815.41895
#                715            2819 |****************                     2821.40559
#                642            2825 |***************                      2827.40654
#                598            2831 |**************                       2833.43645
#                542            2837 |************                         2839.54982
#                435            2843 |**********                           2845.56092
#                418            2849 |*********                            2851.43301
#                373            2855 |********                             2857.60322
#                298            2861 |******                               2863.43624
#                276            2867 |******                               2869.47826
#                 98            2873 |**                                   2873.86735
#
#                779           > 95% |******************                   2890.26316
#
#        mean of 95%      2805.51963
#          95th %ile            2875
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wait8k   1   1            2379        18696        0      356     8192  ai-w-
# bin/../bin-riscv64/msync -N msync_wait8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /tmp/libmicro.2370/data -a -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2276                       2276
#                        max    424386                       2909
#                       mean      2579.78512                 2451.55269
#                     median      2385                       2379*
#                     stddev      3268.36195                  152.35619
#             standard error        23.04522                    1.11426
#       99% confidence level        59.36450                    2.87033
#                       skew       113.95809                    1.39596
#                   kurtosis     14152.27074                    0.57329
#           time correlation         0.05645                    0.02400
#
#               elapsed time        20.00392
#                   run time        18.02825
#          getnsecs overhead      1429
#
#          number of samples     20114
#         number of outliers      1418
#    number of final samples     18696
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8            2276 |*                                    2286.75000
#                105            2292 |*                                    2302.03810
#                687            2308 |******                               2317.62009
#               1673            2324 |***************                      2331.78661
#               2126            2340 |********************                 2348.04657
#               3368            2356 |********************************     2363.77435
#               2339            2372 |**********************               2378.44934
#               1506            2388 |**************                       2395.23506
#               1033            2404 |*********                            2410.47047
#                535            2420 |*****                                2426.85047
#                303            2436 |**                                   2443.18482
#                242            2452 |**                                   2459.04545
#                201            2468 |*                                    2475.33333
#                145            2484 |*                                    2491.19310
#                108            2500 |*                                    2507.24074
#                 99            2516 |*                                    2523.87879
#                 87            2532 |*                                    2539.47126
#                 72            2548 |*                                    2555.51389
#                 71            2564 |*                                    2571.43662
#                101            2580 |*                                    2587.02970
#                115            2596 |*                                    2604.45217
#                160            2612 |*                                    2620.31875
#                232            2628 |**                                   2635.22845
#                314            2644 |**                                   2651.84713
#                314            2660 |**                                   2667.16879
#                309            2676 |**                                   2682.91909
#                339            2692 |***                                  2699.37168
#                284            2708 |**                                   2715.59859
#                270            2724 |**                                   2730.98519
#                262            2740 |**                                   2747.33588
#                192            2756 |*                                    2763.16146
#                161            2772 |*                                    2778.01242
#
#                935           > 95% |********                             2839.38075
#
#        mean of 95%      2431.13608
#          95th %ile            2785
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
              prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wat128k   1   1            2660        15438        0      286   131072  a--w-
# bin/../bin-riscv64/msync -N msync_wat128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /tmp/libmicro.2370/data -a 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2581                       2581
#                        max   2511436                       2764
#                       mean      3010.33635                 2664.77484
#                     median      2681                       2660*
#                     stddev     17060.07416                   33.05366
#             standard error       114.76886                    0.26603
#       99% confidence level       295.64459                    0.68528
#                       skew       144.27674                    0.60542
#                   kurtosis     21159.20929                    0.10201
#           time correlation         0.08738                    0.00717
#
#               elapsed time        20.00429
#                   run time        17.85485
#          getnsecs overhead      1429
#
#          number of samples     22096
#         number of outliers      6658
#    number of final samples     15438
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1            2581 |*                                    2581.00000
#                 10            2586 |*                                    2588.40000
#                 17            2591 |*                                    2594.00000
#                 46            2596 |*                                    2598.13043
#                114            2601 |***                                  2603.15789
#                180            2606 |****                                 2608.11667
#                293            2611 |********                             2613.22184
#                386            2616 |**********                           2618.10622
#                497            2621 |*************                        2622.98994
#                531            2626 |**************                       2628.10546
#                675            2631 |******************                   2633.00444
#                798            2636 |**********************               2638.03133
#               1100            2641 |******************************       2643.09727
#               1158            2646 |********************************     2648.00604
#               1115            2651 |******************************       2653.00000
#               1003            2656 |***************************          2658.00299
#                897            2661 |************************             2662.96656
#                799            2666 |**********************               2667.97747
#                699            2671 |*******************                  2672.87124
#                636            2676 |*****************                    2677.88994
#                618            2681 |*****************                    2682.98220
#                660            2686 |******************                   2688.00000
#                549            2691 |***************                      2693.00546
#                437            2696 |************                         2697.93822
#                394            2701 |**********                           2702.90609
#                314            2706 |********                             2707.92038
#                231            2711 |******                               2712.88312
#                203            2716 |*****                                2717.75369
#                206            2721 |*****                                2723.05825
#                 99            2726 |**                                   2727.26263
#
#                772           > 95% |*********************                2744.47280
#
#        mean of 95%      2660.57964
#          95th %ile            2729
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wat8k   1   1            2348        18695        0      361     8192  a--w-
# bin/../bin-riscv64/msync -N msync_wat8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /tmp/libmicro.2370/data -a 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2255                       2255
#                        max    405086                       2870
#                       mean      2538.96204                 2417.82225
#                     median      2354                       2348*
#                     stddev      3124.28356                  150.60036
#             standard error        21.99491                    1.10145
#       99% confidence level        56.65888                    2.83733
#                       skew       113.76051                    1.42305
#                   kurtosis     14065.89692                    0.64669
#           time correlation         0.05370                    0.02362
#
#               elapsed time        20.00460
#                   run time        18.08283
#          getnsecs overhead      1429
#
#          number of samples     20177
#         number of outliers      1482
#    number of final samples     18695
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 45            2255 |*                                    2265.48889
#                397            2271 |****                                 2280.05542
#               1121            2287 |***********                          2295.67529
#               2508            2303 |**************************           2311.28708
#               3028            2319 |********************************     2326.55185
#               2556            2335 |***************************          2342.29304
#               1844            2351 |*******************                  2357.98319
#               1197            2367 |************                         2373.75689
#                595            2383 |******                               2390.16975
#                405            2399 |****                                 2405.86173
#                233            2415 |**                                   2422.14592
#                185            2431 |*                                    2438.02162
#                163            2447 |*                                    2454.45399
#                134            2463 |*                                    2470.07463
#                124            2479 |*                                    2485.44355
#                104            2495 |*                                    2501.86538
#                 99            2511 |*                                    2519.14141
#                 83            2527 |*                                    2534.34940
#                 83            2543 |*                                    2550.14458
#                 80            2559 |*                                    2568.11250
#                131            2575 |*                                    2583.22901
#                202            2591 |**                                   2599.08416
#                308            2607 |***                                  2614.75000
#                322            2623 |***                                  2630.45031
#                324            2639 |***                                  2646.17284
#                285            2655 |***                                  2662.33333
#                281            2671 |**                                   2678.51246
#                255            2687 |**                                   2694.90980
#                225            2703 |**                                   2710.16889
#                213            2719 |**                                   2726.65728
#                173            2735 |*                                    2742.43931
#                 57            2751 |*                                    2752.33333
#
#                935           > 95% |*********                            2803.00856
#
#        mean of 95%      2397.54358
#          95th %ile            2754
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
              prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wit128k   1   1            2712        15871        0      279   131072  -i-w-
# bin/../bin-riscv64/msync -N msync_wit128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /tmp/libmicro.2370/data -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2615                       2615
#                        max   2557986                       2840
#                       mean      3071.75856                 2718.92823
#                     median      2735                       2712*
#                     stddev     17343.07587                   40.25863
#             standard error       116.54093                    0.31956
#       99% confidence level       300.20943                    0.82320
#                       skew       144.71739                    0.66006
#                   kurtosis     21271.74388                    0.05298
#           time correlation         0.09024                    0.00849
#
#               elapsed time        20.00323
#                   run time        17.82826
#          getnsecs overhead      1429
#
#          number of samples     22146
#         number of outliers      6275
#    number of final samples     15871
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4            2615 |*                                    2618.25000
#                  8            2621 |*                                    2624.00000
#                  9            2627 |*                                    2631.11111
#                 34            2633 |*                                    2636.11765
#                 56            2639 |*                                    2641.96429
#                119            2645 |***                                  2647.89076
#                175            2651 |*****                                2653.68000
#                291            2657 |********                             2659.75601
#                450            2663 |*************                        2665.68667
#                560            2669 |****************                     2671.70714
#                775            2675 |**********************               2677.66581
#               1002            2681 |*****************************        2683.53792
#               1043            2687 |******************************       2689.49281
#               1094            2693 |********************************     2695.49543
#               1083            2699 |*******************************      2701.46999
#                955            2705 |***************************          2707.46283
#                960            2711 |****************************         2713.48438
#                888            2717 |*************************            2719.52815
#                836            2723 |************************             2725.51196
#                689            2729 |********************                 2731.41509
#                610            2735 |*****************                    2737.39016
#                530            2741 |***************                      2743.47358
#                494            2747 |**************                       2749.53644
#                501            2753 |**************                       2755.45110
#                429            2759 |************                         2761.35198
#                378            2765 |***********                          2767.25661
#                322            2771 |*********                            2773.51863
#                259            2777 |*******                              2779.53282
#                264            2783 |*******                              2785.45455
#                195            2789 |*****                                2791.48205
#                 64            2795 |*                                    2795.59375
#
#                794           > 95% |***********************              2815.57935
#
#        mean of 95%      2713.83830
#          95th %ile            2797
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wit8k   1   1            2352        18763        0      363     8192  -i-w-
# bin/../bin-riscv64/msync -N msync_wit8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /tmp/libmicro.2370/data -i 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2248                       2248
#                        max    419736                       2929
#                       mean      2543.65190                 2430.27874
#                     median      2357                       2352*
#                     stddev      3205.09651                  166.08207
#             standard error        22.57782                    1.21247
#       99% confidence level        58.16047                    3.12333
#                       skew       116.31874                    1.46622
#                   kurtosis     14595.57060                    0.78120
#           time correlation         0.05350                    0.02568
#
#               elapsed time        20.00412
#                   run time        18.20115
#          getnsecs overhead      1429
#
#          number of samples     20152
#         number of outliers      1389
#    number of final samples     18763
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9            2248 |*                                    2261.33333
#                139            2266 |*                                    2278.33813
#                891            2284 |********                             2294.48148
#               2451            2302 |**********************               2311.54100
#               3551            2320 |********************************     2328.52380
#               2831            2338 |*************************            2345.99541
#               1922            2356 |*****************                    2363.67638
#               1051            2374 |*********                            2381.50333
#                596            2392 |*****                                2399.81879
#                371            2410 |***                                  2417.75472
#                231            2428 |**                                   2436.16450
#                174            2446 |*                                    2454.52299
#                143            2464 |*                                    2472.32867
#                119            2482 |*                                    2490.93277
#                110            2500 |*                                    2508.13636
#                 98            2518 |*                                    2527.17347
#                 97            2536 |*                                    2544.58763
#                 83            2554 |*                                    2562.90361
#                 91            2572 |*                                    2581.10989
#                142            2590 |*                                    2599.30282
#                244            2608 |**                                   2616.54918
#                281            2626 |**                                   2635.04982
#                327            2644 |**                                   2652.31804
#                308            2662 |**                                   2670.26299
#                238            2680 |**                                   2688.46639
#                246            2698 |**                                   2706.64634
#                241            2716 |**                                   2724.29876
#                227            2734 |**                                   2742.67401
#                204            2752 |*                                    2760.75980
#                202            2770 |*                                    2778.57921
#                168            2788 |*                                    2796.65476
#                 38            2806 |*                                    2807.31579
#
#                939           > 95% |********                             2862.23536
#
#        mean of 95%      2407.52250
#          95th %ile            2810
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wt128k   1   1            2688        19811        0      302   131072  ---w-
# bin/../bin-riscv64/msync -N msync_wt128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2569                       2569
#                        max   2267936                       3287
#                       mean      2945.46836                 2767.43400
#                     median      2693                       2688*
#                     stddev     15651.90958                  173.08970
#             standard error       107.84679                    1.22975
#       99% confidence level       277.81333                    3.16784
#                       skew       143.91467                    1.38622
#                   kurtosis     20818.01362                    0.52330
#           time correlation         0.07147                    0.02579
#
#               elapsed time        20.00417
#                   run time        17.98045
#          getnsecs overhead      1429
#
#          number of samples     21063
#         number of outliers      1252
#    number of final samples     19811
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10            2569 |*                                    2579.90000
#                 86            2587 |*                                    2597.67442
#                600            2605 |******                               2615.59500
#               1982            2623 |*********************                2632.77397
#               2975            2641 |********************************     2649.74857
#               2810            2659 |******************************       2667.03843
#               2170            2677 |***********************              2685.20783
#               1645            2695 |*****************                    2703.16900
#               1156            2713 |************                         2721.03201
#                677            2731 |*******                              2738.71640
#                411            2749 |****                                 2757.02190
#                280            2767 |***                                  2774.72857
#                218            2785 |**                                   2793.07339
#                139            2803 |*                                    2811.18705
#                118            2821 |*                                    2829.23729
#                 79            2839 |*                                    2847.92405
#                 88            2857 |*                                    2866.77273
#                 87            2875 |*                                    2883.34483
#                 95            2893 |*                                    2900.06316
#                 92            2911 |*                                    2918.65217
#                104            2929 |*                                    2938.39423
#                129            2947 |*                                    2956.59690
#                193            2965 |**                                   2974.25907
#                246            2983 |**                                   2991.95122
#                321            3001 |***                                  3009.22430
#                360            3019 |***                                  3027.60556
#                367            3037 |***                                  3045.36512
#                338            3055 |***                                  3063.43491
#                339            3073 |***                                  3080.90855
#                260            3091 |**                                   3099.59231
#                227            3109 |**                                   3116.61233
#                218            3127 |**                                   3135.36697
#
#                991           > 95% |**********                           3204.11201
#
#        mean of 95%      2744.43996
#          95th %ile            3143
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
msync_wt8k   1   1            2370        18031        0      383     8192  ---w-
# bin/../bin-riscv64/msync -N msync_wt8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2265                       2265
#                        max    150436                       2925
#                       mean      2519.13778                 2446.18208
#                     median      2374                       2370*
#                     stddev      1164.58487                  159.49213
#             standard error         8.43238                    1.18776
#       99% confidence level        21.72182                    3.05967
#                       skew       108.30489                    1.36259
#                   kurtosis     13652.25249                    0.51283
#           time correlation         0.04445                    0.02622
#
#               elapsed time        20.00417
#                   run time        18.36952
#          getnsecs overhead      1429
#
#          number of samples     19074
#         number of outliers      1043
#    number of final samples     18031
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 28            2265 |*                                    2277.28571
#                252            2282 |**                                   2291.37302
#                659            2299 |*******                              2308.65250
#               1812            2316 |*******************                  2325.09327
#               2875            2333 |*******************************      2341.29913
#               2952            2350 |********************************     2357.50237
#               2038            2367 |**********************               2374.38763
#               1215            2384 |*************                        2390.91440
#                693            2401 |*******                              2408.24675
#                363            2418 |***                                  2425.60331
#                232            2435 |**                                   2442.64655
#                161            2452 |*                                    2458.85714
#                146            2469 |*                                    2476.69863
#                112            2486 |*                                    2494.22321
#                 94            2503 |*                                    2511.58511
#                110            2520 |*                                    2527.64545
#                126            2537 |*                                    2545.55556
#                141            2554 |*                                    2562.13475
#                154            2571 |*                                    2579.61688
#                159            2588 |*                                    2596.00000
#                180            2605 |*                                    2612.90000
#                248            2622 |**                                   2630.49194
#                313            2639 |***                                  2646.84026
#                338            2656 |***                                  2663.98817
#                304            2673 |***                                  2680.92105
#                279            2690 |***                                  2697.70609
#                285            2707 |***                                  2714.79649
#                221            2724 |**                                   2732.00905
#                203            2741 |**                                   2748.35961
#                217            2758 |**                                   2765.69585
#                172            2775 |*                                    2782.90116
#                 47            2792 |*                                    2794.14894
#
#                902           > 95% |*********                            2852.58980
#
#        mean of 95%      2424.78096
#          95th %ile            2797
#
# Usage: msync
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'msync')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-a (specify MS_ASYNC rather than default MS_SYNC)
#     [-f file-to-map (default /dev/zero)]
#     [-i (specify MS_INVALIDATE)
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page between msyncs)
#     [-w] (write a byte to each page between msyncs)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures msync()
         prc thr      nsecs/call      samples   errors cnt/samp holdtime
mutex_mt   1   1             121        23279        0     5526        0
# bin/../bin-riscv64/mutex -N mutex_mt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       114                        114
#                        max    316236                        137
#                       mean       143.50941                  122.67284
#                     median       122                        121*
#                     stddev      2053.46931                    4.65078
#             standard error        13.06459                    0.03048
#       99% confidence level        33.65438                    0.07852
#                       skew       148.91531                    1.24991
#                   kurtosis     22763.88387                    0.78597
#           time correlation         0.00555                    0.00063
#
#               elapsed time        20.00849
#                   run time        16.98506
#          getnsecs overhead      1429
#
#          number of samples     24705
#         number of outliers      1426
#    number of final samples     23279
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2             114 |*                                             -
#                 29             115 |*                                             -
#                206             116 |*                                             -
#                732             117 |******                                        -
#               1856             118 |*****************                             -
#               2922             119 |***************************                   -
#               3350             120 |********************************              -
#               3015             121 |****************************                  -
#               3009             122 |****************************                  -
#               1975             123 |******************                            -
#               1034             124 |*********                                     -
#                529             125 |*****                                         -
#                318             126 |***                                           -
#                276             127 |**                                            -
#                396             128 |***                                           -
#                631             129 |******                                        -
#                605             130 |*****                                         -
#                555             131 |*****                                         -
#                508             132 |****                                          -
#                167             133 |*                                             -
#
#               1164           > 95% |***********                           134.76289
#
#        mean of 95%       122.03649
#          95th %ile             133
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: mutex
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mutex')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-t] (create dummy thread so we are multithreaded)
#     [-s] (use inter-process mutex (not support everywhere))
#     [-h usecs] (specify mutex hold time (default 0)
# notes: measures uncontended pthread_mutex_[un,]lock
          prc thr      nsecs/call      samples   errors cnt/samp holdtime
mutex_mts   1   1             116        19349        0     7548        0
# bin/../bin-riscv64/mutex -N mutex_mts -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -t -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       107                        107
#                        max     44336                        135
#                       mean       122.16100                  118.24151
#                     median       117                        116*
#                     stddev       312.86787                    5.42811
#             standard error         2.20784                    0.03902
#       99% confidence level         5.68741                    0.10052
#                       skew       140.57958                    0.87214
#                   kurtosis     19859.35614                    0.05693
#           time correlation         0.00199                    0.00092
#
#               elapsed time        20.00735
#                   run time        18.11247
#          getnsecs overhead      1429
#
#          number of samples     20081
#         number of outliers       732
#    number of final samples     19349
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2             107 |*                                             -
#                  3             108 |*                                             -
#                  8             109 |*                                             -
#                107             110 |*                                             -
#                304             111 |***                                           -
#                802             112 |*********                                     -
#               2806             113 |*******************************               -
#               2812             114 |********************************              -
#               1890             115 |*********************                         -
#               1140             116 |************                                  -
#                576             117 |******                                        -
#                428             118 |****                                          -
#                538             119 |******                                        -
#               1395             120 |***************                               -
#               1537             121 |*****************                             -
#               1295             122 |**************                                -
#                721             123 |********                                      -
#                530             124 |******                                        -
#                311             125 |***                                           -
#                281             126 |***                                           -
#                300             127 |***                                           -
#                324             128 |***                                           -
#                271             129 |***                                           -
#
#                968           > 95% |***********                           131.58161
#
#        mean of 95%       117.53898
#          95th %ile             129
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: mutex
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mutex')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-t] (create dummy thread so we are multithreaded)
#     [-s] (use inter-process mutex (not support everywhere))
#     [-h usecs] (specify mutex hold time (default 0)
# notes: measures uncontended pthread_mutex_[un,]lock
         prc thr      nsecs/call      samples   errors cnt/samp holdtime
mutex_st   1   1             101        22333        0     7078        0
# bin/../bin-riscv64/mutex -N mutex_st -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        95                         95
#                        max    195186                        114
#                       mean       115.33965                  102.15869
#                     median       101                        101*
#                     stddev      1288.46781                    3.78579
#             standard error         8.40539                    0.02533
#       99% confidence level        21.65230                    0.06526
#                       skew       148.25197                    1.25809
#                   kurtosis     22369.81032                    0.94643
#           time correlation         0.00379                    0.00052
#
#               elapsed time        20.00394
#                   run time        17.15651
#          getnsecs overhead      1429
#
#          number of samples     23498
#         number of outliers      1165
#    number of final samples     22333
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 55              95 |*                                             -
#                437              96 |**                                            -
#                512              97 |**                                            -
#                427              98 |**                                            -
#               1911              99 |***********                                   -
#               5480             100 |********************************              -
#               4962             101 |****************************                  -
#               2662             102 |***************                               -
#               1063             103 |******                                        -
#                456             104 |**                                            -
#                248             105 |*                                             -
#                340             106 |*                                             -
#                618             107 |***                                           -
#                789             108 |****                                          -
#                722             109 |****                                          -
#                534             110 |***                                           -
#
#               1117           > 95% |******                                112.06714
#
#        mean of 95%       101.63702
#          95th %ile             110
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: mutex
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mutex')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-t] (create dummy thread so we are multithreaded)
#     [-s] (use inter-process mutex (not support everywhere))
#     [-h usecs] (specify mutex hold time (default 0)
# notes: measures uncontended pthread_mutex_[un,]lock
          prc thr      nsecs/call      samples   errors cnt/samp holdtime
mutex_sts   1   1             112        19466        0     7902        0
# bin/../bin-riscv64/mutex -N mutex_sts -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        97                         97
#                        max     41736                        131
#                       mean       116.97178                  112.85205
#                     median       112                        112*
#                     stddev       295.15174                    6.02430
#             standard error         2.08397                    0.04318
#       99% confidence level         5.36830                    0.11123
#                       skew       139.81778                    0.66844
#                   kurtosis     19707.76859                   -0.05872
#           time correlation         0.00217                    0.00104
#
#               elapsed time        20.00431
#                   run time        18.12282
#          getnsecs overhead      1429
#
#          number of samples     20059
#         number of outliers       593
#    number of final samples     19466
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1              97 |*                                             -
#                  0              98 |                                              -
#                  1              99 |*                                             -
#                  1             100 |*                                             -
#                 48             101 |*                                             -
#                171             102 |**                                            -
#                179             103 |***                                           -
#                301             104 |*****                                         -
#                516             105 |********                                      -
#               1088             106 |******************                            -
#               1380             107 |***********************                       -
#               1810             108 |******************************                -
#               1904             109 |********************************              -
#               1270             110 |*********************                         -
#                860             111 |**************                                -
#                638             112 |**********                                    -
#                803             113 |*************                                 -
#                975             114 |****************                              -
#               1276             115 |*********************                         -
#               1401             116 |***********************                       -
#               1111             117 |******************                            -
#                701             118 |***********                                   -
#                477             119 |********                                      -
#                294             120 |****                                          -
#                262             121 |****                                          -
#                286             122 |****                                          -
#                318             123 |*****                                         -
#                314             124 |*****                                         -
#                106             125 |*                                             -
#
#                974           > 95% |****************                      127.17043
#
#        mean of 95%       112.09788
#          95th %ile             125
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: mutex
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'mutex')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-t] (create dummy thread so we are multithreaded)
#     [-s] (use inter-process mutex (not support everywhere))
#     [-h usecs] (specify mutex hold time (default 0)
# notes: measures uncontended pthread_mutex_[un,]lock
          prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep   1   1         3898371         4891        0        1        1        no     libc
# bin/../bin-riscv64/nanosleep -N nanosleep -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1518571                    3088371
#                        max   6906771                    4653971
#                       mean   3884676.59636              3885227.99550
#                     median   3898371                    3898371*
#                     stddev    327335.80831               265904.58072
#             standard error      4630.61679                 3802.13022
#       99% confidence level     11928.46885                 9794.28746
#                       skew        -0.10861                   -0.13218
#                   kurtosis         8.46915                    0.29971
#           time correlation       201.38335                  181.14318
#
#               elapsed time        20.01029
#                   run time        19.42247
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       106
#    number of final samples      4891
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13         3088371 |*                                 3105940.23077
#                 17         3127203 |*                                 3144771.00000
#                  9         3166035 |*                                 3180115.44444
#                 21         3204867 |*                                 3227266.23810
#                 32         3243699 |**                                3264196.00000
#                 35         3282531 |**                                3300111.00000
#                 48         3321363 |***                               3339768.91667
#                 54         3360195 |***                               3380139.51852
#                 54         3399027 |***                               3418978.40741
#                 89         3437859 |******                            3458583.35955
#                 89         3476691 |******                            3495833.92135
#                 99         3515523 |******                            3534986.15152
#                111         3554355 |*******                           3574003.43243
#                122         3593187 |********                          3614000.22131
#                178         3632019 |************                      3652943.47191
#                158         3670851 |**********                        3690938.08861
#                166         3709683 |***********                       3731517.98795
#                201         3748515 |*************                     3769017.76617
#                232         3787347 |***************                   3806884.79310
#                343         3826179 |***********************           3847591.11662
#                439         3865011 |******************************    3885012.45786
#                468         3903843 |********************************  3922460.95726
#                354         3942675 |************************          3960515.06780
#                225         3981507 |***************                   4000471.88889
#                203         4020339 |*************                     4040020.75369
#                184         4059171 |************                      4078796.54348
#                179         4098003 |************                      4117238.03911
#                166         4136835 |***********                       4155371.00000
#                115         4175667 |*******                           4194351.00000
#                 87         4214499 |*****                             4232221.57471
#                 84         4253331 |*****                             4272266.23810
#                 71         4292163 |****                              4311030.15493
#
#                245           > 95% |****************                  4444424.46939
#
#        mean of 95%   3855739.58911
#          95th %ile         4330971
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
              prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep_d10   1   1         3878671         4858        0        1       10        no     libc
# bin/../bin-riscv64/nanosleep -N nanosleep_d10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1414871                    3120371
#                        max   6156571                    4628671
#                       mean   3872160.60676              3872962.63545
#                     median   3878571                    3878671*
#                     stddev    333684.37698               253459.62798
#             standard error      4720.42606                 3636.47024
#       99% confidence level     12159.81752                 9367.54734
#                       skew        -0.20666                   -0.07242
#                   kurtosis         9.55038                    0.41665
#           time correlation       199.73302                  173.04701
#
#               elapsed time        20.00949
#                   run time        19.35955
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       139
#    number of final samples      4858
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9         3120371 |*                                 3134371.00000
#                 16         3157690 |*                                 3172539.75000
#                 14         3195009 |*                                 3214611.35714
#                 32         3232328 |**                                3254139.75000
#                 38         3269647 |**                                3287005.21053
#                 41         3306966 |***                               3329673.43902
#                 48         3344285 |***                               3364498.08333
#                 50         3381604 |***                               3402069.00000
#                 70         3418923 |*****                             3437542.42857
#                 68         3456242 |*****                             3476446.00000
#                 79         3493561 |*****                             3513919.10127
#                 90         3530880 |******                            3550796.55556
#                114         3568199 |********                          3587320.12281
#                126         3605518 |*********                         3624861.47619
#                167         3642837 |************                      3661219.50299
#                160         3680156 |************                      3700304.12500
#                199         3717475 |***************                   3737357.43216
#                221         3754794 |****************                  3774115.34389
#                329         3792113 |************************          3811578.90274
#                417         3829432 |*******************************   3848763.56595
#                423         3866751 |********************************  3884189.91253
#                389         3904070 |*****************************     3921928.06941
#                344         3941389 |**************************        3958933.50000
#                223         3978708 |****************                  3996639.60987
#                189         4016027 |**************                    4035569.94180
#                175         4053346 |*************                     4071240.71429
#                163         4090665 |************                      4108763.02454
#                116         4127984 |********                          4145720.13793
#                 85         4165303 |******                            4182329.82353
#                 75         4202622 |*****                             4221320.33333
#                 83         4239941 |******                            4258664.97590
#                 62         4277260 |****                              4295332.29032
#
#                243           > 95% |******************                4420346.30864
#
#        mean of 95%   3844140.48321
#          95th %ile         4314571
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
               prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep_d100   1   1         3889371         4867        0        1      100        no     libc
# bin/../bin-riscv64/nanosleep -N nanosleep_d100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1367371                    3152271
#                        max   6285771                    4617771
#                       mean   3882058.56051              3886645.91268
#                     median   3888671                    3889371*
#                     stddev    316271.02075               244970.12234
#             standard error      4473.19501                 3511.41731
#       99% confidence level     11522.95035                 9045.41100
#                       skew        -0.06475                   -0.13345
#                   kurtosis         9.91739                    0.38898
#           time correlation       190.40587                  167.09476
#
#               elapsed time        20.00891
#                   run time        19.41626
#          getnsecs overhead      1429
#
#          number of samples      4999
#         number of outliers       132
#    number of final samples      4867
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 12         3152271 |*                                 3166796.00000
#                 15         3188247 |*                                 3206644.33333
#                 23         3224223 |*                                 3246057.95652
#                 27         3260199 |*                                 3280145.07407
#                 34         3296175 |**                                3311241.58824
#                 40         3332151 |**                                3348653.50000
#                 37         3368127 |**                                3386033.16216
#                 44         3404103 |**                                3420298.27273
#                 65         3440079 |***                               3458586.38462
#                 55         3476055 |***                               3492834.63636
#                 77         3512031 |****                              3530856.71429
#                 90         3548007 |*****                             3567082.11111
#                123         3583983 |*******                           3601756.36585
#                137         3619959 |********                          3637898.00730
#                174         3655935 |**********                        3674567.55172
#                121         3691911 |*******                           3708310.66942
#                164         3727887 |*********                         3745687.46341
#                226         3763863 |*************                     3783148.43363
#                299         3799839 |******************                3818663.64214
#                402         3835815 |************************          3854704.58209
#                528         3871791 |********************************  3889217.21212
#                385         3907767 |***********************           3925572.55844
#                312         3943743 |******************                3959912.98718
#                179         3979719 |**********                        3996538.03911
#                187         4015695 |***********                       4033804.68984
#                203         4051671 |************                      4070372.47783
#                152         4087647 |*********                         4106422.31579
#                155         4123623 |*********                         4143131.00000
#                116         4159599 |*******                           4178177.03448
#                 94         4195575 |*****                             4212040.14894
#                 77         4231551 |****                              4250211.25974
#                 70         4267527 |****                              4285059.57143
#
#                244           > 95% |**************                    4402418.54098
#
#        mean of 95%   3859423.64979
#          95th %ile         4303471
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
                prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep_d1000   1   1         3875671         4870        0        1     1000        no     libc
# bin/../bin-riscv64/nanosleep -N nanosleep_d1000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 1000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1135271                    3124571
#                        max  13089671                    4618271
#                       mean   3872895.19720              3872720.82854
#                     median   3875271                    3875671*
#                     stddev    353312.97773               250393.76662
#             standard error      4999.10022                 3588.05451
#       99% confidence level     12877.68218                 9242.82843
#                       skew         3.87170                   -0.12890
#                   kurtosis       107.42072                    0.36835
#           time correlation       197.01756                  171.10048
#
#               elapsed time        20.01228
#                   run time        19.35580
#          getnsecs overhead      1429
#
#          number of samples      4995
#         number of outliers       125
#    number of final samples      4870
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 18         3124571 |*                                 3142698.77778
#                 15         3161159 |*                                 3181031.00000
#                 20         3197747 |*                                 3213176.00000
#                 23         3234335 |*                                 3253636.21739
#                 23         3270923 |*                                 3293588.39130
#                 40         3307511 |**                                3326716.00000
#                 58         3344099 |****                              3362279.62069
#                 48         3380687 |***                               3400214.75000
#                 41         3417275 |**                                3436668.56098
#                 47         3453863 |***                               3472034.82979
#                 88         3490451 |******                            3510841.45455
#                106         3527039 |*******                           3545586.70755
#                121         3563627 |********                          3583413.14876
#                154         3600215 |**********                        3616884.63636
#                140         3636803 |*********                         3654415.28571
#                152         3673391 |**********                        3691305.86842
#                186         3709979 |*************                     3728444.11828
#                223         3746567 |***************                   3765616.29148
#                246         3783155 |*****************                 3802405.55285
#                429         3819743 |******************************    3838260.04429
#                455         3856331 |********************************  3873701.54945
#                404         3892919 |****************************      3909962.08911
#                271         3929507 |*******************               3946064.72694
#                225         3966095 |***************                   3984085.22222
#                218         4002683 |***************                   4020418.24771
#                213         4039271 |**************                    4056875.22535
#                160         4075859 |***********                       4096988.50000
#                121         4112447 |********                          4131143.72727
#                117         4149035 |********                          4165753.90598
#                102         4185623 |*******                           4203669.03922
#                 93         4222211 |******                            4239659.17204
#                 69         4258799 |****                              4274030.42029
#
#                244           > 95% |*****************                 4397764.03279
#
#        mean of 95%   3845027.23973
#          95th %ile         4295371
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
            prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep_r   1   1         3881471         4812        0        1        1       yes     libc
# bin/../bin-riscv64/nanosleep -N nanosleep_r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1129571                    3110871
#                        max  16174771                    4654871
#                       mean   3892240.13658              3884788.48026
#                     median   3881271                    3881471*
#                     stddev    477174.77453               258130.79836
#             standard error      6757.73784                 3721.14862
#       99% confidence level     17407.93268                 9585.67883
#                       skew         8.57441                   -0.08908
#                   kurtosis       198.19501                    0.40905
#           time correlation       226.05094                  178.17056
#
#               elapsed time        20.00644
#                   run time        19.41743
#          getnsecs overhead      1429
#
#          number of samples      4986
#         number of outliers       174
#    number of final samples      4812
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10         3110871 |*                                 3128191.00000
#                 12         3148578 |*                                 3165829.33333
#                 24         3186285 |*                                 3202750.16667
#                 17         3223992 |*                                 3244553.35294
#                 32         3261699 |**                                3283483.50000
#                 43         3299406 |**                                3318682.62791
#                 59         3337113 |***                               3356884.55932
#                 41         3374820 |**                                3394207.58537
#                 45         3412527 |***                               3435122.11111
#                 65         3450234 |****                              3469091.00000
#                 81         3487941 |*****                             3507347.54321
#                 78         3525648 |*****                             3544892.79487
#                114         3563355 |*******                           3581564.11404
#                131         3601062 |********                          3619873.29008
#                145         3638769 |*********                         3656979.27586
#                130         3676476 |********                          3695268.69231
#                190         3714183 |************                      3735114.15789
#                210         3751890 |**************                    3770624.80952
#                304         3789597 |********************              3809332.51316
#                477         3827304 |********************************  3846285.46541
#                452         3865011 |******************************    3883542.68142
#                337         3902718 |**********************            3920513.13650
#                247         3940425 |****************                  3959365.33198
#                227         3978132 |***************                   3997926.50661
#                245         4015839 |****************                  4033968.55102
#                159         4053546 |**********                        4072404.96226
#                178         4091253 |***********                       4109031.67416
#                134         4128960 |********                          4148605.32836
#                129         4166667 |********                          4184980.30233
#                106         4204374 |*******                           4223765.33962
#                 78         4242081 |*****                             4262842.79487
#                 71         4279788 |****                              4298416.07042
#
#                241           > 95% |****************                  4434793.82158
#
#        mean of 95%   3855790.16758
#          95th %ile         4317471
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
             prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep_rs   1   1         3885171         4900        0        1        1       yes  syscall
# bin/../bin-riscv64/nanosleep -N nanosleep_rs -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s -r 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1307671                    3024971
#                        max   6360771                    4736371
#                       mean   3880249.34434              3883893.32653
#                     median   3884571                    3885171*
#                     stddev    352324.04271               287063.11820
#             standard error      4983.61122                 4100.90169
#       99% confidence level     12837.78250                10563.92275
#                       skew        -0.31358                   -0.07067
#                   kurtosis         7.43892                    0.31270
#           time correlation       217.24397                  195.63326
#
#               elapsed time        20.01078
#                   run time        19.40357
#          getnsecs overhead      1429
#
#          number of samples      4998
#         number of outliers        98
#    number of final samples      4900
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15         3024971 |*                                 3047724.33333
#                  9         3066690 |*                                 3084726.55556
#                 11         3108409 |*                                 3131198.27273
#                 34         3150128 |**                                3171185.70588
#                 32         3191847 |**                                3213208.50000
#                 31         3233566 |**                                3255422.61290
#                 42         3275285 |***                               3297763.85714
#                 44         3317004 |***                               3338091.45455
#                 58         3358723 |****                              3379502.03448
#                 58         3400442 |****                              3419207.20690
#                 69         3442161 |*****                             3464865.20290
#                107         3483880 |********                          3506533.61682
#                125         3525599 |*********                         3548755.00000
#                160         3567318 |************                      3588090.37500
#                134         3609037 |**********                        3629195.62687
#                170         3650756 |************                      3673051.58824
#                202         3692475 |***************                   3713032.38614
#                250         3734194 |******************                3755803.00000
#                268         3775913 |********************              3797165.02985
#                362         3817632 |***************************       3838234.53591
#                424         3859351 |********************************  3879527.36792
#                375         3901070 |****************************      3922428.06667
#                289         3942789 |*********************             3962847.12457
#                233         3984508 |*****************                 4004754.69099
#                206         4026227 |***************                   4047293.33010
#                185         4067946 |*************                     4088968.29730
#                194         4109665 |**************                    4128818.93814
#                178         4151384 |*************                     4171673.80899
#                123         4193103 |*********                         4211925.47154
#                120         4234822 |*********                         4255035.16667
#                 82         4276541 |******                            4297951.48780
#                 65         4318260 |****                              4338249.46154
#
#                245           > 95% |******************                4498317.93878
#
#        mean of 95%   3851555.18904
#          95th %ile         4359971
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
            prc thr      nsecs/call      samples   errors cnt/samp    delta remainder   method
nanosleep_s   1   1         3891771         4911        0        1        1        no  syscall
# bin/../bin-riscv64/nanosleep -N nanosleep_s -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1194771                    3021771
#                        max   6315171                    4739271
#                       mean   3880529.38635              3882638.68784
#                     median   3891571                    3891771*
#                     stddev    344774.08070               287225.69920
#             standard error      4876.81727                 4098.62635
#       99% confidence level     12562.68129                10558.06149
#                       skew        -0.31109                   -0.13611
#                   kurtosis         7.91945                    0.17509
#           time correlation       214.56318                  196.07959
#
#               elapsed time        20.01069
#                   run time        19.40557
#          getnsecs overhead      1429
#
#          number of samples      4998
#         number of outliers        87
#    number of final samples      4911
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6         3021771 |*                                 3037654.33333
#                 14         3063137 |*                                 3085999.57143
#                 15         3104503 |*                                 3126951.00000
#                 26         3145869 |**                                3169113.30769
#                 28         3187235 |**                                3209013.85714
#                 37         3228601 |***                               3251652.08108
#                 43         3269967 |***                               3290857.04651
#                 53         3311333 |****                              3333823.83019
#                 66         3352699 |*****                             3371372.51515
#                 64         3394065 |*****                             3416256.93750
#                 74         3435431 |******                            3456903.43243
#                105         3476797 |********                          3497971.00000
#                132         3518163 |***********                       3538474.90152
#                140         3559529 |***********                       3579768.14286
#                124         3600895 |**********                        3620291.16129
#                148         3642261 |************                      3663919.64865
#                184         3683627 |***************                   3705081.86957
#                247         3724993 |********************              3745986.78947
#                270         3766359 |**********************            3788480.62963
#                290         3807725 |************************          3829295.48276
#                380         3849091 |********************************  3870337.57895
#                376         3890457 |*******************************   3911806.10638
#                330         3931823 |***************************       3951344.03030
#                261         3973189 |*********************             3993443.79693
#                212         4014555 |*****************                 4034510.15094
#                198         4055921 |****************                  4076795.74747
#                193         4097287 |****************                  4117319.18653
#                222         4138653 |******************                4159707.48649
#                163         4180019 |*************                     4199530.50920
#                100         4221385 |********                          4240956.00000
#                 80         4262751 |******                            4282686.00000
#                 84         4304117 |*******                           4323750.76190
#
#                246           > 95% |********************              4478234.82114
#
#        mean of 95%   3851231.04609
#          95th %ile         4345471
#
# Usage: nanosleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'nanosleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in nanoseconds (defaults to 1ns)
#     -r provide remainder argument
#     -s skip libc making system call directly
# note: measures nanosleep()
         prc thr      nsecs/call      samples   errors cnt/samp 
open_tmp   1   1          227724        12441        0        2 
# bin/../bin-riscv64/open -N open_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    209057                     215590
#                        max   2590271                     240757
#                       mean    302597.66490               228120.93570
#                     median    230690                     227724*
#                     stddev    158870.18795                 4212.92142
#             standard error      1149.57443                   37.77076
#       99% confidence level      2961.30373                   97.29748
#                       skew         2.62985                    0.29100
#                   kurtosis        10.15451                    0.51359
#           time correlation        19.75638                    1.12033
#
#               elapsed time        20.01103
#                   run time        16.77701
#          getnsecs overhead      1429
#
#          number of samples     19099
#         number of outliers      6658
#    number of final samples     12441
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          215590 |*                                  215740.25000
#                 16          216224 |*                                  216571.37500
#                 26          216858 |*                                  217244.19231
#                 51          217492 |*                                  217898.43137
#                 91          218126 |**                                 218454.16484
#                126          218760 |****                               219117.49206
#                145          219394 |****                               219730.43448
#                146          220028 |****                               220353.57534
#                134          220662 |****                               220995.83582
#                127          221296 |****                               221614.62205
#                 98          221930 |***                                222246.39796
#                111          222564 |***                                222920.11712
#                225          223198 |*******                            223570.04444
#                396          223832 |************                       224189.15909
#                732          224466 |***********************            224810.12978
#                911          225100 |*****************************      225428.63557
#                985          225734 |********************************   226045.83858
#                950          226368 |******************************     226678.44000
#                859          227002 |***************************        227303.72992
#                803          227636 |**************************         227959.76463
#                777          228270 |*************************          228579.84942
#                725          228904 |***********************            229209.57517
#                585          229538 |*******************                229862.57436
#                550          230172 |*****************                  230487.89273
#                492          230806 |***************                    231109.13618
#                403          231440 |*************                      231754.85112
#                318          232074 |**********                         232387.00943
#                278          232708 |*********                          233019.27698
#                249          233342 |********                           233621.20080
#                197          233976 |******                             234282.30457
#                184          234610 |*****                              234897.04891
#                124          235244 |****                               235575.55645
#
#                623           > 95% |********************               238018.34671
#
#        mean of 95%    227599.18184
#          95th %ile          235857
#
# Usage: open
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'open')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-open (default /dev/null)]
# notes: measures open()
          prc thr      nsecs/call      samples   errors cnt/samp 
open_zero   1   1          144068        13376        0        3 
# bin/../bin-riscv64/open -N open_zero -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    136918                     136918
#                        max   1707868                     155418
#                       mean    201261.19610               144846.09599
#                     median    146943                     144068*
#                     stddev    115865.78728                 3523.84223
#             standard error       819.29484                   30.46866
#       99% confidence level      2110.50351                   78.48726
#                       skew         2.46179                    0.80821
#                   kurtosis         8.41231                    0.07969
#           time correlation        14.14980                    0.87605
#
#               elapsed time        20.00435
#                   run time        15.97488
#          getnsecs overhead      1429
#
#          number of samples     20000
#         number of outliers      6624
#    number of final samples     13376
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          136918 |*                                  136918.00000
#                  4          137390 |*                                  137724.25000
#                 16          137862 |*                                  138128.93750
#                 28          138334 |*                                  138593.50000
#                 61          138806 |**                                 139058.34426
#                124          139278 |****                               139540.91129
#                250          139750 |********                           140017.92800
#                457          140222 |****************                   140489.10284
#                611          140694 |*********************              140934.15385
#                854          141166 |*****************************      141397.94145
#                914          141638 |********************************   141865.93326
#                901          142110 |*******************************    142342.98557
#                862          142582 |******************************     142818.80858
#                769          143054 |**************************         143288.48375
#                744          143526 |**************************         143756.04435
#                698          143998 |************************           144237.86246
#                582          144470 |********************               144701.50687
#                510          144942 |*****************                  145164.48627
#                494          145414 |*****************                  145630.21053
#                488          145886 |*****************                  146126.02869
#                501          146358 |*****************                  146597.80040
#                454          146830 |***************                    147063.93612
#                447          147302 |***************                    147530.50336
#                320          147774 |***********                        148018.73125
#                300          148246 |**********                         148472.94667
#                265          148718 |*********                          148939.09434
#                236          149190 |********                           149414.47034
#                201          149662 |*******                            149893.35821
#                168          150134 |*****                              150359.30357
#                177          150606 |******                             150849.15254
#                154          151078 |*****                              151305.87662
#                116          151550 |****                               151760.86207
#
#                669           > 95% |***********************            153489.04036
#
#        mean of 95%    144391.06099
#          95th %ile          151993
#
# WARNINGS
#     Actual benchmark run time only accounts for 79.9% of elapsed time.
#
# Usage: open
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'open')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-open (default /dev/null)]
# notes: measures open()
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_fmp1   1   1          807371         1045        0        1 mp fifo
# bin/../bin-riscv64/pipe -N pipe_fmp1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x fifo -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    221171                     286471
#                        max   2879871                    1495471
#                       mean    906395.71638               867683.64593
#                     median    810171                     807371*
#                     stddev    284235.89619               209766.74898
#             standard error      8597.43385                 6489.01088
#       99% confidence level     22146.98961                16715.69202
#                       skew         1.90742                    0.88108
#                   kurtosis         6.12325                    0.78174
#           time correlation       755.51333                  622.79630
#
#               elapsed time        20.01986
#                   run time         0.99340
#          getnsecs overhead      1429
#
#          number of samples      1093
#         number of outliers        48
#    number of final samples      1045
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          286471 |*                                  286471.00000
#                  6          318640 |*                                  342421.00000
#                  3          350809 |*                                  369871.00000
#                  6          382978 |*                                  399987.66667
#                  4          415147 |*                                  425771.00000
#                  3          447316 |*                                  470704.33333
#                  5          479485 |*                                  496411.00000
#                  3          511654 |*                                  518804.33333
#                  5          543823 |*                                  564671.00000
#                 10          575992 |*                                  597301.00000
#                  8          608161 |*                                  625208.50000
#                 24          640330 |***                                656929.33333
#                 42          672499 |******                             688175.76190
#                 83          704668 |*************                      722461.36145
#                105          736837 |****************                   751389.09524
#                174          769006 |***************************        787454.33333
#                200          801175 |********************************   815499.00000
#                 60          833344 |*********                          846689.33333
#                 25          865513 |****                               880447.00000
#                 17          897682 |**                                 914371.00000
#                 11          929851 |*                                  949380.09091
#                 15          962020 |**                                 977397.66667
#                 16          994189 |**                                1013208.50000
#                 18         1026358 |**                                1041082.11111
#                 14         1058527 |**                                1076971.00000
#                 21         1090696 |***                               1104832.90476
#                 31         1122865 |****                              1140523.09677
#                 18         1155034 |**                                1170121.00000
#                 16         1187203 |**                                1199727.25000
#                 21         1219372 |***                               1232490.04762
#                 17         1251541 |**                                1265441.58824
#                 10         1283710 |*                                 1300201.00000
#
#                 53           > 95% |********                          1388278.54717
#
#        mean of 95%    839869.60383
#          95th %ile         1315871
#
# WARNINGS
#     Actual benchmark run time only accounts for 5.0% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_fmp4k   1   1          818971         1075        0        1 mp fifo
# bin/../bin-riscv64/pipe -N pipe_fmp4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x fifo -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    220971                     220971
#                        max   2802771                    1601771
#                       mean    897521.55606               870326.82791
#                     median    820271                     818971*
#                     stddev    293191.96922               244208.36677
#             standard error      8816.05939                 7448.28536
#       99% confidence level     22710.16898                19186.78309
#                       skew         1.51348                    0.78786
#                   kurtosis         4.40000                    0.84932
#           time correlation       794.69957                  708.70911
#
#               elapsed time        20.01998
#                   run time         0.99515
#          getnsecs overhead      1429
#
#          number of samples      1106
#         number of outliers        31
#    number of final samples      1075
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2          220971 |*                                  226121.00000
#                  1          256868 |*                                  286371.00000
#                  3          292765 |*                                  316771.00000
#                  3          328662 |*                                  359537.66667
#                  8          364559 |*                                  384696.00000
#                 14          400456 |*                                  423506.71429
#                  9          436353 |*                                  457493.22222
#                 41          472250 |****                               489290.51220
#                 11          508147 |*                                  522989.18182
#                  3          544044 |*                                  571404.33333
#                  3          579941 |*                                  587271.00000
#                 16          615838 |*                                  642308.50000
#                 25          651735 |***                                669531.00000
#                 40          687632 |****                               708551.00000
#                 87          723529 |**********                         742533.06897
#                113          759426 |*************                      780794.00885
#                265          795323 |********************************   813353.26415
#                113          831220 |*************                      843831.17699
#                 32          867117 |***                                881514.75000
#                 20          903014 |**                                 919101.75000
#                 20          938911 |**                                 952746.00000
#                 15          974808 |*                                  989157.66667
#                 13         1010705 |*                                 1027132.53846
#                 18         1046602 |**                                1062948.77778
#                 19         1082499 |**                                1101771.00000
#                 24         1118396 |**                                1133754.33333
#                 11         1154293 |*                                 1173998.27273
#                 26         1190190 |***                               1208982.53846
#                 15         1226087 |*                                 1243204.33333
#                 17         1261984 |**                                1276371.00000
#                 19         1297881 |**                                1317602.57895
#                 15         1333778 |*                                 1356504.33333
#
#                 54           > 95% |******                            1484309.88889
#
#        mean of 95%    837853.67875
#          95th %ile         1369671
#
# WARNINGS
#     Actual benchmark run time only accounts for 5.0% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_fmt1   1   1          454071         3600        0        1 mt fifo
# bin/../bin-riscv64/pipe -N pipe_fmt1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x fifo -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    196071                     196071
#                        max   3884271                     996471
#                       mean    553891.20052               507195.75000
#                     median    458371                     454071*
#                     stddev    261205.37427               164392.76030
#             standard error      4228.97227                 2739.87934
#       99% confidence level     10893.83256                 7057.92918
#                       skew         2.65863                    0.89366
#                   kurtosis        13.39675                   -0.04968
#           time correlation       193.71475                  147.10212
#
#               elapsed time        20.01213
#                   run time         2.11965
#          getnsecs overhead      1429
#
#          number of samples      3815
#         number of outliers       215
#    number of final samples      3600
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 42          196071 |**                                 203999.57143
#                  7          215878 |*                                  223856.71429
#                 10          235685 |*                                  248361.00000
#                 14          255492 |*                                  264385.28571
#                 88          275299 |*****                              285215.31818
#                 28          295106 |*                                  305313.85714
#                 70          314913 |****                               328115.28571
#                224          334720 |***************                    343909.83929
#                143          354527 |*********                          364778.69231
#                193          374334 |*************                      385836.80311
#                128          394141 |********                           403132.71875
#                475          413948 |********************************   425197.10526
#                362          433755 |************************           444096.69061
#                401          453562 |***************************        462443.06983
#                214          473369 |**************                     482499.03738
#                109          493176 |*******                            502164.57798
#                 53          512983 |***                                522389.86792
#                 38          532790 |**                                 541594.68421
#                 38          552597 |**                                 562084.15789
#                 31          572404 |**                                 583429.06452
#                 31          592211 |**                                 600019.38710
#                 41          612018 |**                                 620675.87805
#                 39          631825 |**                                 641396.64103
#                 46          651632 |***                                661229.69565
#                 70          671439 |****                               683112.42857
#                 70          691246 |****                               700001.00000
#                 90          711053 |******                             720505.44444
#                104          730860 |*******                            739961.38462
#                 74          750667 |****                               760022.35135
#                 72          770474 |****                               780530.72222
#                 63          790281 |****                               800553.53968
#                 52          810088 |***                                819161.38462
#
#                180           > 95% |************                       890319.88889
#
#        mean of 95%    487031.32164
#          95th %ile          829871
#
# WARNINGS
#     Actual benchmark run time only accounts for 10.6% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_fmt4k   1   1          465771         3531        0        1 mt fifo
# bin/../bin-riscv64/pipe -N pipe_fmt4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x fifo -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    203471                     203471
#                        max   4264171                    1031971
#                       mean    565803.65974               515715.70547
#                     median    470571                     465771*
#                     stddev    275624.25766               174238.58217
#             standard error      4497.32885                 2932.21269
#       99% confidence level     11585.11913                 7553.37990
#                       skew         2.81570                    0.78763
#                   kurtosis        17.50497                   -0.20911
#           time correlation       210.09983                  161.24665
#
#               elapsed time        20.00782
#                   run time         2.13566
#          getnsecs overhead      1429
#
#          number of samples      3756
#         number of outliers       225
#    number of final samples      3531
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 39          203471 |**                                 210614.58974
#                 11          223375 |*                                  234434.63636
#                 16          243279 |*                                  252552.25000
#                 18          263183 |*                                  274782.11111
#                210          283087 |***************                    290962.90476
#                 74          302991 |*****                              311348.02703
#                 71          322895 |*****                              335572.40845
#                191          342799 |**************                     352907.46597
#                126          362703 |*********                          371572.58730
#                 92          382607 |******                             392281.86957
#                 69          402511 |*****                              413588.39130
#                428          422415 |********************************   433860.95327
#                361          442319 |**************************         452065.50139
#                380          462223 |****************************       471993.14474
#                252          482127 |******************                 490087.52778
#                 90          502031 |******                             509739.88889
#                 56          521935 |****                               531642.42857
#                 38          541839 |**                                 553076.26316
#                 27          561743 |**                                 571408.03704
#                 31          581647 |**                                 592869.87097
#                 26          601551 |*                                  610871.00000
#                 32          621455 |**                                 631839.75000
#                 45          641359 |***                                650224.33333
#                 37          661263 |**                                 671000.72973
#                 71          681167 |*****                              692097.76056
#                 83          701071 |******                             711915.57831
#                 76          720975 |*****                              731660.67105
#                114          740879 |********                           750454.33333
#                 97          760783 |*******                            770208.11340
#                 53          780687 |***                                792280.71698
#                 82          800591 |******                             810994.17073
#                 58          820495 |****                               829550.31034
#
#                177           > 95% |*************                      911202.07345
#
#        mean of 95%    494844.77907
#          95th %ile          840371
#
# WARNINGS
#     Actual benchmark run time only accounts for 10.7% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_fst1   1   1           51479         8506        0       15 st fifo
# bin/../bin-riscv64/pipe -N pipe_fst1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x fifo -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     49442                      49442
#                        max    483348                      68092
#                       mean     60137.03770                53765.47837
#                     median     51848                      51479*
#                     stddev     24041.30470                 4778.79113
#             standard error       245.34498                   51.81498
#       99% confidence level       632.00868                  133.47540
#                       skew         4.63805                    1.61233
#                   kurtosis        29.00785                    1.04510
#           time correlation         4.79518                    1.54570
#
#               elapsed time        20.00593
#                   run time         9.16533
#          getnsecs overhead      1429
#
#          number of samples      9602
#         number of outliers      1096
#    number of final samples      8506
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 40           49442 |*                                   49727.35000
#                403           49921 |*****                               50232.88586
#               1048           50400 |*************                       50707.08302
#               2479           50879 |********************************    51085.21501
#                816           51358 |**********                          51581.89828
#                889           51837 |***********                         52065.30709
#                481           52316 |******                              52513.64657
#                265           52795 |***                                 53024.95094
#                156           53274 |**                                  53497.25000
#                104           53753 |*                                   53968.61538
#                 73           54232 |*                                   54460.46575
#                 61           54711 |*                                   54929.60656
#                 29           55190 |*                                   55438.13793
#                 26           55669 |*                                   55906.96154
#                 17           56148 |*                                   56419.82353
#                 19           56627 |*                                   56825.57895
#                  9           57106 |*                                   57325.22222
#                 10           57585 |*                                   57897.40000
#                 14           58064 |*                                   58245.92857
#                 15           58543 |*                                   58805.66667
#                 22           59022 |*                                   59307.13636
#                 26           59501 |*                                   59769.03846
#                 40           59980 |*                                   60233.77500
#                 87           60459 |*                                   60701.57471
#                 89           60938 |*                                   61201.14607
#                132           61417 |*                                   61649.12879
#                140           61896 |*                                   62124.95714
#                141           62375 |*                                   62598.24823
#                142           62854 |*                                   63086.00000
#                126           63333 |*                                   63532.11905
#                105           63812 |*                                   64067.18095
#                 76           64291 |*                                   64504.35526
#
#                426           > 95% |*****                               66197.16901
#
#        mean of 95%     53110.04517
#          95th %ile           64767
#
# WARNINGS
#     Actual benchmark run time only accounts for 45.8% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_fst4k   1   1           53445         7796        0       14 st fifo
# bin/../bin-riscv64/pipe -N pipe_fst4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x fifo -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     51478                      51478
#                        max   1233331                      69631
#                       mean     66941.56573                55627.94048
#                     median     53798                      53445*
#                     stddev     34357.31091                 4667.83756
#             standard error       356.34536                   52.86641
#       99% confidence level       917.94565                  136.18387
#                       skew         6.63921                    1.72239
#                   kurtosis       148.51187                    1.36244
#           time correlation         7.52133                    1.59399
#
#               elapsed time        20.00562
#                   run time         9.23094
#          getnsecs overhead      1429
#
#          number of samples      9296
#         number of outliers      1500
#    number of final samples      7796
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 24           51478 |*                                   51797.41667
#                258           51953 |***                                 52298.82171
#                875           52428 |***********                         52673.20914
#               2452           52903 |********************************    53154.91599
#               1104           53378 |**************                      53547.88587
#                682           53853 |********                            54123.73167
#                521           54328 |******                              54533.47985
#                207           54803 |**                                  54982.50725
#                 85           55278 |*                                   55522.03529
#                 57           55753 |*                                   56022.24561
#                 55           56228 |*                                   56459.54545
#                 32           56703 |*                                   56926.18750
#                 20           57178 |*                                   57344.30000
#                 17           57653 |*                                   57890.64706
#                 16           58128 |*                                   58401.68750
#                 13           58603 |*                                   58821.00000
#                 13           59078 |*                                   59313.00000
#                 10           59553 |*                                   59816.30000
#                 16           60028 |*                                   60244.68750
#                 15           60503 |*                                   60758.06667
#                 20           60978 |*                                   61230.00000
#                 27           61453 |*                                   61696.07407
#                 30           61928 |*                                   62233.56667
#                 34           62403 |*                                   62685.00000
#                 58           62878 |*                                   63165.24138
#                104           63353 |*                                   63612.11538
#                106           63828 |*                                   64086.37736
#                122           64303 |*                                   64572.19672
#                111           64778 |*                                   65021.61261
#                124           65253 |*                                   65467.55645
#                118           65728 |*                                   65987.73729
#                 80           66203 |*                                   66440.37500
#
#                390           > 95% |*****                               67952.43077
#
#        mean of 95%     54978.93276
#          95th %ile           66651
#
# WARNINGS
#     Actual benchmark run time only accounts for 46.1% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_pmp1   1   1          800271          972        0        1 mp pipe
# bin/../bin-riscv64/pipe -N pipe_pmp1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x pipe -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    219471                     627471
#                        max   2847271                     968471
#                       mean    855858.75566               796944.36934
#                     median    807271                     800271*
#                     stddev    242164.47259                57206.74966
#             standard error      6766.06030                 1834.90735
#       99% confidence level     17429.37134                 4726.72134
#                       skew         2.18686                    0.01991
#                   kurtosis         9.57338                    0.94207
#           time correlation       518.17237                  190.78942
#
#               elapsed time        20.01127
#                   run time         1.09908
#          getnsecs overhead      1429
#
#          number of samples      1281
#         number of outliers       309
#    number of final samples       972
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          627471 |*                                  630804.33333
#                  4          636000 |*                                  642646.00000
#                  5          644529 |*                                  648811.00000
#                  8          653058 |**                                 656796.00000
#                  8          661587 |**                                 666108.50000
#                  8          670116 |**                                 673358.50000
#                  4          678645 |*                                  683021.00000
#                  6          687174 |*                                  692054.33333
#                  4          695703 |*                                  700771.00000
#                 18          704232 |*****                              709843.22222
#                 21          712761 |******                             717699.57143
#                 31          721290 |*********                          726148.41935
#                 21          729819 |******                             734394.80952
#                 37          738348 |***********                        742543.97297
#                 32          746877 |*********                          751417.87500
#                 24          755406 |*******                            759696.00000
#                 23          763935 |*******                            768679.69565
#                 28          772464 |********                           777071.00000
#                 81          780993 |************************           785709.27160
#                105          789522 |********************************   793638.61905
#                 81          798051 |************************           802563.59259
#                 90          806580 |***************************        811464.33333
#                100          815109 |******************************     819410.00000
#                 57          823638 |*****************                  827021.87719
#                 25          832167 |*******                            836291.00000
#                 19          840696 |*****                              844734.15789
#                 19          849225 |*****                              852334.15789
#                 19          857754 |*****                              861028.89474
#                 15          866283 |****                               870291.00000
#                  8          874812 |**                                 879383.50000
#                 10          883341 |***                                888151.00000
#                  9          891870 |**                                 895350.44444
#
#                 49           > 95% |**************                     931801.61224
#
#        mean of 95%    789785.10076
#          95th %ile          900371
#
# WARNINGS
#     Actual benchmark run time only accounts for 5.5% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_pmp4k   1   1          825071         1165        0        1 mp pipe
# bin/../bin-riscv64/pipe -N pipe_pmp4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x pipe -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    225071                     378671
#                        max  13624171                    1325971
#                       mean    900885.44045               848844.53219
#                     median    828171                     825071*
#                     stddev    440954.03344               159053.56072
#             standard error     12467.07766                 4659.94116
#       99% confidence level     32115.19204                12004.00844
#                       skew        19.68407                    0.70783
#                   kurtosis       553.41954                    1.69789
#           time correlation       602.52372                  407.22735
#
#               elapsed time        20.02297
#                   run time         1.12976
#          getnsecs overhead      1429
#
#          number of samples      1251
#         number of outliers        86
#    number of final samples      1165
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          378671 |*                                  387721.00000
#                  7          404137 |*                                  414185.28571
#                  2          429603 |*                                  447071.00000
#                  7          455069 |*                                  474699.57143
#                 12          480535 |*                                  495471.00000
#                  9          506001 |*                                  520093.22222
#                  5          531467 |*                                  541911.00000
#                  6          556933 |*                                  575554.33333
#                  4          582399 |*                                  590996.00000
#                  5          607865 |*                                  618451.00000
#                  9          633331 |*                                  646226.55556
#                 19          658797 |**                                 670776.26316
#                 24          684263 |**                                 698133.50000
#                 33          709729 |***                                721301.30303
#                 46          735195 |*****                              749827.52174
#                 66          760661 |*******                            774483.12121
#                216          786127 |*************************          800112.66667
#                266          811593 |********************************   825955.58647
#                133          837059 |****************                   847880.02256
#                 54          862525 |******                             872765.44444
#                 29          887991 |***                                899957.20690
#                 13          913457 |*                                  924809.46154
#                 13          938923 |*                                  953717.15385
#                  7          964389 |*                                  973851.71429
#                 10          989855 |*                                 1001761.00000
#                 10         1015321 |*                                 1024701.00000
#                 13         1040787 |*                                 1056109.46154
#                 15         1066253 |*                                 1082971.00000
#                 18         1091719 |**                                1102165.44444
#                 11         1117185 |*                                 1126734.63636
#                 21         1142651 |**                                1156947.19048
#                 19         1168117 |**                                1181223.63158
#
#                 59           > 95% |*******                           1259167.61017
#
#        mean of 95%    826955.68807
#          95th %ile         1193571
#
# WARNINGS
#     Actual benchmark run time only accounts for 5.6% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_pmt1   1   1          668371         4145        0        1 mt pipe
# bin/../bin-riscv64/pipe -N pipe_pmt1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x pipe -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    198971                     198971
#                        max   4879671                    1328271
#                       mean    676423.22805               640994.91194
#                     median    676771                     668371*
#                     stddev    308240.20664               229299.92056
#             standard error      4704.44985                 3561.57125
#       99% confidence level     12118.66280                 9174.60754
#                       skew         2.68337                    0.56780
#                   kurtosis        19.65504                   -0.00203
#           time correlation       214.57470                  184.89975
#
#               elapsed time        20.00668
#                   run time         2.91058
#          getnsecs overhead      1429
#
#          number of samples      4293
#         number of outliers       148
#    number of final samples      4145
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 22          198971 |**                                 206252.81818
#                 21          227328 |*                                  240747.19048
#                 56          255685 |*****                              273547.78571
#                 62          284042 |*****                              293732.29032
#                102          312399 |*********                          333820.01961
#                176          340756 |****************                   353896.00000
#                105          369113 |*********                          382119.57143
#                215          397470 |*******************                416702.62791
#                347          425827 |*******************************    436185.40922
#                320          454184 |*****************************      468851.31250
#                183          482541 |****************                   493607.61202
#                 66          510898 |******                             524071.00000
#                 55          539255 |*****                              553231.27273
#                 60          567612 |*****                              583089.33333
#                 93          595969 |********                           611701.10753
#                121          624326 |***********                        637997.44628
#                178          652683 |****************                   670021.00000
#                270          681040 |************************           695149.14815
#                285          709397 |**************************         725172.75439
#                348          737754 |********************************   750066.97701
#                230          766111 |*********************              778223.60870
#                179          794468 |****************                   808035.24581
#                 94          822825 |********                           834842.27660
#                 72          851182 |******                             864316.83333
#                 48          879539 |****                               893529.33333
#                 32          907896 |**                                 919286.62500
#                 26          936253 |**                                 953597.92308
#                 39          964610 |***                                979183.82051
#                 34          992967 |***                               1006794.52941
#                 38         1021324 |***                               1037294.68421
#                 28         1049681 |**                                1061292.42857
#                 32         1078038 |**                                1091571.00000
#
#                208           > 95% |*******************               1198917.15385
#
#        mean of 95%    611518.70511
#          95th %ile         1106371
#
# WARNINGS
#     Actual benchmark run time only accounts for 14.5% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_pmt4k   1   1          672871         4135        0        1 mt pipe
# bin/../bin-riscv64/pipe -N pipe_pmt4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x pipe -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    201371                     201371
#                        max   4484071                    1347171
#                       mean    678528.94111               641680.82225
#                     median    685471                     672871*
#                     stddev    306110.76130               235726.27035
#             standard error      4670.31809                 3665.81233
#       99% confidence level     12030.73941                 9443.13257
#                       skew         1.95978                    0.54554
#                   kurtosis        10.50495                    0.01033
#           time correlation       219.76912                  190.57355
#
#               elapsed time        20.00619
#                   run time         2.92191
#          getnsecs overhead      1429
#
#          number of samples      4296
#         number of outliers       161
#    number of final samples      4135
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 32          201371 |**                                 209508.50000
#                 27          229722 |**                                 245885.81481
#                 48          258073 |****                               279221.00000
#                147          286424 |************                       296195.48980
#                 83          314775 |*******                            335928.83133
#                178          343126 |***************                    355561.44944
#                110          371477 |*********                          384653.72727
#                154          399828 |*************                      418285.93506
#                362          428179 |*******************************    438490.88950
#                269          456530 |***********************            472256.13011
#                225          484881 |*******************                497127.00000
#                 85          513232 |*******                            524995.70588
#                 43          541583 |***                                556075.65116
#                 48          569934 |****                               586825.16667
#                 96          598285 |********                           612529.33333
#                 90          626636 |*******                            641013.22222
#                132          654987 |***********                        670655.09091
#                219          683338 |******************                 697497.94064
#                283          711689 |************************           726132.48410
#                372          740040 |********************************   751907.55914
#                302          768391 |*************************          782615.03974
#                171          796742 |**************                     810946.52632
#                123          825093 |**********                         837489.69919
#                 70          853444 |******                             865475.28571
#                 46          881795 |***                                894281.86957
#                 33          910146 |**                                 923319.48485
#                 27          938497 |**                                 952056.18519
#                 12          966848 |*                                  983137.66667
#                 27          995199 |**                                1009882.11111
#                 35         1023550 |***                               1039173.85714
#                 36         1051901 |***                               1064334.88889
#                 43         1080252 |***                               1094708.20930
#
#                207           > 95% |*****************                 1213073.41546
#
#        mean of 95%    611569.24720
#          95th %ile         1108571
#
# WARNINGS
#     Actual benchmark run time only accounts for 14.6% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_pst1   1   1           53867         9292        0       14 st pipe
# bin/../bin-riscv64/pipe -N pipe_pst1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x pipe -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     52051                      52051
#                        max    351965                      56178
#                       mean     63983.85695                54054.65196
#                     median     54425                      53867*
#                     stddev     27172.25168                  708.50284
#             standard error       235.15405                    7.34999
#       99% confidence level       605.75684                   18.93359
#                       skew         3.81315                    0.65978
#                   kurtosis        15.04986                   -0.00590
#           time correlation         3.95669                    0.25355
#
#               elapsed time        20.00465
#                   run time        12.65518
#          getnsecs overhead      1429
#
#          number of samples     13352
#         number of outliers      4060
#    number of final samples      9292
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3           52051 |*                                   52082.33333
#                  3           52156 |*                                   52235.66667
#                  2           52261 |*                                   52365.00000
#                  1           52366 |*                                   52371.00000
#                 17           52471 |*                                   52526.52941
#                 18           52576 |*                                   52630.83333
#                 66           52681 |**                                  52743.51515
#                 98           52786 |***                                 52848.89796
#                165           52891 |*****                               52945.67879
#                190           52996 |******                              53042.36316
#                149           53101 |*****                               53162.10738
#                242           53206 |********                            53260.71488
#                362           53311 |*************                       53363.61878
#                623           53416 |**********************              53473.40289
#                777           53521 |****************************        53574.54698
#                820           53626 |*****************************       53677.64268
#                887           53731 |********************************    53780.77565
#                689           53836 |************************            53887.06386
#                523           53941 |******************                  53990.02677
#                341           54046 |************                        54098.16716
#                304           54151 |**********                          54200.05592
#                253           54256 |*********                           54305.98814
#                247           54361 |********                            54416.15789
#                246           54466 |********                            54517.33333
#                274           54571 |*********                           54622.66788
#                305           54676 |***********                         54728.04590
#                297           54781 |**********                          54836.01684
#                231           54886 |********                            54937.10390
#                241           54991 |********                            55040.02905
#                225           55096 |********                            55143.62667
#                142           55201 |*****                               55254.16197
#                 86           55306 |***                                 55343.80233
#
#                465           > 95% |****************                    55718.02796
#
#        mean of 95%     53967.02651
#          95th %ile           55385
#
# WARNINGS
#     Actual benchmark run time only accounts for 63.3% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_pst4k   1   1           58391         6570        0       14 st pipe
# bin/../bin-riscv64/pipe -N pipe_pst4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x pipe -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     56605                      56605
#                        max    332143                      75971
#                       mean     63250.82143                60778.13683
#                     median     58498                      58391*
#                     stddev     15203.82998                 5066.72822
#             standard error       181.72053                   62.50934
#       99% confidence level       468.11207                  161.02406
#                       skew         8.10838                    1.56207
#                   kurtosis        90.86627                    0.94315
#           time correlation         3.82639                    2.15223
#
#               elapsed time        20.00768
#                   run time         6.28812
#          getnsecs overhead      1429
#
#          number of samples      7000
#         number of outliers       430
#    number of final samples      6570
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 30           56605 |*                                   56925.40000
#               1444           57100 |********************************    57448.95706
#               1342           57595 |*****************************       57763.25559
#                819           58090 |******************                  58349.06838
#                693           58585 |***************                     58805.35354
#                263           59080 |*****                               59291.72624
#                199           59575 |****                                59822.41206
#                152           60070 |***                                 60315.23684
#                 87           60565 |*                                   60766.22989
#                 50           61060 |*                                   61300.94000
#                 53           61555 |*                                   61795.11321
#                 37           62050 |*                                   62297.59459
#                 25           62545 |*                                   62816.24000
#                 21           63040 |*                                   63279.90476
#                 21           63535 |*                                   63777.47619
#                 26           64030 |*                                   64249.03846
#                 22           64525 |*                                   64800.18182
#                 21           65020 |*                                   65304.85714
#                 27           65515 |*                                   65736.55556
#                 30           66010 |*                                   66256.90000
#                 45           66505 |*                                   66765.06667
#                 56           67000 |*                                   67271.03571
#                 76           67495 |*                                   67735.94737
#                 71           67990 |*                                   68210.04225
#                 65           68485 |*                                   68715.81538
#                 93           68980 |**                                  69205.01075
#                 81           69475 |*                                   69723.65432
#                 91           69970 |**                                  70240.34066
#                 90           70465 |*                                   70728.14444
#                 75           70960 |*                                   71168.98667
#                 67           71455 |*                                   71683.86567
#                 69           71950 |*                                   72163.37681
#
#                329           > 95% |*******                             73961.51672
#
#        mean of 95%     60083.16295
#          95th %ile           72438
#
# WARNINGS
#     Actual benchmark run time only accounts for 31.4% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_smp1   1   1         1366271         1154        0        1 mp sock
# bin/../bin-riscv64/pipe -N pipe_smp1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x sock -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    431571                     616371
#                        max   3944471                    2322471
#                       mean   1483332.70763              1462922.39948
#                     median   1368071                    1366271*
#                     stddev    349440.37280               288946.48028
#             standard error     10172.60254                 8505.78702
#       99% confidence level     26204.62415                21910.90737
#                       skew         1.38691                    0.36138
#                   kurtosis         6.07582                    0.44082
#           time correlation       902.25649                  811.77649
#
#               elapsed time        20.02709
#                   run time         1.75354
#          getnsecs overhead      1429
#
#          number of samples      1180
#         number of outliers        26
#    number of final samples      1154
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7          616371 |*                                  635042.42857
#                  1          659368 |*                                  686671.00000
#                  1          702365 |*                                  742071.00000
#                 10          745362 |*                                  772071.00000
#                  9          788359 |*                                  811837.66667
#                  4          831356 |*                                  853021.00000
#                  7          874353 |*                                  894042.42857
#                  7          917350 |*                                  934299.57143
#                  2          960347 |*                                  971321.00000
#                  6         1003344 |*                                 1017887.66667
#                  5         1046341 |*                                 1064571.00000
#                 17         1089338 |**                                1109788.64706
#                 20         1132335 |***                               1156016.00000
#                 22         1175332 |***                               1200225.54545
#                 61         1218329 |*********                         1242266.08197
#                107         1261326 |****************                  1285415.85981
#                207         1304323 |********************************  1326428.00483
#                150         1347320 |***********************           1365273.00000
#                 59         1390317 |*********                         1405899.81356
#                 21         1433314 |***                               1456432.90476
#                 27         1476311 |****                              1495456.18519
#                 30         1519308 |****                              1543411.50000
#                 37         1562305 |*****                             1586000.72973
#                 34         1605302 |*****                             1628268.05882
#                 38         1648299 |*****                             1668592.05263
#                 39         1691296 |******                            1713740.23077
#                 44         1734293 |******                            1758632.36364
#                 34         1777290 |*****                             1800500.41176
#                 28         1820287 |****                              1837635.28571
#                 25         1863284 |***                               1884355.00000
#                 17         1906281 |**                                1926165.11765
#                 20         1949278 |***                               1968166.00000
#
#                 58           > 95% |********                          2118808.93103
#
#        mean of 95%   1428213.07573
#          95th %ile         1992271
#
# WARNINGS
#     Actual benchmark run time only accounts for 8.8% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_smp4k   1   1         1595371         1111        0        1 mp sock
# bin/../bin-riscv64/pipe -N pipe_smp4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x sock -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    427971                     723771
#                        max   3426471                    2673671
#                       mean   1705448.49557              1692560.84248
#                     median   1599371                    1595371*
#                     stddev    363887.81282               329108.50000
#             standard error     10834.60196                 9873.74870
#       99% confidence level     27909.93464                25434.77665
#                       skew         0.45606                    0.08475
#                   kurtosis         1.87970                    0.39386
#           time correlation      1034.89586                  975.13476
#
#               elapsed time        20.02503
#                   run time         1.92732
#          getnsecs overhead      1429
#
#          number of samples      1128
#         number of outliers        17
#    number of final samples      1111
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9          723771 |*                                  745748.77778
#                  5          771853 |*                                  806771.00000
#                  7          819935 |*                                  836313.85714
#                  0          868017 |                                              -
#                  6          916099 |*                                  942787.66667
#                  8          964181 |*                                  987021.00000
#                  3         1012263 |*                                 1037004.33333
#                 12         1060345 |*                                 1089054.33333
#                  2         1108427 |*                                 1119821.00000
#                  7         1156509 |*                                 1173842.42857
#                  6         1204591 |*                                 1223137.66667
#                  6         1252673 |*                                 1279604.33333
#                 15         1300755 |**                                1326917.66667
#                 21         1348837 |***                               1378456.71429
#                 50         1396919 |*******                           1424683.00000
#                 96         1445001 |**************                    1470419.95833
#                208         1493083 |********************************  1518148.88462
#                 89         1541165 |*************                     1561319.31461
#                 40         1589247 |******                            1610481.00000
#                 27         1637329 |****                              1659785.81481
#                 36         1685411 |*****                             1708829.33333
#                 35         1733493 |*****                             1754971.00000
#                 44         1781575 |******                            1803775.54545
#                 57         1829657 |********                          1852623.63158
#                 49         1877739 |*******                           1900730.18367
#                 36         1925821 |*****                             1955235.30556
#                 48         1973903 |*******                           1994993.91667
#                 39         2021985 |******                            2045140.23077
#                 34         2070067 |*****                             2093173.94118
#                 20         2118149 |***                               2143996.00000
#                 24         2166231 |***                               2188071.00000
#                 16         2214313 |**                                2233046.00000
#
#                 56           > 95% |********                          2395997.78571
#
#        mean of 95%   1655222.00948
#          95th %ile         2262371
#
# WARNINGS
#     Actual benchmark run time only accounts for 9.6% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_smt1   1   1         1253371         3185        0        1 mt sock
# bin/../bin-riscv64/pipe -N pipe_smt1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x sock -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    343371                     343371
#                        max   6509571                    2334871
#                       mean   1246568.16890              1232935.55730
#                     median   1255371                    1253371*
#                     stddev    415957.93312               378610.75730
#             standard error      7342.84825                 6708.69783
#       99% confidence level     18915.17709                17281.60560
#                       skew         1.24211                    0.08001
#                   kurtosis        10.38712                   -0.25688
#           time correlation       417.12620                  400.70860
#
#               elapsed time        20.00660
#                   run time         4.00682
#          getnsecs overhead      1429
#
#          number of samples      3209
#         number of outliers        24
#    number of final samples      3185
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14          343371 |*                                  361585.28571
#                 15          391659 |*                                  415671.00000
#                 14          439947 |*                                  465421.00000
#                 34          488235 |***                                524641.58824
#                 35          536523 |***                                566105.28571
#                 85          584811 |********                           611801.58824
#                107          633099 |***********                        660042.02804
#                124          681387 |*************                      701291.96774
#                 54          729675 |*****                              751202.48148
#                 70          777963 |*******                            804028.14286
#                 89          826251 |*********                          850346.28090
#                 82          874539 |********                           896294.17073
#                 78          922827 |********                           948122.28205
#                 78          971115 |********                           995032.53846
#                 48         1019403 |*****                             1047287.66667
#                 76         1067691 |********                          1090747.31579
#                136         1115979 |**************                    1144375.41176
#                199         1164267 |********************              1188927.28141
#                302         1212555 |*******************************   1237021.33113
#                304         1260843 |********************************  1284818.69737
#                236         1309131 |************************          1332231.16949
#                162         1357419 |*****************                 1378810.50617
#                 83         1405707 |********                          1428348.10843
#                 56         1453995 |*****                             1476197.78571
#                 69         1502283 |*******                           1527692.73913
#                 79         1550571 |********                          1574125.43038
#                 77         1598859 |********                          1625237.23377
#                 96         1647147 |**********                        1668638.70833
#                 83         1695435 |********                          1719777.02410
#                 67         1743723 |*******                           1769135.17910
#                 44         1792011 |****                              1818268.72727
#                 29         1840299 |***                               1860229.62069
#
#                160           > 95% |****************                  2033604.21875
#
#        mean of 95%   1190586.14050
#          95th %ile         1888571
#
# WARNINGS
#     Actual benchmark run time only accounts for 20.0% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_smt4k   1   1         1443271         2835        0        1 mt sock
# bin/../bin-riscv64/pipe -N pipe_smt4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x sock -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    375371                     375371
#                        max   4114071                    2612671
#                       mean   1480203.08304              1469463.58025
#                     median   1445671                    1443271*
#                     stddev    405455.20590               383584.50461
#             standard error      7589.54773                 7204.17947
#       99% confidence level     19550.67495                18557.96631
#                       skew         0.45253                    0.03860
#                   kurtosis         1.78115                    0.09114
#           time correlation       466.09655                  452.62910
#
#               elapsed time        20.01304
#                   run time         4.23084
#          getnsecs overhead      1429
#
#          number of samples      2854
#         number of outliers        19
#    number of final samples      2835
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6          375371 |*                                  407404.33333
#                  4          430275 |*                                  464921.00000
#                  9          485179 |*                                  513648.77778
#                 19          540083 |**                                 569407.84211
#                  8          594987 |*                                  623033.50000
#                  6          649891 |*                                  678137.66667
#                 56          704795 |******                             741351.35714
#                 63          759699 |*******                            787213.85714
#                 58          814603 |******                             834717.55172
#                 33          869507 |***                                897389.18182
#                 45          924411 |*****                              951653.22222
#                 70          979315 |*******                           1011511.00000
#                 80         1034219 |*********                         1058378.50000
#                 56         1089123 |******                            1118942.42857
#                 62         1144027 |*******                           1169891.96774
#                 60         1198931 |******                            1226669.33333
#                159         1253835 |******************                1284132.63522
#                210         1308739 |***********************           1337840.52381
#                281         1363643 |********************************  1392691.64057
#                272         1418547 |******************************    1444680.55882
#                213         1473451 |************************          1499282.73709
#                118         1528355 |*************                     1552451.50847
#                 84         1583259 |*********                         1610873.38095
#                 89         1638163 |**********                        1664964.25843
#                125         1693067 |**************                    1721326.20000
#                 96         1747971 |**********                        1778285.58333
#                104         1802875 |***********                       1828619.07692
#                 88         1857779 |**********                        1884469.86364
#                 74         1912683 |********                          1938761.54054
#                 61         1967587 |******                            1992249.68852
#                 48         2022491 |*****                             2051229.33333
#                 36         2077395 |****                              2098501.55556
#
#                142           > 95% |****************                  2285576.38732
#
#        mean of 95%   1426430.52469
#          95th %ile         2132271
#
# WARNINGS
#     Actual benchmark run time only accounts for 21.1% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_sst1   1   1          111979         7339        0        5 st sock
# bin/../bin-riscv64/pipe -N pipe_sst1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x sock -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    107012                     107012
#                        max   1070345                     124029
#                       mean    159098.54997               113040.31694
#                     median    115745                     111979*
#                     stddev     95600.54834                 3663.04650
#             standard error       908.79316                   42.75865
#       99% confidence level      2341.05118                  110.14628
#                       skew         2.35226                    0.84499
#                   kurtosis         6.01393                   -0.14114
#           time correlation        21.06254                    1.65415
#
#               elapsed time        20.00481
#                   run time        10.50949
#          getnsecs overhead      1429
#
#          number of samples     11066
#         number of outliers      3727
#    number of final samples      7339
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          107012 |*                                  107253.75000
#                 14          107427 |*                                  107650.85714
#                 72          107842 |****                               108055.70833
#                204          108257 |************                       108487.59314
#                358          108672 |*********************              108890.18436
#                499          109087 |******************************     109303.17836
#                527          109502 |********************************   109716.07970
#                434          109917 |**************************         110132.24654
#                393          110332 |***********************            110535.03308
#                377          110747 |**********************             110954.67109
#                389          111162 |***********************            111372.31362
#                401          111577 |************************           111764.76559
#                362          111992 |*********************              112182.30939
#                265          112407 |****************                   112613.04906
#                243          112822 |**************                     113026.04527
#                215          113237 |*************                      113446.21395
#                181          113652 |**********                         113850.06630
#                169          114067 |**********                         114281.78698
#                142          114482 |********                           114693.11972
#                125          114897 |*******                            115109.76800
#                153          115312 |*********                          115522.77124
#                173          115727 |**********                         115925.23121
#                207          116142 |************                       116355.10628
#                179          116557 |**********                         116756.50838
#                152          116972 |*********                          117162.82237
#                134          117387 |********                           117591.24627
#                129          117802 |*******                            118024.66667
#                136          118217 |********                           118432.15441
#                117          118632 |*******                            118843.50427
#                 94          119047 |*****                              119235.05319
#                 72          119462 |****                               119628.40278
#                 52          119877 |***                                120084.75000
#
#                367           > 95% |**********************             121834.25613
#
#        mean of 95%    112577.41165
#          95th %ile          120262
#
# WARNINGS
#     Actual benchmark run time only accounts for 52.5% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_sst4k   1   1          132614         7146        0        5 st sock
# bin/../bin-riscv64/pipe -N pipe_sst4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x sock -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    127279                     127279
#                        max   1042494                     141595
#                       mean    186911.34316               133050.52113
#                     median    134834                     132614*
#                     stddev    111773.19752                 2851.30883
#             standard error      1079.34249                   33.72972
#       99% confidence level      2780.38624                   86.88776
#                       skew         2.24098                    0.67514
#                   kurtosis         4.73865                   -0.15157
#           time correlation        25.26475                    1.34190
#
#               elapsed time        20.01216
#                   run time        10.22616
#          getnsecs overhead      1429
#
#          number of samples     10724
#         number of outliers      3578
#    number of final samples      7146
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          127279 |*                                  127409.33333
#                  5          127632 |*                                  127796.00000
#                 21          127985 |*                                  128228.19048
#                 50          128338 |***                                128523.38000
#                 92          128691 |******                             128887.84783
#                214          129044 |***************                    129240.78037
#                280          129397 |********************               129576.46071
#                383          129750 |****************************       129923.20888
#                437          130103 |********************************   130285.10069
#                422          130456 |******************************     130635.17773
#                414          130809 |******************************     130969.92995
#                334          131162 |************************           131345.26647
#                285          131515 |********************               131696.46667
#                293          131868 |*********************              132038.65188
#                294          132221 |*********************              132392.53401
#                277          132574 |********************               132738.62816
#                290          132927 |*********************              133112.03103
#                278          133280 |********************               133448.40647
#                316          133633 |***********************            133806.22468
#                282          133986 |********************               134170.06028
#                273          134339 |*******************                134510.55311
#                271          134692 |*******************                134860.23985
#                216          135045 |***************                    135200.43981
#                173          135398 |************                       135580.61850
#                144          135751 |**********                         135934.38889
#                164          136104 |************                       136264.61585
#                113          136457 |********                           136641.04425
#                105          136810 |*******                            136990.25714
#                103          137163 |*******                            137340.16505
#                 96          137516 |*******                            137665.10417
#                 90          137869 |******                             138045.17778
#                 70          138222 |*****                              138392.02857
#
#                358           > 95% |**************************         139800.12291
#
#        mean of 95%    132694.54626
#          95th %ile          138574
#
# WARNINGS
#     Actual benchmark run time only accounts for 51.1% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_tmp1   1   1         2301871          807        0        1 mp  tcp
# bin/../bin-riscv64/pipe -N pipe_tmp1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x tcp -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    581671                    1278071
#                        max   6651771                    3266871
#                       mean   2264418.24321              2280290.20694
#                     median   2294871                    2301871*
#                     stddev    462241.75641               340633.91014
#             standard error     15882.81471                11990.88154
#       99% confidence level     40914.13071                30888.51084
#                       skew         0.83892                   -0.04843
#                   kurtosis        11.06083                    0.03861
#           time correlation      1680.86774                 1422.08802
#
#               elapsed time        20.02598
#                   run time         1.92331
#          getnsecs overhead      1429
#
#          number of samples       847
#         number of outliers        40
#    number of final samples       807
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4         1278071 |**                                1310921.00000
#                  3         1327281 |*                                 1366337.66667
#                  4         1376491 |**                                1404096.00000
#                  4         1425701 |**                                1442646.00000
#                  3         1474911 |*                                 1489337.66667
#                  6         1524121 |***                               1545471.00000
#                  3         1573331 |*                                 1593671.00000
#                  3         1622541 |*                                 1642637.66667
#                  2         1671751 |*                                 1688871.00000
#                  4         1720961 |**                                1753621.00000
#                  7         1770171 |***                               1800371.00000
#                 18         1819381 |*********                         1850571.00000
#                 29         1868591 |****************                  1899805.48276
#                 58         1917801 |********************************  1943027.89655
#                 55         1967011 |******************************    1993231.00000
#                 50         2016221 |***************************       2039651.00000
#                 47         2065431 |*************************         2087847.59574
#                 20         2114641 |***********                       2139621.00000
#                 23         2163851 |************                      2188897.08696
#                 27         2213061 |**************                    2244074.70370
#                 41         2262271 |**********************            2286322.21951
#                 45         2311481 |************************          2340704.33333
#                 50         2360691 |***************************       2383873.00000
#                 47         2409901 |*************************         2434334.82979
#                 44         2459111 |************************          2481898.27273
#                 46         2508321 |*************************         2530592.73913
#                 32         2557531 |*****************                 2578180.37500
#                 27         2606741 |**************                    2630289.51852
#                 29         2655951 |****************                  2681681.34483
#                 19         2705161 |**********                        2728539.42105
#                  8         2754371 |****                              2779371.00000
#                  8         2803581 |****                              2826921.00000
#
#                 41           > 95% |**********************            2980085.63415
#
#        mean of 95%   2242833.79373
#          95th %ile         2852771
#
# WARNINGS
#     Actual benchmark run time only accounts for 9.6% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_tmp4k   1   1         2342071          800        0        1 mp  tcp
# bin/../bin-riscv64/pipe -N pipe_tmp4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x tcp -m mp 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    679671                    1263371
#                        max   3902771                    3366871
#                       mean   2263213.26627              2317894.87500
#                     median   2327171                    2342071*
#                     stddev    467675.77714               356181.24462
#             standard error     16088.53583                12592.90867
#       99% confidence level     41444.06830                32439.33273
#                       skew        -0.78266                   -0.10574
#                   kurtosis         1.93909                    0.46740
#           time correlation      1756.84906                 1483.09831
#
#               elapsed time        20.03028
#                   run time         1.91452
#          getnsecs overhead      1429
#
#          number of samples       845
#         number of outliers        45
#    number of final samples       800
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2         1263371 |*                                 1274971.00000
#                  5         1314918 |**                                1338151.00000
#                  8         1366465 |****                              1399421.00000
#                  5         1418012 |**                                1441931.00000
#                  1         1469559 |*                                 1490471.00000
#                  8         1521106 |****                              1543796.00000
#                  4         1572653 |**                                1596746.00000
#                  5         1624200 |**                                1651291.00000
#                  2         1675747 |*                                 1703821.00000
#                  4         1727294 |**                                1768296.00000
#                  4         1778841 |**                                1814696.00000
#                 17         1830388 |*********                         1858800.41176
#                 15         1881935 |********                          1911231.00000
#                 32         1933482 |*****************                 1962646.00000
#                 48         1985029 |**************************        2011052.25000
#                 57         2036576 |******************************    2062667.49123
#                 54         2088123 |*****************************     2109478.40741
#                 37         2139670 |********************              2169687.21622
#                 17         2191217 |*********                         2216941.58824
#                 40         2242764 |*********************             2264278.50000
#                 41         2294311 |**********************            2327151.48780
#                 45         2345858 |************************          2370902.11111
#                 48         2397405 |**************************        2422523.08333
#                 59         2448952 |********************************  2472599.81356
#                 47         2500499 |*************************         2521177.38298
#                 40         2552046 |*********************             2580113.50000
#                 33         2603593 |*****************                 2623986.15152
#                 33         2655140 |*****************                 2679961.90909
#                 20         2706687 |**********                        2736331.00000
#                  9         2758234 |****                              2780882.11111
#                 13         2809781 |*******                           2840040.23077
#                  7         2861328 |***                               2876085.28571
#
#                 40           > 95% |*********************             3075386.00000
#
#        mean of 95%   2278026.92105
#          95th %ile         2912871
#
# WARNINGS
#     Actual benchmark run time only accounts for 9.6% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_tmt1   1   1         2126271         1443        0        1 mt  tcp
# bin/../bin-riscv64/pipe -N pipe_tmt1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x tcp -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    552371                     852471
#                        max   6497971                    3351871
#                       mean   2142427.59277              2126903.26958
#                     median   2130871                    2126271*
#                     stddev    484233.48565               427707.04379
#             standard error     12647.00916                11259.34786
#       99% confidence level     32578.69561                29004.08009
#                       skew         0.47102                   -0.59087
#                   kurtosis         6.68192                    0.94771
#           time correlation      1031.08103                  965.27636
#
#               elapsed time        20.01828
#                   run time         3.14456
#          getnsecs overhead      1429
#
#          number of samples      1466
#         number of outliers        23
#    number of final samples      1443
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10          852471 |**                                 874041.00000
#                 18          912097 |****                               942937.66667
#                 16          971723 |***                               1001008.50000
#                 10         1031349 |**                                1060311.00000
#                  7         1090975 |*                                 1116742.42857
#                  7         1150601 |*                                 1180271.00000
#                 10         1210227 |**                                1240991.00000
#                 17         1269853 |***                               1300518.05882
#                  8         1329479 |*                                 1370608.50000
#                 13         1389105 |***                               1420447.92308
#                  9         1448731 |**                                1478559.88889
#                 11         1508357 |**                                1537752.81818
#                 19         1567983 |****                              1603302.57895
#                 13         1627609 |***                               1650868.30769
#                 14         1687235 |***                               1712463.85714
#                 27         1746861 |******                            1773867.29630
#                 47         1806487 |**********                        1839975.25532
#                 81         1866113 |******************                1896694.45679
#                130         1925739 |******************************    1959356.38462
#                137         1985365 |********************************  2016310.41606
#                 87         2044991 |********************              2070813.52874
#                 71         2104617 |****************                  2132627.33803
#                 57         2164243 |*************                     2193442.92982
#                 67         2223869 |***************                   2256453.08955
#                 94         2283495 |*********************             2312011.42553
#                104         2343121 |************************          2370707.53846
#                 89         2402747 |********************              2430784.48315
#                 53         2462373 |************                      2491572.88679
#                 59         2521999 |*************                     2549720.15254
#                 32         2581625 |*******                           2612261.62500
#                 32         2641251 |*******                           2677861.62500
#                 21         2700877 |****                              2724823.38095
#
#                 73           > 95% |*****************                 2940858.67123
#
#        mean of 95%   2083531.92336
#          95th %ile         2760471
#
# WARNINGS
#     Actual benchmark run time only accounts for 15.7% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_tmt4k   1   1         2201171         1345        0        1 mt  tcp
# bin/../bin-riscv64/pipe -N pipe_tmt4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x tcp -m mt 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    698971                     777071
#                        max   5232971                    3561071
#                       mean   2168779.21508              2159000.23048
#                     median   2203371                    2201171*
#                     stddev    496261.82806               471448.07968
#             standard error     13491.55390                12855.01918
#       99% confidence level     34754.24284                33114.52941
#                       skew        -0.19510                   -0.66500
#                   kurtosis         2.13987                    0.55100
#           time correlation      1182.68370                 1150.25578
#
#               elapsed time        20.01220
#                   run time         2.93725
#          getnsecs overhead      1429
#
#          number of samples      1353
#         number of outliers         8
#    number of final samples      1345
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          777071 |*                                  777071.00000
#                  5          841247 |*                                  884651.00000
#                 26          905423 |********                           945206.19231
#                 19          969599 |******                             992007.84211
#                 12         1033775 |***                               1062971.00000
#                 12         1097951 |***                               1124846.00000
#                  5         1162127 |*                                 1195971.00000
#                 16         1226303 |*****                             1253833.50000
#                 12         1290479 |***                               1318812.66667
#                 22         1354655 |*******                           1388380.09091
#                 11         1418831 |***                               1442589.18182
#                 13         1483007 |****                              1511863.30769
#                  9         1547183 |**                                1571926.55556
#                 11         1611359 |***                               1650898.27273
#                 22         1675535 |*******                           1706675.54545
#                 20         1739711 |******                            1769826.00000
#                 35         1803887 |***********                       1839933.85714
#                 58         1868063 |******************                1901627.89655
#                 99         1932239 |*******************************   1964556.85859
#                 91         1996415 |*****************************     2025036.93407
#                 83         2060591 |**************************        2089913.16867
#                 79         2124767 |*************************         2155035.55696
#                 57         2188943 |******************                2221742.92982
#                 68         2253119 |*********************             2286715.11765
#                 92         2317295 |*****************************     2348706.86957
#                100         2381471 |********************************  2416212.00000
#                 80         2445647 |*************************         2480938.50000
#                 70         2509823 |**********************            2542872.42857
#                 56         2573999 |*****************                 2605383.50000
#                 46         2638175 |**************                    2670375.34783
#                 27         2702351 |********                          2731311.74074
#                 20         2766527 |******                            2792381.00000
#
#                 68           > 95% |*********************             2999628.35294
#
#        mean of 95%   2114236.94753
#          95th %ile         2830671
#
# WARNINGS
#     Actual benchmark run time only accounts for 14.7% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
          prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_tst1   1   1          925271         2561        0        1 st  tcp
# bin/../bin-riscv64/pipe -N pipe_tst1 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1 -x tcp -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    276490                     276490
#                        max   4992371                    2025571
#                       mean    972546.85902               954646.63413
#                     median    927471                     925271*
#                     stddev    404789.60343               361708.32723
#             standard error      7955.42388                 7147.49266
#       99% confidence level     20493.17190                18411.94109
#                       skew         1.02526                   -0.11092
#                   kurtosis         7.33766                   -0.03285
#           time correlation       493.13663                  467.00382
#
#               elapsed time        20.01236
#                   run time         2.54879
#          getnsecs overhead      1429
#
#          number of samples      2589
#         number of outliers        28
#    number of final samples      2561
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                264          276490 |********************               292781.93939
#                 66          315290 |*****                              335744.71212
#                 25          354090 |*                                  368903.00000
#                 11          392890 |*                                  416901.00000
#                 11          431690 |*                                  446077.18182
#                 11          470490 |*                                  495198.27273
#                 13          509290 |*                                  529799.07692
#                  6          548090 |*                                  572787.66667
#                 16          586890 |*                                  609981.50000
#                 32          625690 |**                                 644971.00000
#                 27          664490 |**                                 681548.77778
#                 22          703290 |*                                  725889.86364
#                 26          742090 |**                                 763482.53846
#                 47          780890 |***                                799943.34043
#                 90          819690 |******                             848510.61111
#                413          858490 |********************************   877218.25182
#                245          897290 |******************                 914082.02041
#                149          936090 |***********                        953951.53691
#                102          974890 |*******                            993349.43137
#                 67         1013690 |*****                             1032502.26866
#                 63         1052490 |****                              1071338.69841
#                 63         1091290 |****                              1111359.57143
#                 82         1130090 |******                            1148955.14634
#                 75         1168890 |*****                             1187541.66667
#                 87         1207690 |******                            1226921.57471
#                 99         1246490 |*******                           1264044.88889
#                 87         1285290 |******                            1303542.26437
#                 62         1324090 |****                              1342867.20968
#                 50         1362890 |***                               1381373.00000
#                 49         1401690 |***                               1423509.77551
#                 41         1440490 |***                               1458395.39024
#                 31         1479290 |**                                1492954.87097
#
#                129           > 95% |*********                         1699314.41085
#
#        mean of 95%    915147.39762
#          95th %ile         1518071
#
# WARNINGS
#     Actual benchmark run time only accounts for 12.7% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
           prc thr      nsecs/call      samples   errors cnt/samp md xprt
pipe_tst4k   1   1          937071         2510        0        1 st  tcp
# bin/../bin-riscv64/pipe -N pipe_tst4k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 4k -x tcp -m st 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    281890                     281890
#                        max   3621771                    1936071
#                       mean   1022665.35953              1004477.27291
#                     median    939871                     937071*
#                     stddev    348334.12854               311001.62959
#             standard error      6904.81638                 6207.62972
#       99% confidence level     17786.80699                15990.85417
#                       skew         0.69118                   -0.21080
#                   kurtosis         4.29636                    0.76740
#           time correlation       422.37415                  396.11493
#
#               elapsed time        20.01726
#                   run time         2.61551
#          getnsecs overhead      1429
#
#          number of samples      2545
#         number of outliers        35
#    number of final samples      2510
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                166          281890 |***********                        295749.50602
#                 25          319568 |*                                  334087.60000
#                 13          357246 |*                                  371676.00000
#                  3          394924 |*                                  412910.66667
#                  2          432602 |*                                  455071.00000
#                  5          470280 |*                                  486071.00000
#                  5          507958 |*                                  522431.00000
#                  2          545636 |*                                  550221.00000
#                  8          583314 |*                                  601796.00000
#                 23          620992 |*                                  638984.04348
#                 11          658670 |*                                  685116.45455
#                 12          696348 |*                                  717712.66667
#                 13          734026 |*                                  750794.07692
#                 10          771704 |*                                  784261.00000
#                  8          809382 |*                                  826396.00000
#                384          847060 |***************************        873441.83333
#                445          884738 |********************************   902652.34831
#                227          922416 |****************                   937708.00441
#                107          960094 |*******                            977930.66355
#                 82          997772 |*****                             1016145.39024
#                 44         1035450 |***                               1050202.02273
#                 30         1073128 |**                                1094377.66667
#                 67         1110806 |****                              1130790.40299
#                102         1148484 |*******                           1166136.68627
#                107         1186162 |*******                           1203144.83178
#                 99         1223840 |*******                           1242616.45455
#                100         1261518 |*******                           1279410.00000
#                 86         1299196 |******                            1316772.16279
#                 75         1336874 |*****                             1354496.33333
#                 57         1374552 |****                              1390598.45614
#                 38         1412230 |**                                1430713.10526
#                 28         1449908 |**                                1469410.28571
#
#                126           > 95% |*********                         1665394.01587
#
#        mean of 95%    969546.27055
#          95th %ile         1487571
#
# WARNINGS
#     Actual benchmark run time only accounts for 13.1% of elapsed time.
#
# Usage: pipe
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pipe')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-m mode (st|mt|mp, default st)]
#     [-s buffer-size (default 1024)]
#     [-x transport (pipe|fifo|sock|tcp, default pipe)]
# notes: measures write()/read() across various transports
        prc thr      nsecs/call      samples   errors cnt/samp     nfds flags
poll_10   1   1           89887        18689        0        9       10   ---
# bin/../bin-riscv64/poll -N poll_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     84547                      84547
#                        max    409797                     105867
#                       mean     94345.54167                92207.29397
#                     median     90084                      89887*
#                     stddev     15041.01582                 4554.56897
#             standard error       107.06231                   33.31611
#       99% confidence level       275.79250                   85.82229
#                       skew         9.83406                    1.44409
#                   kurtosis       124.96450                    0.65186
#           time correlation         1.21338                    0.68481
#
#               elapsed time        20.00377
#                   run time        18.11420
#          getnsecs overhead      1429
#
#          number of samples     19737
#         number of outliers      1048
#    number of final samples     18689
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14           84547 |*                                   84850.85714
#                 83           85098 |*                                   85437.81928
#                 85           85649 |*                                   85906.27059
#                 91           86200 |*                                   86473.45055
#                 89           86751 |*                                   86996.98876
#                 86           87302 |*                                   87570.51163
#                 67           87853 |*                                   88115.88060
#                131           88404 |*                                   88773.48092
#               2398           88955 |***********                         89365.05713
#               6781           89506 |********************************    89708.26692
#               1549           90057 |*******                             90413.07553
#               2345           90608 |***********                         90804.97996
#                430           91159 |**                                  91414.40233
#                232           91710 |*                                   91958.86207
#                147           92261 |*                                   92514.70748
#                 83           92812 |*                                   93062.92771
#                 58           93363 |*                                   93617.58621
#                 32           93914 |*                                   94172.78125
#                 35           94465 |*                                   94731.20000
#                 24           95016 |*                                   95298.20833
#                 28           95567 |*                                   95870.57143
#                 31           96118 |*                                   96389.09677
#                 24           96669 |*                                   96983.29167
#                110           97220 |*                                   97551.50909
#                320           97771 |*                                   98049.16250
#                412           98322 |*                                   98598.51942
#                395           98873 |*                                   99153.06582
#                419           99424 |*                                   99697.08353
#                356           99975 |*                                  100240.54494
#                299          100526 |*                                  100793.22742
#                318          101077 |*                                  101355.80818
#                282          101628 |*                                  101898.68440
#
#                935           > 95% |****                               103677.63102
#
#        mean of 95%     91603.21798
#          95th %ile          102177
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: poll
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'poll')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures poll()
         prc thr      nsecs/call      samples   errors cnt/samp     nfds flags
poll_100   1   1          687671        18066        0        1      100   ---
# bin/../bin-riscv64/poll -N poll_100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    644671                     670071
#                        max   3299071                     706371
#                       mean    719507.92793               688196.05812
#                     median    689471                     687671*
#                     stddev    105188.56068                 6071.50749
#             standard error       680.72161                   45.17161
#       99% confidence level      1753.53887                  116.36206
#                       skew         8.83010                    0.59487
#                   kurtosis       110.17506                    0.04791
#           time correlation         7.54471                    1.12428
#
#               elapsed time        20.00380
#                   run time        17.21680
#          getnsecs overhead      1429
#
#          number of samples     23878
#         number of outliers      5812
#    number of final samples     18066
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 17          670071 |*                                  670629.82353
#                 17          671012 |*                                  671453.35294
#                 19          671953 |*                                  672360.47368
#                 11          672894 |*                                  673507.36364
#                 19          673835 |*                                  674265.73684
#                 16          674776 |*                                  675189.75000
#                 27          675717 |*                                  676241.37037
#                 37          676658 |*                                  677149.37838
#                 56          677599 |*                                  678063.85714
#                290          678540 |******                             679142.72414
#                705          679481 |****************                   679996.53191
#                804          680422 |******************                 680860.05473
#                902          681363 |********************               681856.03326
#               1309          682304 |*****************************      682783.91062
#               1203          683245 |***************************        683682.80382
#                835          684186 |*******************                684663.81437
#                912          685127 |********************               685584.04825
#               1106          686068 |*************************          686509.60759
#               1029          687009 |***********************            687491.21380
#               1398          687950 |********************************   688444.53362
#               1276          688891 |*****************************      689353.21003
#               1096          689832 |*************************          690308.59124
#                776          690773 |*****************                  691266.87629
#                571          691714 |*************                      692162.94396
#                534          692655 |************                       693102.08614
#                335          693596 |*******                            694064.73134
#                323          694537 |*******                            695013.72446
#                271          695478 |******                             695970.63100
#                307          696419 |*******                            696863.18241
#                335          697360 |*******                            697820.25373
#                317          698301 |*******                            698774.15457
#                309          699242 |*******                            699693.97735
#
#                904           > 95% |********************               702358.94248
#
#        mean of 95%    687450.03508
#          95th %ile          700171
#
# Usage: poll
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'poll')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures poll()
          prc thr      nsecs/call      samples   errors cnt/samp     nfds flags
poll_1000   1   1         6816771         2470        0        1     1000   ---
# bin/../bin-riscv64/poll -N poll_1000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 1000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   6618871                    6618871
#                        max  18506771                    7157571
#                       mean   6949172.61251              6836029.86640
#                     median   6836171                    6816771*
#                     stddev    498282.00202               107389.81483
#             standard error      9314.08905                 2160.80023
#       99% confidence level     23993.09340                 5566.22139
#                       skew        12.91469                    0.77785
#                   kurtosis       255.36863                    0.31457
#           time correlation       309.73977                  143.91956
#
#               elapsed time        20.00444
#                   run time        19.91056
#          getnsecs overhead      1429
#
#          number of samples      2862
#         number of outliers       392
#    number of final samples      2470
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         6618871 |*                                 6618871.00000
#                  5         6632653 |*                                 6643451.00000
#                 23         6646435 |****                              6653231.86957
#                 64         6660217 |***********                       6666789.75000
#                 57         6673999 |**********                        6680199.07018
#                 51         6687781 |*********                         6695771.00000
#                 57         6701563 |**********                        6709462.22807
#                 88         6715345 |***************                   6722838.04545
#                101         6729127 |******************                6736231.39604
#                104         6742909 |******************                6750245.03846
#                136         6756691 |************************          6763683.50000
#                151         6770473 |***************************       6777548.48344
#                177         6784255 |********************************  6790809.98305
#                166         6798037 |******************************    6805058.34940
#                148         6811819 |**************************        6818507.48649
#                133         6825601 |************************          6832698.81955
#                136         6839383 |************************          6845999.67647
#                104         6853165 |******************                6859746.00000
#                 93         6866947 |****************                  6873646.26882
#                 76         6880729 |*************                     6887527.57895
#                 62         6894511 |***********                       6900829.06452
#                 60         6908293 |**********                        6915256.00000
#                 45         6922075 |********                          6928839.88889
#                 51         6935857 |*********                         6942363.15686
#                 47         6949639 |********                          6956634.82979
#                 48         6963421 |********                          6970012.66667
#                 40         6977203 |*******                           6984258.50000
#                 30         6990985 |*****                             6996817.66667
#                 35         7004767 |******                            7011082.42857
#                 25         7018549 |****                              7025971.00000
#                 17         7032331 |***                               7038547.47059
#                 15         7046113 |**                                7053737.66667
#
#                124           > 95% |**********************            7104077.45161
#
#        mean of 95%   6821861.96334
#          95th %ile         7059871
#
# Usage: poll
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'poll')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures poll()
         prc thr      nsecs/call      samples   errors cnt/samp     nfds flags
poll_w10   1   1           89647        18843        0        9       10   -w-
# bin/../bin-riscv64/poll -N poll_w10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 10 -w 1 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     83607                      83607
#                        max    431236                     105687
#                       mean     93789.85380                91969.17619
#                     median     89707                      89647*
#                     stddev     14388.65917                 4573.29225
#             standard error       102.30485                   33.31608
#       99% confidence level       263.53728                   85.82223
#                       skew        11.56693                    1.43256
#                   kurtosis       176.42082                    0.61279
#           time correlation         1.12605                    0.67964
#
#               elapsed time        20.00430
#                   run time        18.05096
#          getnsecs overhead      1429
#
#          number of samples     19781
#         number of outliers       938
#    number of final samples     18843
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1           83607 |*                                   83607.00000
#                  4           84182 |*                                   84448.50000
#                 88           84757 |*                                   85116.63636
#                111           85332 |*                                   85585.24324
#                106           85907 |*                                   86202.55660
#                 83           86482 |*                                   86745.39759
#                 72           87057 |*                                   87329.13889
#                 63           87632 |*                                   87942.25397
#                133           88207 |*                                   88580.03008
#               3182           88782 |***************                     89188.52357
#               6567           89357 |********************************    89533.35633
#               2036           89932 |*********                           90298.56385
#               1766           90507 |********                            90680.13930
#                235           91082 |*                                   91312.74894
#                127           91657 |*                                   91934.64567
#                 78           92232 |*                                   92492.88462
#                 52           92807 |*                                   93070.28846
#                 45           93382 |*                                   93647.95556
#                 39           93957 |*                                   94242.33333
#                 25           94532 |*                                   94879.68000
#                 31           95107 |*                                   95378.58065
#                 31           95682 |*                                   95958.29032
#                 29           96257 |*                                   96601.86207
#                 60           96832 |*                                   97205.60000
#                354           97407 |*                                   97717.21469
#                443           97982 |**                                  98293.29120
#                401           98557 |*                                   98830.23691
#                436           99132 |**                                  99432.31881
#                389           99707 |*                                   99972.89460
#                351          100282 |*                                  100566.76068
#                329          100857 |*                                  101133.04255
#                233          101432 |*                                  101708.07725
#
#                943           > 95% |****                               103468.79321
#
#        mean of 95%     91363.35838
#          95th %ile          101977
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: poll
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'poll')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures poll()
          prc thr      nsecs/call      samples   errors cnt/samp     nfds flags
poll_w100   1   1          690271        17828        0        1      100   -w-
# bin/../bin-riscv64/poll -N poll_w100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 100 -w 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    645871                     672771
#                        max   4020371                     709471
#                       mean    721890.61750               691107.07808
#                     median    691871                     690271*
#                     stddev     99742.16864                 6126.40046
#             standard error       646.83148                   45.88324
#       99% confidence level      1666.23788                  118.19522
#                       skew         8.76907                    0.50301
#                   kurtosis       127.82348                    0.15079
#           time correlation         7.48435                    1.14235
#
#               elapsed time        20.00343
#                   run time        17.20138
#          getnsecs overhead      1429
#
#          number of samples     23778
#         number of outliers      5950
#    number of final samples     17828
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 17          672771 |*                                  673141.58824
#                 14          673709 |*                                  674299.57143
#                 22          674647 |*                                  675125.54545
#                 18          675585 |*                                  676121.00000
#                 21          676523 |*                                  676871.00000
#                 30          677461 |*                                  677934.33333
#                 41          678399 |*                                  678931.97561
#                186          679337 |***                                679930.13978
#                338          680275 |******                             680774.25444
#                292          681213 |*****                              681668.94521
#                476          682151 |********                           682655.87395
#                551          683089 |*********                          683585.33757
#                485          684027 |********                           684486.25773
#                622          684965 |***********                        685430.48553
#                735          685903 |*************                      686421.20408
#               1179          686841 |*********************              687351.74640
#               1261          687779 |**********************             688285.43299
#               1554          688717 |****************************       689185.28571
#               1769          689655 |********************************   690119.67157
#               1357          690593 |************************           691061.49374
#               1088          691531 |*******************                691968.15074
#                805          692469 |**************                     692896.34161
#                575          693407 |**********                         693848.21739
#                491          694345 |********                           694787.49695
#                395          695283 |*******                            695762.13924
#                365          696221 |******                             696652.91781
#                394          697159 |*******                            697624.29949
#                371          698097 |******                             698558.33154
#                454          699035 |********                           699494.34802
#                392          699973 |*******                            700439.36735
#                350          700911 |******                             701345.85714
#                288          701849 |*****                              702254.33333
#
#                892           > 95% |****************                   705233.78027
#
#        mean of 95%    690363.04062
#          95th %ile          702771
#
# Usage: poll
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'poll')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures poll()
           prc thr      nsecs/call      samples   errors cnt/samp     nfds flags
poll_w1000   1   1         6750671         2665        0        1     1000   -w-
# bin/../bin-riscv64/poll -N poll_w1000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 1000 -w 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   6429471                    6555871
#                        max  19683871                    7104771
#                       mean   6846397.44135              6773390.51220
#                     median   6761571                    6750671*
#                     stddev    427547.98531               111053.86656
#             standard error      7929.80209                 2151.22124
#       99% confidence level     20427.17018                 5541.54592
#                       skew        14.38566                    0.75347
#                   kurtosis       340.22986                    0.09397
#           time correlation       250.87919                  138.62263
#
#               elapsed time        20.00944
#                   run time        19.92077
#          getnsecs overhead      1429
#
#          number of samples      2907
#         number of outliers       242
#    number of final samples      2665
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         6555871 |*                                 6555871.00000
#                  2         6569778 |*                                 6580771.00000
#                 28         6583685 |****                              6591681.71429
#                 56         6597592 |*********                         6606310.28571
#                 83         6611499 |**************                    6619420.39759
#                106         6625406 |*****************                 6631711.56604
#                 69         6639313 |***********                       6645808.68116
#                 59         6653220 |*********                         6660357.44068
#                 83         6667127 |**************                    6673586.66265
#                135         6681034 |**********************            6688428.03704
#                183         6694941 |******************************    6701587.93989
#                189         6708848 |********************************  6715768.88360
#                176         6722755 |*****************************     6729176.11364
#                162         6736662 |***************************       6743236.43210
#                145         6750569 |************************          6757502.72414
#                136         6764476 |***********************           6771376.88235
#                114         6778383 |*******************               6784577.14035
#                 98         6792290 |****************                  6799669.97959
#                 82         6806197 |*************                     6812272.21951
#                 64         6820104 |**********                        6826625.68750
#                 70         6834011 |***********                       6840208.14286
#                 79         6847918 |*************                     6854384.92405
#                 65         6861825 |***********                       6868123.30769
#                 50         6875732 |********                          6883315.00000
#                 45         6889639 |*******                           6896424.33333
#                 62         6903546 |**********                        6910195.19355
#                 38         6917453 |******                            6924305.21053
#                 40         6931360 |******                            6937338.50000
#                 40         6945267 |******                            6951806.00000
#                 23         6959174 |***                               6966371.00000
#                 30         6973081 |*****                             6980324.33333
#                 18         6986988 |***                               6991848.77778
#
#                134           > 95% |**********************            7043112.79104
#
#        mean of 95%   6759110.47056
#          95th %ile         7000871
#
# Usage: poll
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'poll')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures poll()
            prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn   1   1        37820471          556        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15505471                   15505471
#                        max  50816636                   50816636
#                       mean  35203121.47662             35203121.47662
#                     median  37820471                   37820471*
#                     stddev   6950938.51462              6950938.51462
#             standard error    294785.45495               294785.45495
#       99% confidence level    759367.33195               759367.33195
#                       skew        -1.32328                   -1.32328
#                   kurtosis         1.26745                    1.26745
#           time correlation     38239.50840                38239.50840
#
#               elapsed time        20.03788
#                   run time        19.62455
#          getnsecs overhead      1429
#
#          number of samples       556
#         number of outliers         0
#    number of final samples       556
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5        15505471 |*                                15991911.00000
#                 10        16345203 |***                              16825121.00000
#                 18        17184935 |******                           17603159.88889
#                 10        18024667 |***                              18279351.00000
#                  2        18864399 |*                                19414371.00000
#                  4        19704131 |*                                20242546.00000
#                  1        20543863 |*                                20714271.00000
#                  1        21383595 |*                                21607771.00000
#                  3        22223327 |*                                22611571.00000
#                  1        23063059 |*                                23590871.00000
#                  5        23902791 |*                                24422011.00000
#                  3        24742523 |*                                25311304.33333
#                  3        25582255 |*                                26072837.66667
#                  2        26421987 |*                                26941521.00000
#                  4        27261719 |*                                27749721.00000
#                  9        28101451 |***                              28608937.66667
#                  9        28941183 |***                              29495704.33333
#                 12        29780915 |****                             30222946.00000
#                 14        30620647 |*****                            31212778.14286
#                 16        31460379 |******                           31944446.00000
#                 16        32300111 |******                           32701308.50000
#                 18        33139843 |******                           33586287.66667
#                 12        33979575 |****                             34459821.00000
#                 22        34819307 |********                         35196398.27273
#                 26        35659039 |**********                       36121059.46154
#                 26        36498771 |**********                       36920017.15385
#                 54        37338503 |********************             37797283.96296
#                 83        38178235 |******************************** 38588405.93976
#                 64        39017967 |************************         39420110.06250
#                 38        39857699 |**************                   40221844.68421
#                 23        40697431 |********                         41083984.04348
#                 14        41537163 |*****                            41857292.42857
#
#                 28           > 95% |**********                       44851916.17857
#
#        mean of 95%  34691442.96970
#          95th %ile        42376871
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                 prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_100r   1   1        38520571          548        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_100r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15347371                   15347371
#                        max  54648771                   54648771
#                       mean  35977787.72445             35977787.72445
#                     median  38520571                   38520571*
#                     stddev   7007677.39574              7007677.39574
#             standard error    299353.14229               299353.14229
#       99% confidence level    771133.69455               771133.69455
#                       skew        -1.40459                   -1.40459
#                   kurtosis         1.61840                    1.61840
#           time correlation     38575.59036                38575.59036
#
#               elapsed time        20.08261
#                   run time        19.76431
#          getnsecs overhead      1429
#
#          number of samples       548
#         number of outliers         0
#    number of final samples       548
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6        15347371 |**                               15797637.66667
#                  7        16207318 |**                               16632456.71429
#                 15        17067265 |******                           17580677.66667
#                 12        17927212 |****                             18342621.00000
#                  3        18787159 |*                                18929437.66667
#                  1        19647106 |*                                19672971.00000
#                  2        20507053 |*                                20953721.00000
#                  1        21367000 |*                                21578171.00000
#                  0        22226947 |                                              -
#                  2        23086894 |*                                23457371.00000
#                  3        23946841 |*                                24295137.66667
#                  3        24806788 |*                                25385137.66667
#                  3        25666735 |*                                26034771.00000
#                  3        26526682 |*                                26947404.33333
#                  3        27386629 |*                                27691637.66667
#                  6        28246576 |**                               28772271.00000
#                 12        29106523 |****                             29475004.33333
#                 10        29966470 |****                             30291721.00000
#                 10        30826417 |****                             31317651.00000
#                 17        31686364 |******                           32046471.00000
#                 12        32546311 |****                             32898446.00000
#                 22        33406258 |********                         33806452.81818
#                 17        34266205 |******                           34784106.29412
#                  8        35126152 |***                              35586158.50000
#                 12        35986099 |****                             36290862.66667
#                 32        36846046 |************                     37299964.75000
#                 59        37705993 |***********************          38166033.71186
#                 79        38565940 |******************************** 39009314.03797
#                 73        39425887 |*****************************    39845897.02740
#                 47        40285834 |*******************              40657132.70213
#                 23        41145781 |*********                        41503292.73913
#                 17        42005728 |******                           42327159.23529
#
#                 28           > 95% |***********                      45882684.03571
#
#        mean of 95%  35444447.15385
#          95th %ile        42865671
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                  prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_1024n   1   1        38220971          551        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_1024n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 1024 -p 256 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15818871                   15818871
#                        max  56963471                   56963471
#                       mean  35843367.30672             35843367.30672
#                     median  38220971                   38220971*
#                     stddev   7119848.28040              7119848.28040
#             standard error    303315.73439               303315.73439
#       99% confidence level    781341.33179               781341.33179
#                       skew        -1.19910                   -1.19910
#                   kurtosis         1.62573                    1.62573
#           time correlation     38628.56361                38628.56361
#
#               elapsed time        20.04270
#                   run time        19.80656
#          getnsecs overhead      1429
#
#          number of samples       551
#         number of outliers         0
#    number of final samples       551
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8        15818871 |**                               16351446.00000
#                 17        16669678 |*****                            17110135.70588
#                  7        17520485 |**                               18005128.14286
#                 10        18371292 |***                              18648451.00000
#                  3        19222099 |*                                19436871.00000
#                  2        20072906 |*                                20508121.00000
#                  0        20923713 |                                              -
#                  1        21774520 |*                                22552871.00000
#                  3        22625327 |*                                22944771.00000
#                  1        23476134 |*                                23721771.00000
#                  2        24326941 |*                                24715821.00000
#                  4        25177748 |*                                25710596.00000
#                  3        26028555 |*                                26626604.33333
#                  2        26879362 |*                                27445621.00000
#                  6        27730169 |*                                28123737.66667
#                  9        28580976 |**                               29155759.88889
#                 15        29431783 |****                             29844551.00000
#                 19        30282590 |*****                            30759249.94737
#                 10        31133397 |***                              31481381.00000
#                 10        31984204 |***                              32261421.00000
#                 10        32835011 |***                              33236591.00000
#                  6        33685818 |*                                34200654.33333
#                  8        34536625 |**                               34880671.00000
#                 13        35387432 |****                             35784555.61538
#                 25        36238239 |*******                          36717895.00000
#                 49        37089046 |***************                  37626768.95918
#                104        37939853 |******************************** 38324884.46154
#                 66        38790660 |********************             39228377.06061
#                 52        39641467 |****************                 39990361.38462
#                 39        40492274 |************                     40874942.79487
#                 13        41343081 |****                             41685724.84615
#                  6        42193888 |*                                42654171.00000
#
#                 28           > 95% |********                         47269591.17857
#
#        mean of 95%  35231638.30402
#          95th %ile        43044671
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_10r   1   1        37796571          572        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_10r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  14989971                   14989971
#                        max  54379471                   54379471
#                       mean  34788486.76049             34788486.76049
#                     median  37796571                   37796571*
#                     stddev   7386261.12499              7386261.12499
#             standard error    308835.09248               308835.09248
#       99% confidence level    795559.19823               795559.19823
#                       skew        -1.20413                   -1.20413
#                   kurtosis         0.97712                    0.97712
#           time correlation     39596.57032                39596.57032
#
#               elapsed time        20.02494
#                   run time        19.95136
#          getnsecs overhead      1429
#
#          number of samples       572
#         number of outliers         0
#    number of final samples       572
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9        14989971 |***                              15532282.11111
#                 12        15828856 |****                             16190421.00000
#                 16        16667741 |*****                            17051583.50000
#                  9        17506626 |***                              17910893.22222
#                  5        18345511 |*                                18816111.00000
#                  3        19184396 |*                                19352137.66667
#                  2        20023281 |*                                20464971.00000
#                  2        20862166 |*                                21212571.00000
#                  1        21701051 |*                                22442171.00000
#                  7        22539936 |**                               22953842.42857
#                  3        23378821 |*                                23948671.00000
#                  4        24217706 |*                                24872871.00000
#                  3        25056591 |*                                25399937.66667
#                  3        25895476 |*                                26454837.66667
#                  3        26734361 |*                                27222704.33333
#                  7        27573246 |**                               28027799.57143
#                  8        28412131 |**                               28817971.00000
#                  9        29251016 |***                              29593371.00000
#                 13        30089901 |****                             30596371.00000
#                 18        30928786 |******                           31333954.33333
#                 25        31767671 |*********                        32259131.00000
#                 10        32606556 |***                              33035811.00000
#                 13        33445441 |****                             33948671.00000
#                 18        34284326 |******                           34724882.11111
#                 13        35123211 |****                             35559786.38462
#                 25        35962096 |*********                        36403803.00000
#                 35        36800981 |************                     37268151.00000
#                 87        37639866 |******************************** 38082566.40230
#                 83        38478751 |******************************   38840583.04819
#                 39        39317636 |**************                   39708491.51282
#                 38        40156521 |*************                    40495294.68421
#                 20        40995406 |*******                          41336611.00000
#
#                 29           > 95% |**********                       45440719.79310
#
#        mean of 95%  34219582.97053
#          95th %ile        41834271
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                 prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_128n   1   1        37878071          567        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_128n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 128 -p 2048 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15004471                   15004471
#                        max  62885086                   52970971
#                       mean  34989639.33627             34940441.01764
#                     median  37878271                   37878071*
#                     stddev   7521844.47872              7436453.93804
#             standard error    315609.58333               312301.71042
#       99% confidence level    813010.28665               804489.20603
#                       skew        -1.13795                   -1.25309
#                   kurtosis         1.08378                    0.89891
#           time correlation     40700.88766                40395.07980
#
#               elapsed time        20.03875
#                   run time        19.93781
#          getnsecs overhead      1429
#
#          number of samples       568
#         number of outliers         1
#    number of final samples       567
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5        15004471 |**                               15320791.00000
#                 13        15866122 |*****                            16196486.38462
#                 16        16727773 |******                           17198702.25000
#                 18        17589424 |*******                          17916871.00000
#                  2        18451075 |*                                18757271.00000
#                  6        19312726 |**                               19764087.66667
#                  0        20174377 |                                              -
#                  1        21036028 |*                                21411171.00000
#                  1        21897679 |*                                22292871.00000
#                  1        22759330 |*                                23050671.00000
#                  1        23620981 |*                                24059971.00000
#                  2        24482632 |*                                24793871.00000
#                  1        25344283 |*                                26189071.00000
#                 12        26205934 |****                             26635904.33333
#                  5        27067585 |**                               27427871.00000
#                  8        27929236 |***                              28311196.00000
#                 10        28790887 |****                             29263851.00000
#                 13        29652538 |*****                            30040971.00000
#                 14        30514189 |*****                            30889928.14286
#                 20        31375840 |********                         31864366.00000
#                 14        32237491 |*****                            32600821.00000
#                 13        33099142 |*****                            33517901.76923
#                 12        33960793 |****                             34429771.00000
#                 15        34822444 |******                           35240537.66667
#                 22        35684095 |*********                        36105189.18182
#                 27        36545746 |***********                      37077645.07407
#                 76        37407397 |*******************************  37888146.00000
#                 78        38269048 |******************************** 38688327.41026
#                 53        39130699 |*********************            39597844.58491
#                 41        39992350 |****************                 40407534.41463
#                 22        40854001 |*********                        41214034.63636
#                 16        41715652 |******                           41949533.50000
#
#                 29           > 95% |***********                      45093667.55172
#
#        mean of 95%  34393148.13755
#          95th %ile        42577271
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                  prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_128nt   1   1        37970771          273        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_128nt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 128 -p 2048 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  16409971                   16409971
#                        max  63615736                   51808471
#                       mean  35873304.44891             35771683.82051
#                     median  37981071                   37970771*
#                     stddev   7027007.65292              6835235.44809
#             standard error    424517.05731               413687.26855
#       99% confidence level   1093555.93964              1065658.40377
#                       skew        -1.22475                   -1.53685
#                   kurtosis         2.51760                    2.09561
#           time correlation     73799.74590                72372.08218
#
#               elapsed time        20.71646
#                   run time         9.89329
#          getnsecs overhead      1429
#
#          number of samples       274
#         number of outliers         1
#    number of final samples       273
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  9        16409971 |*******                          16773293.22222
#                  8        17204768 |******                           17391371.00000
#                  3        17999565 |**                               18245704.33333
#                  3        18794362 |**                               18995637.66667
#                  0        19589159 |                                              -
#                  1        20383956 |*                                21041671.00000
#                  0        21178753 |                                              -
#                  0        21973550 |                                              -
#                  2        22768347 |*                                23307221.00000
#                  1        23563144 |*                                23572171.00000
#                  0        24357941 |                                              -
#                  1        25152738 |*                                25551171.00000
#                  1        25947535 |*                                26622871.00000
#                  2        26742332 |*                                26982971.00000
#                  1        27537129 |*                                27960571.00000
#                  2        28331926 |*                                28643771.00000
#                  4        29126723 |***                              29562621.00000
#                  4        29921520 |***                              30353671.00000
#                  1        30716317 |*                                31120471.00000
#                  8        31511114 |******                           31941658.50000
#                  9        32305911 |*******                          32871204.33333
#                  7        33100708 |*****                            33394456.71429
#                  5        33895505 |****                             34284091.00000
#                  1        34690302 |*                                35182071.00000
#                  9        35485099 |*******                          35954615.44444
#                 16        36279896 |*************                    36793846.00000
#                 32        37074693 |**************************       37501442.87500
#                 34        37869490 |****************************     38223612.17647
#                 38        38664287 |******************************** 38995860.47368
#                 35        39459084 |*****************************    39859479.57143
#                 17        40253881 |**************                   40552788.64706
#                  5        41048678 |****                             41470251.00000
#
#                 14           > 95% |***********                      45221428.14286
#
#        mean of 95%  35260886.83012
#          95th %ile        41843471
#
# WARNINGS
#     Actual benchmark run time only accounts for 47.8% of elapsed time.
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
               prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_1r   1   1        38019671          558        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_1r -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -r 1 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15362671                   15362671
#                        max  65079186                   53152371
#                       mean  35603096.96601             35550272.43369
#                     median  38019671                   38019671*
#                     stddev   7029117.29742              6923477.67607
#             standard error    297299.98457               293094.18138
#       99% confidence level    765844.76025               755010.61124
#                       skew        -1.30851                   -1.48744
#                   kurtosis         2.10703                    1.80010
#           time correlation     36718.01389                36346.75150
#
#               elapsed time        20.02936
#                   run time        19.96801
#          getnsecs overhead      1429
#
#          number of samples       559
#         number of outliers         1
#    number of final samples       558
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4        15362671 |*                                15703021.00000
#                 12        16198506 |***                              16678962.66667
#                 15        17034341 |****                             17501184.33333
#                 12        17870176 |***                              18337996.00000
#                  5        18706011 |*                                19166451.00000
#                  2        19541846 |*                                19814121.00000
#                  2        20377681 |*                                20495671.00000
#                  2        21213516 |*                                21635471.00000
#                  0        22049351 |                                              -
#                  4        22885186 |*                                23238396.00000
#                  1        23721021 |*                                24140771.00000
#                  2        24556856 |*                                25131521.00000
#                  1        25392691 |*                                26146671.00000
#                  1        26228526 |*                                26392471.00000
#                  2        27064361 |*                                27589521.00000
#                  1        27900196 |*                                28232971.00000
#                  8        28736031 |**                               29302658.50000
#                 12        29571866 |***                              29947946.00000
#                 14        30407701 |***                              30787942.42857
#                 15        31243536 |****                             31527777.66667
#                 10        32079371 |**                               32478711.00000
#                 13        32915206 |***                              33416232.53846
#                 11        33751041 |***                              34202034.63636
#                 15        34586876 |****                             34938231.00000
#                 15        35422711 |****                             35884057.66667
#                 25        36258546 |*******                          36668687.00000
#                 59        37094381 |****************                 37611223.54237
#                114        37930216 |******************************** 38315764.85965
#                 69        38766051 |*******************              39226710.13043
#                 50        39601886 |**************                   39990305.00000
#                 21        40437721 |*****                            40868151.95238
#                 13        41273556 |***                              41596701.76923
#
#                 28           > 95% |*******                          45145174.57143
#
#        mean of 95%  35043371.94340
#          95th %ile        42109371
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                 prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_256n   1   1        38243871          552        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_256n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 256 -p 1024 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  14900571                   15762971
#                        max  51488436                   51488436
#                       mean  35863819.39964             35901796.29891
#                     median  38232471                   38243871*
#                     stddev   6842547.98574              6790171.40111
#             standard error    290974.73818               289008.88751
#       99% confidence level    749550.92555               744486.89422
#                       skew        -1.48000                   -1.48063
#                   kurtosis         1.92601                    1.95705
#           time correlation     36675.89844                36462.04418
#
#               elapsed time        20.03102
#                   run time        19.88497
#          getnsecs overhead      1429
#
#          number of samples       553
#         number of outliers         1
#    number of final samples       552
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8        15762971 |**                               16156321.00000
#                 17        16588084 |******                           17034818.05882
#                  7        17413197 |**                               17785285.28571
#                  6        18238310 |**                               18604637.66667
#                  3        19063423 |*                                19324504.33333
#                  1        19888536 |*                                20265771.00000
#                  2        20713649 |*                                20862271.00000
#                  0        21538762 |                                              -
#                  2        22363875 |*                                22676871.00000
#                  3        23188988 |*                                23820004.33333
#                  2        24014101 |*                                24234671.00000
#                  1        24839214 |*                                25613571.00000
#                  3        25664327 |*                                26124537.66667
#                  5        26489440 |*                                26793831.00000
#                  3        27314553 |*                                27753371.00000
#                  5        28139666 |*                                28367391.00000
#                  4        28964779 |*                                29382146.00000
#                 12        29789892 |****                             30319321.00000
#                 13        30615005 |****                             31028086.38462
#                 18        31440118 |******                           31899609.88889
#                 14        32265231 |*****                            32821828.14286
#                 11        33090344 |***                              33434780.09091
#                 16        33915457 |*****                            34331358.50000
#                  7        34740570 |**                               35096971.00000
#                 16        35565683 |*****                            35992508.50000
#                 19        36390796 |******                           36848597.31579
#                 60        37215909 |*********************            37704164.33333
#                 89        38041022 |******************************** 38451359.76404
#                 73        38866135 |**************************       39306918.94521
#                 50        39691248 |*****************                40059421.00000
#                 38        40516361 |*************                    40971526.26316
#                 16        41341474 |*****                            41653483.50000
#
#                 28           > 95% |**********                       45612944.75000
#
#        mean of 95%  35382879.96947
#          95th %ile        42166571
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_32n   1   1        37983071          568        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_32n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 32 -p 8192 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15691271                   15691271
#                        max  57697171                   53293471
#                       mean  35013544.57645             34973608.61444
#                     median  37983071                   37983071*
#                     stddev   7421250.85336              7366343.08007
#             standard error    311115.02015               309084.88958
#       99% confidence level    801432.29190               796202.67556
#                       skew        -1.32303                   -1.39045
#                   kurtosis         1.15037                    1.09413
#           time correlation     38859.54463                38642.54791
#
#               elapsed time        20.04284
#                   run time        19.97536
#          getnsecs overhead      1429
#
#          number of samples       569
#         number of outliers         1
#    number of final samples       568
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8        15691271 |**                               16182183.50000
#                 25        16502603 |********                         16944779.00000
#                 22        17313935 |*******                          17740602.81818
#                  2        18125267 |*                                18508221.00000
#                  4        18936599 |*                                19319146.00000
#                  1        19747931 |*                                19849671.00000
#                  1        20559263 |*                                20829071.00000
#                  1        21370595 |*                                22011671.00000
#                  3        22181927 |*                                22496637.66667
#                  0        22993259 |                                              -
#                  4        23804591 |*                                24214346.00000
#                  4        24615923 |*                                25006546.00000
#                  2        25427255 |*                                25592621.00000
#                  6        26238587 |**                               26538604.33333
#                  0        27049919 |                                              -
#                  4        27861251 |*                                28345196.00000
#                  7        28672583 |**                               29155442.42857
#                  5        29483915 |*                                29830591.00000
#                 11        30295247 |***                              30578789.18182
#                 12        31106579 |****                             31623837.66667
#                 17        31917911 |*****                            32383788.64706
#                 17        32729243 |*****                            33238941.58824
#                 12        33540575 |****                             33945129.33333
#                 14        34351907 |****                             34644013.85714
#                 13        35163239 |****                             35641247.92308
#                 18        35974571 |******                           36404465.44444
#                 38        36785903 |*************                    37272205.21053
#                 93        37597235 |******************************** 38063429.06452
#                 77        38408567 |**************************       38816719.05195
#                 62        39219899 |*********************            39604090.35484
#                 31        40031231 |**********                       40353006.48387
#                 25        40842563 |********                         41187751.00000
#
#                 29           > 95% |*********                        44124473.24138
#
#        mean of 95%  34481261.53803
#          95th %ile        41653871
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                 prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_32nt   1   1        38264271          235        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_32nt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 32 -p 8192 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15267171                   27722271
#                        max  52304186                   48376371
#                       mean  36345241.21318             37771779.08511
#                     median  38125371                   38264271*
#                     stddev   6396661.43807              3561034.14300
#             standard error    398238.74629               232296.25406
#       99% confidence level   1025863.01043               598395.15045
#                       skew        -1.61601                   -0.58223
#                   kurtosis         2.97712                    0.84905
#           time correlation     72034.08701                48417.47668
#
#               elapsed time        20.69981
#                   run time         9.42975
#          getnsecs overhead      1429
#
#          number of samples       258
#         number of outliers        23
#    number of final samples       235
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3        27722271 |****                             27848771.00000
#                  0        28218034 |                                              -
#                  2        28713797 |**                               29002671.00000
#                  3        29209560 |****                             29486037.66667
#                  5        29705323 |******                           29875411.00000
#                  1        30201086 |*                                30412871.00000
#                  2        30696849 |**                               30880971.00000
#                  5        31192612 |******                           31469551.00000
#                  2        31688375 |**                               31877321.00000
#                  5        32184138 |******                           32470931.00000
#                  2        32679901 |**                               33107171.00000
#                  1        33175664 |*                                33281571.00000
#                  6        33671427 |********                         33938271.00000
#                  3        34167190 |****                             34613371.00000
#                  1        34662953 |*                                35150771.00000
#                  3        35158716 |****                             35374304.33333
#                  8        35654479 |**********                       35909221.00000
#                  6        36150242 |********                         36397721.00000
#                 12        36646005 |****************                 36860062.66667
#                 17        37141768 |**********************           37392171.00000
#                 24        37637531 |******************************** 37899779.33333
#                 24        38133294 |******************************** 38384204.33333
#                 21        38629057 |****************************     38869366.23810
#                 18        39124820 |************************         39338648.77778
#                 17        39620583 |**********************           39815976.88235
#                 11        40116346 |**************                   40326125.54545
#                  8        40612109 |**********                       40933108.50000
#                  2        41107872 |**                               41264571.00000
#                  4        41603635 |*****                            41715796.00000
#                  4        42099398 |*****                            42347521.00000
#                  1        42595161 |*                                42789271.00000
#                  2        43090924 |**                               43249171.00000
#
#                 12           > 95% |****************                 44858371.00000
#
#        mean of 95%  37390437.81614
#          95th %ile        43586671
#
# WARNINGS
#     Actual benchmark run time only accounts for 45.6% of elapsed time.
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                 prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_512n   1   1        38451371          483        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_512n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 512 -p 512 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15822171                   29681971
#                        max  67284986                   46275971
#                       mean  36422409.26287             38115773.69151
#                     median  38285271                   38451371*
#                     stddev   6310485.15725              2851731.34907
#             standard error    270559.81901               129758.26934
#       99% confidence level    696962.09376               334257.30182
#                       skew        -1.64152                   -0.92870
#                   kurtosis         4.09058                    1.46333
#           time correlation     32142.49637                18431.78917
#
#               elapsed time        20.04890
#                   run time        19.88185
#          getnsecs overhead      1429
#
#          number of samples       544
#         number of outliers        61
#    number of final samples       483
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6        29681971 |**                               29898687.66667
#                  6        30060231 |**                               30207954.33333
#                  3        30438491 |*                                30649004.33333
#                  5        30816751 |**                               30995771.00000
#                  7        31195011 |***                              31390899.57143
#                  3        31573271 |*                                31761637.66667
#                  7        31951531 |***                              32111971.00000
#                  2        32329791 |*                                32512821.00000
#                  4        32708051 |*                                32941821.00000
#                  3        33086311 |*                                33221737.66667
#                  3        33464571 |*                                33681237.66667
#                  2        33842831 |*                                34021771.00000
#                  2        34221091 |*                                34391221.00000
#                  6        34599351 |**                               34718087.66667
#                  7        34977611 |***                              35202071.00000
#                  1        35355871 |*                                35372671.00000
#                  9        35734131 |****                             35982648.77778
#                 11        36112391 |*****                            36224980.09091
#                  9        36490651 |****                             36706748.77778
#                 17        36868911 |********                         37059641.58824
#                 18        37247171 |********                         37450287.66667
#                 38        37625431 |******************               37839976.26316
#                 67        38003691 |******************************** 38190505.32836
#                 39        38381951 |******************               38565978.69231
#                 39        38760211 |******************               38912822.28205
#                 35        39138471 |****************                 39327931.00000
#                 25        39516731 |***********                      39698075.00000
#                 26        39894991 |************                     40087374.84615
#                 22        40273251 |**********                       40494743.72727
#                 13        40651511 |******                           40819847.92308
#                  9        41029771 |****                             41196093.22222
#                 14        41408031 |******                           41598985.28571
#
#                 25           > 95% |***********                      43083023.00000
#
#        mean of 95%  37844635.62882
#          95th %ile        41786271
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_64n   1   1        38650271          497        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_64n -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 64 -p 4096 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15257971                   26319471
#                        max  65934586                   49132371
#                       mean  36517677.63303             38053897.35815
#                     median  38427171                   38650271*
#                     stddev   6854078.21502              3967021.69227
#             standard error    293596.45330               177945.24233
#       99% confidence level    756304.46370               458386.94425
#                       skew        -1.36860                   -0.63125
#                   kurtosis         2.71043                    1.00958
#           time correlation     36852.27086                25276.50971
#
#               elapsed time        20.03969
#                   run time        19.96885
#          getnsecs overhead      1429
#
#          number of samples       545
#         number of outliers        48
#    number of final samples       497
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4        26319471 |**                               26474871.00000
#                  2        26871872 |*                                27326821.00000
#                  2        27424273 |*                                27462921.00000
#                  4        27976674 |**                               28182046.00000
#                  6        28529075 |***                              28759487.66667
#                  4        29081476 |**                               29347821.00000
#                  8        29633877 |****                             29865021.00000
#                 12        30186278 |******                           30572996.00000
#                  5        30738679 |**                               30896291.00000
#                  3        31291080 |*                                31578471.00000
#                  9        31843481 |*****                            32158359.88889
#                  5        32395882 |**                               32630771.00000
#                  6        32948283 |***                              33148804.33333
#                  1        33500684 |*                                33949771.00000
#                  9        34053085 |*****                            34419748.77778
#                  5        34605486 |**                               34947491.00000
#                  9        35157887 |*****                            35479671.00000
#                 16        35710288 |********                         35981658.50000
#                 12        36262689 |******                           36554629.33333
#                 18        36815090 |**********                       37153309.88889
#                 40        37367491 |**********************           37673671.00000
#                 50        37919892 |****************************     38204629.00000
#                 57        38472293 |******************************** 38755244.68421
#                 48        39024694 |**************************       39290400.16667
#                 43        39577095 |************************         39880966.34884
#                 26        40129496 |**************                   40372174.84615
#                 23        40681897 |************                     40934031.86957
#                 21        41234298 |***********                      41515751.95238
#                 10        41786699 |*****                            41979201.00000
#                  5        42339100 |**                               42569571.00000
#                  6        42891501 |***                              43290821.00000
#                  3        43443902 |*                                43750571.00000
#
#                 25           > 95% |**************                   46142739.00000
#
#        mean of 95%  37625462.94915
#          95th %ile        43996271
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
                 prc thr      nsecs/call      samples   errors cnt/samp 
posix_spawn_64nt   1   1        37829771          277        0        1 
# bin/../bin-riscv64/posix_spawn -N posix_spawn_64nt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 64 -p 4096 -t 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  15894271                   15894271
#                        max  58068286                   51542771
#                       mean  35573488.32014             35492279.66426
#                     median  37850871                   37829771*
#                     stddev   7155341.64130              7038778.83948
#             standard error    429148.87325               422919.23234
#       99% confidence level   1105487.49748              1089439.94250
#                       skew        -1.26949                   -1.42209
#                   kurtosis         1.66488                    1.55532
#           time correlation     76400.67867                75465.71526
#
#               elapsed time        20.69702
#                   run time         9.94790
#          getnsecs overhead      1429
#
#          number of samples       278
#         number of outliers         1
#    number of final samples       277
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6        15894271 |****                             16160371.00000
#                  8        16742478 |******                           17237896.00000
#                  6        17590685 |****                             18013037.66667
#                  3        18438892 |**                               18534404.33333
#                  1        19287099 |*                                19332571.00000
#                  2        20135306 |*                                20321321.00000
#                  0        20983513 |                                              -
#                  1        21831720 |*                                22505571.00000
#                  1        22679927 |*                                23170271.00000
#                  0        23528134 |                                              -
#                  1        24376341 |*                                25040571.00000
#                  1        25224548 |*                                25825671.00000
#                  3        26072755 |**                               26453204.33333
#                  3        26920962 |**                               27475871.00000
#                  2        27769169 |*                                28394971.00000
#                  3        28617376 |**                               28997937.66667
#                  4        29465583 |***                              29859021.00000
#                  6        30313790 |****                             30624804.33333
#                  8        31161997 |******                           31509383.50000
#                  1        32010204 |*                                32108671.00000
#                  7        32858411 |*****                            33215685.28571
#                  9        33706618 |******                           34024759.88889
#                  4        34554825 |***                              35060471.00000
#                  9        35403032 |******                           35979304.33333
#                 19        36251239 |**************                   36748197.31579
#                 37        37099446 |****************************     37578162.89189
#                 40        37947653 |******************************   38432428.50000
#                 42        38795860 |******************************** 39181716.23810
#                 17        39644067 |************                     40054165.11765
#                 10        40492274 |*******                          40960661.00000
#                  4        41340481 |***                              41674796.00000
#                  5        42188688 |***                              42662431.00000
#
#                 14           > 95% |**********                       45606692.42857
#
#        mean of 95%  34953869.85932
#          95th %ile        43036871
#
# WARNINGS
#     Actual benchmark run time only accounts for 48.1% of elapsed time.
#
# Usage: posix_spawn
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'posix_spawn')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n number of mmaps (default 0)]
#     [-p size of mmaps in pages (default 2)]
#     [-r number of background sleepr threads (default 0)]
#     [-t touch all mmap'd pages
# notes: measures posix_spawn/waitpid time of simple process()
            prc thr      nsecs/call      samples   errors cnt/samp     size
pread_t100k   1   1          376836        20440        0        1   102400
# bin/../bin-riscv64/pread -N pread_t100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    360386                     360386
#                        max   6508186                     438936
#                       mean    395222.88033               385019.89384
#                     median    377536                     376836*
#                     stddev     86667.47757                17991.12981
#             standard error       582.39591                  125.83979
#       99% confidence level      1500.25186                  324.16330
#                       skew        48.35649                    1.69315
#                   kurtosis      3288.51737                    1.33428
#           time correlation         4.51914                    2.38800
#
#               elapsed time        20.00499
#                   run time        17.37263
#          getnsecs overhead      1429
#
#          number of samples     22145
#         number of outliers      1705
#    number of final samples     20440
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6          360386 |*                                  361344.33333
#                 36          362469 |*                                  363867.94444
#                150          364552 |*                                  365660.66667
#                124          366635 |*                                  367617.45161
#                103          368718 |*                                  369729.20388
#                408          370801 |**                                 372150.58333
#               4717          372884 |******************************     374220.78800
#               4985          374967 |********************************   375962.96189
#               2190          377050 |**************                     378062.27626
#               1981          379133 |************                       380111.52751
#               1069          381216 |******                             382098.78765
#                370          383299 |**                                 384203.78378
#                177          385382 |*                                  386379.92655
#                145          387465 |*                                  388459.62069
#                139          389548 |*                                  390602.79856
#                117          391631 |*                                  392659.50427
#                 96          393714 |*                                  394666.93750
#                 79          395797 |*                                  396823.97468
#                 69          397880 |*                                  398811.36232
#                 61          399963 |*                                  401032.47541
#                 51          402046 |*                                  403119.33333
#                 56          404129 |*                                  405026.17857
#                 41          406212 |*                                  407301.85366
#                 48          408295 |*                                  409270.37500
#                 37          410378 |*                                  411475.18919
#                 59          412461 |*                                  413499.55932
#                138          414544 |*                                  415872.59420
#                418          416627 |**                                 417767.33971
#                458          418710 |**                                 419729.01310
#                433          420793 |**                                 421822.14319
#                360          422876 |**                                 423895.02778
#                297          424959 |*                                  425947.11111
#
#               1022           > 95% |******                             432338.08904
#
#        mean of 95%    382529.46251
#          95th %ile          427036
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
           prc thr      nsecs/call      samples   errors cnt/samp     size
pread_t10k   1   1           55861        18308        0       15    10240
# bin/../bin-riscv64/pread -N pread_t10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     53961                      53961
#                        max    308886                      65598
#                       mean     58635.00976                57252.40840
#                     median     55959                      55861*
#                     stddev      9155.39440                 2783.37864
#             standard error        65.60689                   20.57083
#       99% confidence level       169.00336                   52.99046
#                       skew        10.59803                    1.44867
#                   kurtosis       160.89378                    0.58090
#           time correlation         0.77042                    0.43116
#
#               elapsed time        20.00384
#                   run time        18.12163
#          getnsecs overhead      1429
#
#          number of samples     19474
#         number of outliers      1166
#    number of final samples     18308
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11           53961 |*                                   54106.54545
#                 91           54254 |*                                   54435.67033
#                 87           54547 |*                                   54682.26437
#                125           54840 |*                                   55031.06400
#               1953           55133 |***********                         55323.56324
#               5520           55426 |********************************    55557.87591
#               2203           55719 |************                        55840.85247
#               2021           56012 |***********                         56160.60515
#               1088           56305 |******                              56421.71140
#                419           56598 |**                                  56729.83771
#                218           56891 |*                                   57029.23394
#                184           57184 |*                                   57318.48370
#                123           57477 |*                                   57626.85366
#                 87           57770 |*                                   57904.72414
#                 82           58063 |*                                   58217.67073
#                 50           58356 |*                                   58499.24000
#                 49           58649 |*                                   58820.97959
#                 36           58942 |*                                   59096.86111
#                 44           59235 |*                                   59371.72727
#                 36           59528 |*                                   59687.72222
#                 38           59821 |*                                   59951.71053
#                 70           60114 |*                                   60290.42857
#                202           60407 |*                                   60570.93564
#                284           60700 |*                                   60847.21479
#                385           60993 |**                                  61138.16364
#                336           61286 |*                                   61427.95833
#                338           61579 |*                                   61722.49112
#                283           61872 |*                                   62028.39929
#                280           62165 |*                                   62310.40714
#                279           62458 |*                                   62606.40860
#                264           62751 |*                                   62899.49621
#                206           63044 |*                                   63179.94175
#
#                916           > 95% |*****                               64272.17467
#
#        mean of 95%     56882.69210
#          95th %ile           63323
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
          prc thr      nsecs/call      samples   errors cnt/samp     size
pread_t1k   1   1           25774        18174        0       34     1024
# bin/../bin-riscv64/pread -N pread_t1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     24969                      24969
#                        max    369886                      31511
#                       mean     27334.99775                26607.85650
#                     median     25816                      25774*
#                     stddev      5788.28796                 1634.31076
#             standard error        41.84426                   12.12298
#       99% confidence level       107.79081                   31.22880
#                       skew        20.63922                    1.38600
#                   kurtosis       874.01435                    0.41624
#           time correlation         0.44376                    0.25872
#
#               elapsed time        20.00449
#                   run time        18.12944
#          getnsecs overhead      1429
#
#          number of samples     19135
#         number of outliers       961
#    number of final samples     18174
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 81           24969 |*                                   25084.13580
#                265           25130 |*                                   25209.10189
#                974           25291 |*******                             25403.19302
#               4427           25452 |********************************    25540.50892
#               3335           25613 |************************            25686.07436
#               2110           25774 |***************                     25855.25877
#               1208           25935 |********                            26001.50000
#                369           26096 |**                                  26166.15447
#                267           26257 |*                                   26336.66292
#                304           26418 |**                                  26496.23355
#                237           26579 |*                                   26658.04641
#                136           26740 |*                                   26814.47794
#                102           26901 |*                                   26988.76471
#                 79           27062 |*                                   27145.30380
#                 67           27223 |*                                   27297.38806
#                 68           27384 |*                                   27468.72059
#                 49           27545 |*                                   27624.77551
#                 51           27706 |*                                   27783.11765
#                 53           27867 |*                                   27952.81132
#                 62           28028 |*                                   28112.83871
#                 91           28189 |*                                   28278.61538
#                141           28350 |*                                   28433.31915
#                211           28511 |*                                   28600.47393
#                275           28672 |*                                   28756.75636
#                344           28833 |**                                  28915.15116
#                315           28994 |**                                  29076.74921
#                385           29155 |**                                  29232.57403
#                301           29316 |**                                  29395.73754
#                293           29477 |**                                  29551.60751
#                262           29638 |*                                   29716.72901
#                237           29799 |*                                   29869.17722
#                166           29960 |*                                   30022.41566
#
#                909           > 95% |******                              30675.42574
#
#        mean of 95%     26393.69951
#          95th %ile           30099
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
            prc thr      nsecs/call      samples   errors cnt/samp     size
pread_z100k   1   1          250557         5688        0        2   102400
# bin/../bin-riscv64/pread -N pread_z100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    237657                     237657
#                        max   1137971                     295890
#                       mean    264934.27059               256127.67581
#                     median    250990                     250557*
#                     stddev     56398.80395                13254.33247
#             standard error       725.99103                  175.74301
#       99% confidence level      1870.15290                  452.71400
#                       skew         8.15879                    1.52590
#                   kurtosis        78.66431                    1.00711
#           time correlation        14.17241                    6.75954
#
#               elapsed time        20.00515
#                   run time         4.61054
#          getnsecs overhead      1429
#
#          number of samples      6035
#         number of outliers       347
#    number of final samples      5688
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15          237657 |*                                  238443.66667
#                 27          239197 |*                                  239898.96296
#                 32          240737 |*                                  241361.12500
#                 33          242277 |*                                  243095.36364
#                 59          243817 |*                                  244584.10169
#                583          245357 |**************                     246457.68611
#               1291          246897 |********************************   247633.70875
#                600          248437 |**************                     249254.02833
#                559          249977 |*************                      250744.19499
#                391          251517 |*********                          252236.46292
#                378          253057 |*********                          253786.66402
#                217          254597 |*****                              255298.37327
#                175          256137 |****                               256876.49714
#                111          257677 |**                                 258359.85586
#                 60          259217 |*                                  259832.83333
#                 55          260757 |*                                  261364.07273
#                 27          262297 |*                                  263068.03704
#                 22          263837 |*                                  264375.50000
#                 13          265377 |*                                  265800.61538
#                 14          266917 |*                                  267609.28571
#                 15          268457 |*                                  269254.53333
#                 18          269997 |*                                  270713.33333
#                 19          271537 |*                                  272461.73684
#                 77          273077 |*                                  273980.38961
#                 76          274617 |*                                  275314.01316
#                 80          276157 |*                                  276968.30000
#                 68          277697 |*                                  278460.51471
#                 73          279237 |*                                  280001.75342
#                 79          280777 |*                                  281481.89873
#                 78          282317 |*                                  283128.37179
#                 98          283857 |**                                 284542.73469
#                 60          285397 |*                                  286093.11667
#
#                285           > 95% |*******                            290664.14737
#
#        mean of 95%    254305.92967
#          95th %ile          286924
#
# WARNINGS
#     Actual benchmark run time only accounts for 23.0% of elapsed time.
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
           prc thr      nsecs/call      samples   errors cnt/samp     size
pread_z10k   1   1           37861        16067        0       23    10240
# bin/../bin-riscv64/pread -N pread_z10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     36161                      36161
#                        max    344524                      45195
#                       mean     39964.45095                38910.26446
#                     median     37903                      37861*
#                     stddev      7494.26416                 2098.79193
#             standard error        57.40414                   16.55778
#       99% confidence level       147.87307                   42.65283
#                       skew        14.70240                    1.40690
#                   kurtosis       392.64934                    0.50670
#           time correlation         0.67506                    0.37628
#
#               elapsed time        20.00448
#                   run time        15.95254
#          getnsecs overhead      1429
#
#          number of samples     17044
#         number of outliers       977
#    number of final samples     16067
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2           36161 |*                                   36242.50000
#                 55           36389 |*                                   36534.50909
#                137           36617 |*                                   36739.51095
#                116           36845 |*                                   36952.16379
#                233           37073 |**                                  37217.79828
#               2130           37301 |******************                  37442.69108
#               3624           37529 |********************************    37648.44702
#               2848           37757 |*************************           37850.34340
#               1468           37985 |************                        38093.93324
#                716           38213 |******                              38298.30587
#                386           38441 |***                                 38543.15544
#                236           38669 |**                                  38771.17797
#                125           38897 |*                                   39009.09600
#                 96           39125 |*                                   39242.88542
#                110           39353 |*                                   39463.83636
#                 86           39581 |*                                   39685.00000
#                 60           39809 |*                                   39926.35000
#                 56           40037 |*                                   40135.46429
#                 46           40265 |*                                   40377.08696
#                 53           40493 |*                                   40628.50943
#                108           40721 |*                                   40849.24074
#                142           40949 |*                                   41067.69014
#                159           41177 |*                                   41290.28302
#                194           41405 |*                                   41528.76289
#                230           41633 |**                                  41752.60870
#                287           41861 |**                                  41980.24042
#                275           42089 |**                                  42202.71273
#                266           42317 |**                                  42426.41729
#                320           42545 |**                                  42661.12187
#                269           42773 |**                                  42882.97398
#                261           43001 |**                                  43110.74330
#                169           43229 |*                                   43344.39645
#
#                804           > 95% |*******                             44172.81468
#
#        mean of 95%     38633.05222
#          95th %ile           43451
#
# WARNINGS
#     Actual benchmark run time only accounts for 79.7% of elapsed time.
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
          prc thr      nsecs/call      samples   errors cnt/samp     size
pread_z1k   1   1           19335        18019        0       46     1024
# bin/../bin-riscv64/pread -N pread_z1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     18685                      18685
#                        max    199186                      23768
#                       mean     20516.28099                20006.86192
#                     median     19357                      19335*
#                     stddev      3577.34829                 1254.01892
#             standard error        25.93303                    9.34198
#       99% confidence level        66.80348                   24.06493
#                       skew        14.13381                    1.27185
#                   kurtosis       429.01814                    0.21216
#           time correlation         0.33116                    0.20672
#
#               elapsed time        20.00310
#                   run time        17.91558
#          getnsecs overhead      1429
#
#          number of samples     19029
#         number of outliers      1010
#    number of final samples     18019
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 54           18685 |*                                   18765.51852
#                 80           18808 |*                                   18864.23750
#                580           18931 |***                                 19027.58276
#               5191           19054 |********************************    19123.43460
#               2429           19177 |**************                      19230.96418
#               2350           19300 |**************                      19357.67362
#                796           19423 |****                                19473.83040
#                322           19546 |*                                   19599.04969
#                230           19669 |*                                   19727.76522
#                212           19792 |*                                   19847.86792
#                138           19915 |*                                   19974.73188
#                295           20038 |*                                   20104.65763
#                354           20161 |**                                  20217.15819
#                287           20284 |*                                   20350.60976
#                236           20407 |*                                   20458.26271
#                122           20530 |*                                   20583.82787
#                 88           20653 |*                                   20710.75000
#                 70           20776 |*                                   20838.20000
#                 70           20899 |*                                   20964.01429
#                 88           21022 |*                                   21079.27273
#                 99           21145 |*                                   21204.69697
#                137           21268 |*                                   21331.51825
#                206           21391 |*                                   21454.97087
#                323           21514 |*                                   21579.29102
#                382           21637 |**                                  21701.80105
#                375           21760 |**                                  21823.66133
#                389           21883 |**                                  21945.35476
#                346           22006 |**                                  22066.83526
#                296           22129 |*                                   22187.10135
#                213           22252 |*                                   22312.90141
#                198           22375 |*                                   22435.41919
#                162           22498 |*                                   22550.37037
#
#                901           > 95% |*****                               23102.09656
#
#        mean of 95%     19843.94532
#          95th %ile           22614
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
             prc thr      nsecs/call      samples   errors cnt/samp     size
pread_zw100k   1   1          248990        20767        0        2   102400
# bin/../bin-riscv64/pread -N pread_zw100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -w -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    236590                     236590
#                        max   3318757                     286457
#                       mean    260955.70750               253447.97997
#                     median    249357                     248990*
#                     stddev     52664.04386                11003.48851
#             standard error       351.42177                   76.35606
#       99% confidence level       905.26249                  196.69321
#                       skew        21.97262                    1.76412
#                   kurtosis       966.29765                    1.63933
#           time correlation         3.06877                    1.43747
#
#               elapsed time        20.00431
#                   run time        17.46430
#          getnsecs overhead      1429
#
#          number of samples     22458
#         number of outliers      1691
#    number of final samples     20767
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7          236590 |*                                  237214.28571
#                 45          237947 |*                                  238739.22222
#                 48          239304 |*                                  239934.83333
#                 79          240661 |*                                  241421.98734
#                139          242018 |*                                  242696.79137
#                161          243375 |*                                  244047.26087
#                906          244732 |******                             245769.58168
#               4549          246089 |********************************   246849.45966
#               4028          247446 |****************************       248060.62686
#               2925          248803 |********************               249459.60274
#               1970          250160 |*************                      250761.12893
#               1184          251517 |********                           252116.29730
#                562          252874 |***                                253447.71708
#                247          254231 |*                                  254876.41700
#                216          255588 |*                                  256331.20370
#                215          256945 |*                                  257572.80930
#                125          258302 |*                                  258942.06400
#                 71          259659 |*                                  260296.23944
#                 52          261016 |*                                  261614.42308
#                 42          262373 |*                                  263034.57143
#                 28          263730 |*                                  264440.35714
#                 23          265087 |*                                  265847.17391
#                 25          266444 |*                                  267062.60000
#                 26          267801 |*                                  268588.11538
#                 22          269158 |*                                  269877.40909
#                 33          270515 |*                                  271300.66667
#                118          271872 |*                                  272680.50000
#                313          273229 |**                                 273982.23642
#                435          274586 |***                                275282.25747
#                440          275943 |***                                276628.01136
#                370          277300 |**                                 277955.21892
#                324          278657 |**                                 279331.19136
#
#               1039           > 95% |*******                            282902.99230
#
#        mean of 95%    251896.69460
#          95th %ile          279990
#
# Usage: pread
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pread')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (write a byte to each page after read)]
# notes: measures pread()
            prc thr      nsecs/call      samples   errors cnt/samp 
pthread_128   1   1         1523054           59        0      128 
# bin/../bin-riscv64/pthread_create -N pthread_128 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 128 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1316607                    1316607
#                        max   6336785                    2329036
#                       mean   1891723.83582              1635883.89831
#                     median   1556429                    1523054*
#                     stddev    838900.11174               236948.38068
#             standard error    102487.96052                30848.05164
#       99% confidence level    264008.98630                79464.58102
#                       skew         3.22324                    1.29460
#                   kurtosis        11.68301                    0.96963
#           time correlation     29436.23059                12395.63051
#
#               elapsed time        25.39644
#                   run time        16.22352
#          getnsecs overhead      1429
#
#          number of samples        67
#         number of outliers         8
#    number of final samples        59
#             ops per sample       128.00000 (-B 128)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         1316607 |**                                1316607.00000
#                  1         1345672 |**                                1352408.00000
#                  2         1374737 |****                              1393637.50000
#                  1         1403802 |**                                1426519.00000
#                  6         1432867 |**************                    1449847.66667
#                  4         1461932 |*********                         1477476.25000
#                 13         1490997 |********************************  1500616.38462
#                  5         1520062 |************                      1532508.60000
#                  2         1549127 |****                              1558968.50000
#                  1         1578192 |**                                1603669.00000
#                  2         1607257 |****                              1620711.50000
#                  1         1636322 |**                                1647918.00000
#                  2         1665387 |****                              1683070.00000
#                  0         1694452 |                                              -
#                  4         1723517 |*********                         1733450.00000
#                  1         1752582 |**                                1755204.00000
#                  1         1781647 |**                                1810337.00000
#                  1         1810712 |**                                1822759.00000
#                  1         1839777 |**                                1857397.00000
#                  1         1868842 |**                                1884071.00000
#                  1         1897907 |**                                1921482.00000
#                  1         1926972 |**                                1936144.00000
#                  1         1956037 |**                                1970079.00000
#                  1         1985102 |**                                2001726.00000
#                  1         2014167 |**                                2042301.00000
#                  1         2043232 |**                                2061129.00000
#
#                  3           > 95% |*******                           2293759.33333
#
#        mean of 95%   1600640.57143
#          95th %ile         2246677
#
# WARNINGS
#     Too few samples, 67 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 63.9% of elapsed time.
#
# Usage: pthread_create
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pthread_create')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s stacksize] (specify stacksize)
# notes: measures pthread_create
            prc thr      nsecs/call      samples   errors cnt/samp 
pthread_256   1   1         1611715           39        0      256 
# bin/../bin-riscv64/pthread_create -N pthread_256 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 256 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1428008                    1428008
#                        max   2057013                    2057013
#                       mean   1637568.53846              1637568.53846
#                     median   1611715                    1611715*
#                     stddev    142963.24528               142963.24528
#             standard error     22892.44053                22892.44053
#       99% confidence level     58970.92680                58970.92680
#                       skew         0.91986                    0.91986
#                   kurtosis         0.69971                    0.69971
#           time correlation     11869.71255                11869.71255
#
#               elapsed time        25.30748
#                   run time        16.34954
#          getnsecs overhead      1429
#
#          number of samples        39
#         number of outliers         0
#    number of final samples        39
#             ops per sample       256.00000 (-B 256)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         1428008 |******                            1428008.00000
#                  3         1445374 |*******************               1451840.33333
#                  0         1462740 |                                              -
#                  4         1480106 |*************************         1494120.00000
#                  0         1497472 |                                              -
#                  0         1514838 |                                              -
#                  3         1532204 |*******************               1540388.33333
#                  2         1549570 |************                      1556242.00000
#                  3         1566936 |*******************               1575233.66667
#                  0         1584302 |                                              -
#                  4         1601668 |*************************         1605135.50000
#                  2         1619034 |************                      1622640.00000
#                  1         1636400 |******                            1638689.00000
#                  5         1653766 |********************************  1663511.60000
#                  0         1671132 |                                              -
#                  0         1688498 |                                              -
#                  0         1705864 |                                              -
#                  2         1723230 |************                      1732329.00000
#                  2         1740596 |************                      1748520.50000
#                  2         1757962 |************                      1767348.50000
#                  1         1775328 |******                            1790698.00000
#                  0         1792694 |                                              -
#                  1         1810060 |******                            1824527.00000
#                  0         1827426 |                                              -
#                  0         1844792 |                                              -
#                  1         1862158 |******                            1871396.00000
#
#                  2           > 95% |************                      2020364.00000
#
#        mean of 95%   1616876.89189
#          95th %ile         1983715
#
# WARNINGS
#     Too few samples, 39 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 64.6% of elapsed time.
#
# Usage: pthread_create
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pthread_create')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s stacksize] (specify stacksize)
# notes: measures pthread_create
           prc thr      nsecs/call      samples   errors cnt/samp 
pthread_32   1   1         1352340          228        0       32 
# bin/../bin-riscv64/pthread_create -N pthread_32 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 32 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1108233                    1108233
#                        max   2723499                    2001540
#                       mean   1496062.05159              1410863.21930
#                     median   1388315                    1352340*
#                     stddev    326685.90982               197670.15320
#             standard error     20579.27796                13091.02570
#       99% confidence level     53012.22002                33722.48220
#                       skew         1.56043                    1.13731
#                   kurtosis         1.74203                    0.64547
#           time correlation      3910.09113                 2777.52011
#
#               elapsed time        20.05684
#                   run time        12.06460
#          getnsecs overhead      1429
#
#          number of samples       252
#         number of outliers        24
#    number of final samples       228
#             ops per sample        32.00000 (-B 32)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         1108233 |*                                 1108233.00000
#                  2         1130046 |***                               1143349.00000
#                  4         1151859 |******                            1162821.00000
#                  8         1173672 |************                      1183974.62500
#                 10         1195485 |****************                  1211720.20000
#                 20         1217298 |********************************  1231135.35000
#                 10         1239111 |****************                  1253138.70000
#                 12         1260924 |*******************               1272925.33333
#                 11         1282737 |*****************                 1290574.36364
#                 15         1304550 |************************          1315985.06667
#                 19         1326363 |******************************    1336647.26316
#                  6         1348176 |*********                         1358342.33333
#                 11         1369989 |*****************                 1382714.63636
#                 10         1391802 |****************                  1401782.20000
#                 18         1413615 |****************************      1424110.27778
#                  7         1435428 |***********                       1445997.57143
#                  3         1457241 |****                              1467675.00000
#                  8         1479054 |************                      1489768.12500
#                  3         1500867 |****                              1514269.00000
#                  6         1522680 |*********                         1535793.16667
#                  2         1544493 |***                               1556282.00000
#                  4         1566306 |******                            1574195.25000
#                  1         1588119 |*                                 1599015.00000
#                  1         1609932 |*                                 1624262.00000
#                  5         1631745 |********                          1639608.00000
#                  2         1653558 |***                               1663672.50000
#                  1         1675371 |*                                 1677527.00000
#                  3         1697184 |****                              1711178.66667
#                  0         1718997 |                                              -
#                  5         1740810 |********                          1751842.80000
#                  4         1762623 |******                            1777322.25000
#                  4         1784436 |******                            1797857.75000
#
#                 12           > 95% |*******************               1919880.41667
#
#        mean of 95%   1382584.48611
#          95th %ile         1806230
#
# WARNINGS
#     Actual benchmark run time only accounts for 60.2% of elapsed time.
#
# Usage: pthread_create
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pthread_create')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s stacksize] (specify stacksize)
# notes: measures pthread_create
            prc thr      nsecs/call      samples   errors cnt/samp 
pthread_512   1   1         1732159           20        0      512 
# bin/../bin-riscv64/pthread_create -N pthread_512 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 512 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1649011                    1649011
#                        max   1822443                    1822443
#                       mean   1723822.05000              1723822.05000
#                     median   1732159                    1732159*
#                     stddev     51404.24726                51404.24726
#             standard error     11494.33912                11494.33912
#       99% confidence level     29609.41757                29609.41757
#                       skew        -0.00161                   -0.00161
#                   kurtosis        -1.08528                   -1.08528
#           time correlation      8535.62481                 8535.62481
#
#               elapsed time        26.78721
#                   run time        17.65197
#          getnsecs overhead      1429
#
#          number of samples        20
#         number of outliers         0
#    number of final samples        20
#             ops per sample       512.00000 (-B 512)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3         1649011 |*******************               1650145.00000
#                  0         1654431 |                                              -
#                  1         1659851 |******                            1660942.00000
#                  1         1665271 |******                            1669113.00000
#                  0         1670691 |                                              -
#                  0         1676111 |                                              -
#                  1         1681531 |******                            1685967.00000
#                  1         1686951 |******                            1689849.00000
#                  0         1692371 |                                              -
#                  0         1697791 |                                              -
#                  0         1703211 |                                              -
#                  1         1708631 |******                            1713882.00000
#                  0         1714051 |                                              -
#                  2         1719471 |************                      1720530.50000
#                  0         1724891 |                                              -
#                  1         1730311 |******                            1732159.00000
#                  0         1735731 |                                              -
#                  0         1741151 |                                              -
#                  0         1746571 |                                              -
#                  5         1751991 |********************************  1754660.80000
#                  0         1757411 |                                              -
#                  1         1762831 |******                            1763532.00000
#                  0         1768251 |                                              -
#                  1         1773671 |******                            1777525.00000
#                  0         1779091 |                                              -
#                  0         1784511 |                                              -
#                  0         1789931 |                                              -
#                  1         1795351 |******                            1796229.00000
#
#                  1           > 95% |******                            1822443.00000
#
#        mean of 95%   1718631.47368
#          95th %ile         1822443
#
# WARNINGS
#     Too few samples, 20 < 100, consider running test longer, or for a least 100 samples
#     Actual benchmark run time only accounts for 65.9% of elapsed time.
#
# Usage: pthread_create
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pthread_create')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s stacksize] (specify stacksize)
# notes: measures pthread_create
           prc thr      nsecs/call      samples   errors cnt/samp 
pthread_64   1   1         1425714          152        0       64 
# bin/../bin-riscv64/pthread_create -N pthread_64 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 64 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1120959                    1120959
#                        max   2805726                    2110462
#                       mean   1505563.29032              1484992.95395
#                     median   1427498                    1425714*
#                     stddev    271085.20148               227941.06048
#             standard error     21774.08736                18488.46138
#       99% confidence level     56090.04904                47626.27652
#                       skew         1.54825                    0.77211
#                   kurtosis         3.52281                   -0.48570
#           time correlation      5456.52203                 4956.12980
#
#               elapsed time        25.20152
#                   run time        14.93541
#          getnsecs overhead      1429
#
#          number of samples       155
#         number of outliers         3
#    number of final samples       152
#             ops per sample        64.00000 (-B 64)
#
#       recommended -B value         1
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         1120959 |**                                1120959.00000
#                  1         1145832 |**                                1157979.00000
#                  2         1170705 |****                              1176681.50000
#                  1         1195578 |**                                1207167.00000
#                 10         1220451 |************************          1236423.80000
#                  9         1245324 |**********************            1259288.88889
#                 13         1270197 |********************************  1279310.15385
#                  6         1295070 |**************                    1311095.66667
#                 10         1319943 |************************          1335710.00000
#                  7         1344816 |*****************                 1358519.28571
#                  8         1369689 |*******************               1384830.00000
#                  7         1394562 |*****************                 1403932.57143
#                 13         1419435 |********************************  1430779.53846
#                  3         1444308 |*******                           1457378.66667
#                  3         1469181 |*******                           1476283.66667
#                  8         1494054 |*******************               1512003.62500
#                  3         1518927 |*******                           1530518.33333
#                  1         1543800 |**                                1556859.00000
#                  5         1568673 |************                      1580469.40000
#                  1         1593546 |**                                1597735.00000
#                  1         1618419 |**                                1636843.00000
#                  3         1643292 |*******                           1661031.33333
#                  1         1668165 |**                                1687706.00000
#                  2         1693038 |****                              1703293.50000
#                  4         1717911 |*********                         1732675.25000
#                  5         1742784 |************                      1753127.20000
#                  3         1767657 |*******                           1777142.66667
#                  2         1792530 |****                              1815384.00000
#                  2         1817403 |****                              1824402.50000
#                  2         1842276 |****                              1846970.50000
#                  6         1867149 |**************                    1882964.00000
#                  1         1892022 |**                                1913134.00000
#
#                  8           > 95% |*******************               1979880.12500
#
#        mean of 95%   1457499.22222
#          95th %ile         1916868
#
# WARNINGS
#     Actual benchmark run time only accounts for 59.3% of elapsed time.
#
# Usage: pthread_create
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pthread_create')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s stacksize] (specify stacksize)
# notes: measures pthread_create
             prc thr      nsecs/call      samples   errors cnt/samp     size
pwrite_n100k   1   1            2124        18437        0      408   102400
# bin/../bin-riscv64/pwrite -N pwrite_n100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2032                       2032
#                        max    244786                       2626
#                       mean      2284.64446                 2191.64978
#                     median      2129                       2124*
#                     stddev      1832.77597                  144.63534
#             standard error        13.01184                    1.06520
#       99% confidence level        33.51849                    2.74394
#                       skew       118.35760                    1.42486
#                   kurtosis     15487.70256                    0.71197
#           time correlation         0.04574                    0.02312
#
#               elapsed time        20.00407
#                   run time        18.22033
#          getnsecs overhead      1429
#
#          number of samples     19840
#         number of outliers      1403
#    number of final samples     18437
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 25            2032 |*                                    2042.36000
#                236            2048 |**                                   2057.71186
#               1179            2064 |***********                          2073.01781
#               2663            2080 |**************************           2088.24183
#               3183            2096 |********************************     2103.30474
#               2427            2112 |************************             2119.00742
#               1721            2128 |*****************                    2135.01162
#               1003            2144 |**********                           2150.82353
#                536            2160 |*****                                2166.67724
#                386            2176 |***                                  2182.35751
#                260            2192 |**                                   2199.37308
#                202            2208 |**                                   2214.92079
#                151            2224 |*                                    2231.71523
#                147            2240 |*                                    2247.03401
#                127            2256 |*                                    2263.20472
#                124            2272 |*                                    2280.31452
#                140            2288 |*                                    2295.62143
#                168            2304 |*                                    2312.29167
#                186            2320 |*                                    2328.19355
#                174            2336 |*                                    2343.32759
#                212            2352 |**                                   2360.10377
#                241            2368 |**                                   2375.21577
#                348            2384 |***                                  2391.48276
#                277            2400 |**                                   2407.07942
#                256            2416 |**                                   2423.35938
#                248            2432 |**                                   2439.30242
#                210            2448 |**                                   2454.83333
#                204            2464 |**                                   2471.23529
#                195            2480 |*                                    2487.09744
#                203            2496 |**                                   2503.97537
#                 83            2512 |*                                    2516.07229
#
#                922           > 95% |*********                            2566.63991
#
#        mean of 95%      2171.91008
#          95th %ile            2520
#
# Usage: pwrite
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pwrite')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures pwrite()
            prc thr      nsecs/call      samples   errors cnt/samp     size
pwrite_n10k   1   1            2107        18453        0      409    10240
# bin/../bin-riscv64/pwrite -N pwrite_n10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2033                       2033
#                        max    282536                       2580
#                       mean      2267.11210                 2171.93990
#                     median      2112                       2107*
#                     stddev      2099.09400                  135.93191
#             standard error        14.89244                    1.00066
#       99% confidence level        38.36292                    2.57771
#                       skew       121.42610                    1.41835
#                   kurtosis     16039.14442                    0.63762
#           time correlation         0.04514                    0.02161
#
#               elapsed time        20.00416
#                   run time        18.11301
#          getnsecs overhead      1429
#
#          number of samples     19867
#         number of outliers      1414
#    number of final samples     18453
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 25            2033 |*                                    2043.52000
#                463            2047 |****                                 2056.14687
#               2101            2061 |********************                 2068.68491
#               3249            2075 |********************************     2081.25916
#               2596            2089 |*************************            2095.30277
#               2007            2103 |*******************                  2109.16841
#               1376            2117 |*************                        2123.01599
#                792            2131 |*******                              2136.88763
#                510            2145 |*****                                2151.23333
#                350            2159 |***                                  2165.17143
#                240            2173 |**                                   2179.05417
#                183            2187 |*                                    2193.09290
#                170            2201 |*                                    2206.72941
#                123            2215 |*                                    2221.00813
#                116            2229 |*                                    2234.99138
#                109            2243 |*                                    2248.96330
#                 86            2257 |*                                    2263.68605
#                 77            2271 |*                                    2277.31169
#                 85            2285 |*                                    2292.80000
#                123            2299 |*                                    2305.82114
#                145            2313 |*                                    2319.80000
#                230            2327 |**                                   2334.01739
#                275            2341 |**                                   2347.40000
#                306            2355 |***                                  2361.54902
#                304            2369 |**                                   2375.67434
#                272            2383 |**                                   2389.76471
#                253            2397 |**                                   2403.37549
#                225            2411 |**                                   2417.67111
#                228            2425 |**                                   2431.46930
#                224            2439 |**                                   2445.31696
#                198            2453 |*                                    2459.22222
#                 89            2467 |*                                    2470.11236
#
#                923           > 95% |*********                            2520.26002
#
#        mean of 95%      2153.59994
#          95th %ile            2473
#
# Usage: pwrite
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pwrite')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures pwrite()
           prc thr      nsecs/call      samples   errors cnt/samp     size
pwrite_n1k   1   1            2112        18642        0      411     1024
# bin/../bin-riscv64/pwrite -N pwrite_n1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2010                       2010
#                        max    202286                       2605
#                       mean      2263.26513                 2180.37061
#                     median      2116                       2112*
#                     stddev      1647.24878                  141.40152
#             standard error        11.72159                    1.03564
#       99% confidence level        30.19482                    2.66780
#                       skew       100.01063                    1.38052
#                   kurtosis     11505.60717                    0.53752
#           time correlation         0.04340                    0.02238
#
#               elapsed time        20.00386
#                   run time        18.05970
#          getnsecs overhead      1429
#
#          number of samples     19749
#         number of outliers      1107
#    number of final samples     18642
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2            2010 |*                                    2016.00000
#                 17            2026 |*                                    2036.88235
#                343            2042 |***                                  2052.54227
#               1401            2058 |************                         2066.71877
#               3062            2074 |****************************         2082.29850
#               3491            2090 |********************************     2097.10226
#               2200            2106 |********************                 2112.89909
#               1563            2122 |**************                       2128.70058
#                768            2138 |*******                              2144.39844
#                455            2154 |****                                 2160.93187
#                290            2170 |**                                   2177.13448
#                232            2186 |**                                   2193.35776
#                154            2202 |*                                    2209.33766
#                122            2218 |*                                    2225.20492
#                116            2234 |*                                    2241.81897
#                123            2250 |*                                    2257.64228
#                117            2266 |*                                    2275.06838
#                186            2282 |*                                    2290.28495
#                177            2298 |*                                    2305.54237
#                148            2314 |*                                    2321.46622
#                195            2330 |*                                    2338.21538
#                279            2346 |**                                   2353.46237
#                323            2362 |**                                   2369.74923
#                337            2378 |***                                  2385.27893
#                330            2394 |***                                  2400.94545
#                289            2410 |**                                   2417.10381
#                261            2426 |**                                   2433.85057
#                251            2442 |**                                   2449.37052
#                244            2458 |**                                   2465.95492
#                212            2474 |*                                    2481.32547
#                 21            2490 |*                                    2490.14286
#
#                933           > 95% |********                             2539.56377
#
#        mean of 95%      2161.44650
#          95th %ile            2491
#
# Usage: pwrite
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pwrite')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures pwrite()
             prc thr      nsecs/call      samples   errors cnt/samp     size
pwrite_t100k   1   1          796471        20103        0        1   102400
# bin/../bin-riscv64/pwrite -N pwrite_t100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    760271                     760271
#                        max   8705171                     931471
#                       mean    828122.04769               814951.79391
#                     median    797171                     796471*
#                     stddev    100239.72518                38850.53087
#             standard error       689.16480                  274.01007
#       99% confidence level      1775.28853                  705.84994
#                       skew        27.69973                    1.55916
#                   kurtosis      1858.16067                    0.89247
#           time correlation         8.19729                    5.33727
#
#               elapsed time        20.00345
#                   run time        17.55119
#          getnsecs overhead      1429
#
#          number of samples     21156
#         number of outliers      1053
#    number of final samples     20103
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 20          760271 |*                                  763056.00000
#                 74          764709 |*                                  767488.56757
#                168          769147 |*                                  771447.19048
#                102          773585 |*                                  775780.80392
#                 91          778023 |*                                  780240.23077
#                215          782461 |*                                  785203.55814
#               1955          786899 |*********                          789799.79795
#               6608          791337 |********************************   793536.61743
#               2657          795775 |************                       797405.21152
#               2072          800213 |**********                         802521.48263
#               1261          804651 |******                             806350.69865
#                341          809089 |*                                  811004.13783
#                202          813527 |*                                  815634.36634
#                184          817965 |*                                  820103.60870
#                106          822403 |*                                  824537.98113
#                109          826841 |*                                  828729.71560
#                 50          831279 |*                                  833591.00000
#                 35          835717 |*                                  837688.14286
#                 26          840155 |*                                  842232.53846
#                 26          844593 |*                                  846663.30769
#                 25          849031 |*                                  851055.00000
#                 26          853469 |*                                  855432.53846
#                 23          857907 |*                                  859762.30435
#                 20          862345 |*                                  864561.00000
#                 61          866783 |*                                  869410.34426
#                269          871221 |*                                  874000.36803
#                521          875659 |**                                 877847.77543
#                535          880097 |**                                 882301.09346
#                444          884535 |**                                 886704.10811
#                317          888973 |*                                  891271.31546
#                293          893411 |*                                  895468.26962
#                261          897849 |*                                  900135.75096
#
#               1006           > 95% |****                               914291.87475
#
#        mean of 95%    809718.71430
#          95th %ile          902271
#
# Usage: pwrite
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pwrite')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures pwrite()
            prc thr      nsecs/call      samples   errors cnt/samp     size
pwrite_t10k   1   1          101219        18240        0        8    10240
# bin/../bin-riscv64/pwrite -N pwrite_t10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     96584                      96584
#                        max    798486                     119296
#                       mean    106156.58261               103667.12122
#                     median    101397                     101219*
#                     stddev     16659.35716                 5213.09960
#             standard error       119.57332                   38.59967
#       99% confidence level       308.02087                   99.43275
#                       skew        12.54171                    1.48328
#                   kurtosis       276.57032                    0.73324
#           time correlation         1.41577                    0.81050
#
#               elapsed time        20.00401
#                   run time        17.97587
#          getnsecs overhead      1429
#
#          number of samples     19411
#         number of outliers      1171
#    number of final samples     18240
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 20           96584 |*                                   96879.90000
#                 96           97169 |*                                   97493.98958
#                118           97754 |*                                   97980.01695
#                 76           98339 |*                                   98639.51316
#                155           98924 |*                                   99287.87742
#                841           99509 |*****                               99920.23662
#               4688          100094 |********************************   100417.89953
#               3328          100679 |**********************             100935.20463
#               1915          101264 |*************                      101563.36292
#               1711          101849 |***********                        102108.79369
#                678          102434 |****                               102662.67699
#                305          103019 |**                                 103283.08197
#                167          103604 |*                                  103846.94012
#                107          104189 |*                                  104451.09346
#                 66          104774 |*                                  105022.33333
#                 53          105359 |*                                  105669.24528
#                 40          105944 |*                                  106222.32500
#                 38          106529 |*                                  106845.26316
#                 31          107114 |*                                  107383.16129
#                 24          107699 |*                                  107990.62500
#                 45          108284 |*                                  108603.31111
#                 58          108869 |*                                  109223.51724
#                149          109454 |*                                  109810.97987
#                309          110039 |**                                 110355.11974
#                355          110624 |**                                 110921.55211
#                342          111209 |**                                 111505.34211
#                330          111794 |**                                 112079.47879
#                288          112379 |*                                  112671.32639
#                270          112964 |*                                  113262.87037
#                267          113549 |*                                  113840.03371
#                229          114134 |*                                  114409.75983
#                229          114719 |*                                  114984.20524
#
#                912           > 95% |******                             117008.07346
#
#        mean of 95%    102964.96584
#          95th %ile          115275
#
# Usage: pwrite
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pwrite')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures pwrite()
           prc thr      nsecs/call      samples   errors cnt/samp     size
pwrite_t1k   1   1           38711        18279        0       23     1024
# bin/../bin-riscv64/pwrite -N pwrite_t1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     36503                      36503
#                        max    292536                      46961
#                       mean     40847.48279                39907.33372
#                     median     38762                      38711*
#                     stddev      7038.14484                 2351.81574
#             standard error        50.78947                   17.39511
#       99% confidence level       130.83367                   44.80979
#                       skew        11.44100                    1.30477
#                   kurtosis       209.02845                    0.32665
#           time correlation         0.61716                    0.38378
#
#               elapsed time        20.00366
#                   run time        18.15087
#          getnsecs overhead      1429
#
#          number of samples     19203
#         number of outliers       924
#    number of final samples     18279
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1           36503 |*                                   36503.00000
#                  2           36766 |*                                   37005.50000
#                 16           37029 |*                                   37150.06250
#                 68           37292 |*                                   37486.69118
#                287           37555 |*                                   37675.39373
#                275           37818 |*                                   38001.29091
#               4819           38081 |********************************    38245.03611
#               2991           38344 |*******************                 38438.86994
#               2033           38607 |*************                       38745.20462
#               1000           38870 |******                              38975.86400
#                384           39133 |**                                  39256.20833
#                262           39396 |*                                   39525.15267
#                475           39659 |***                                 39814.38526
#                648           39922 |****                                40034.64969
#                273           40185 |*                                   40313.18315
#                299           40448 |*                                   40572.68896
#                123           40711 |*                                   40822.95122
#                 76           40974 |*                                   41098.09211
#                 65           41237 |*                                   41370.32308
#                 83           41500 |*                                   41660.67470
#                147           41763 |*                                   41881.61905
#                184           42026 |*                                   42162.11957
#                185           42289 |*                                   42425.87027
#                263           42552 |*                                   42688.71483
#                280           42815 |*                                   42942.64286
#                302           43078 |**                                  43208.99338
#                357           43341 |**                                  43471.47899
#                389           43604 |**                                  43740.01285
#                299           43867 |*                                   43998.60201
#                298           44130 |*                                   44262.38591
#                287           44393 |*                                   44521.07317
#                194           44656 |*                                   44786.27835
#
#                914           > 95% |******                              45742.42232
#
#        mean of 95%     39600.20610
#          95th %ile           44915
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: pwrite
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'pwrite')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures pwrite()
           prc thr      nsecs/call      samples   errors cnt/samp     size
read_t100k   1   1          373586        21353        0        1   102400
# bin/../bin-riscv64/read -N read_t100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    357486                     357486
#                        max   6554036                     436586
#                       mean    388389.98575               382075.04674
#                     median    373986                     373586*
#                     stddev     63874.25105                18172.69103
#             standard error       425.64866                  124.36260
#       99% confidence level      1096.47095                  320.35806
#                       skew        49.99606                    1.72667
#                   kurtosis      4226.33136                    1.38397
#           time correlation         3.56688                    2.26982
#
#               elapsed time        20.01642
#                   run time        17.40126
#          getnsecs overhead      1429
#
#          number of samples     22519
#         number of outliers      1166
#    number of final samples     21353
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          357486 |*                                  357486.00000
#                 16          359593 |*                                  361001.62500
#                 93          361700 |*                                  362831.69892
#                148          363807 |*                                  364798.16216
#                120          365914 |*                                  366887.25000
#                258          368021 |*                                  369472.24031
#               4557          370128 |**********************             371303.30744
#               6543          372235 |********************************   372960.10286
#               1969          374342 |*********                          375373.53936
#               2046          376449 |**********                         377469.67302
#                912          378556 |****                               379490.91776
#                434          380663 |**                                 381643.62673
#                211          382770 |*                                  383692.80095
#                147          384877 |*                                  385753.17687
#                 85          386984 |*                                  388066.29412
#                 70          389091 |*                                  390098.28571
#                 61          391198 |*                                  392286.73770
#                 47          393305 |*                                  394368.02128
#                 46          395412 |*                                  396412.19565
#                 52          397519 |*                                  398518.40385
#                 33          399626 |*                                  400493.57576
#                 22          401733 |*                                  402670.09091
#                 26          403840 |*                                  404924.46154
#                 26          405947 |*                                  407176.38462
#                 24          408054 |*                                  409258.91667
#                 23          410161 |*                                  411455.56522
#                201          412268 |*                                  413609.88060
#                517          414375 |**                                 415467.62476
#                550          416482 |**                                 417511.18182
#                425          418589 |**                                 419619.88235
#                311          420696 |*                                  421741.94855
#                311          422803 |*                                  423869.11897
#
#               1068           > 95% |*****                              429811.88951
#
#        mean of 95%    379561.71432
#          95th %ile          424886
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
          prc thr      nsecs/call      samples   errors cnt/samp     size
read_t10k   1   1           55087        18024        0       16    10240
# bin/../bin-riscv64/read -N read_t10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     53328                      53328
#                        max    425386                      64839
#                       mean     57891.98123                56448.80276
#                     median     55187                      55087*
#                     stddev     10076.06930                 2798.87307
#             standard error        72.86212                   20.84767
#       99% confidence level       187.69281                   53.70361
#                       skew        11.32180                    1.46237
#                   kurtosis       198.37587                    0.62075
#           time correlation         0.80819                    0.44043
#
#               elapsed time        20.00479
#                   run time        17.98825
#          getnsecs overhead      1429
#
#          number of samples     19124
#         number of outliers      1100
#    number of final samples     18024
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 20           53328 |*                                   53528.80000
#                 80           53619 |*                                   53794.90000
#                120           53910 |*                                   54053.19167
#                780           54201 |****                                54427.49359
#               5448           54492 |********************************    54664.16850
#               2491           54783 |**************                      54907.72782
#               2073           55074 |************                        55236.68259
#               1370           55365 |********                            55493.08394
#                617           55656 |***                                 55791.82658
#                362           55947 |**                                  56078.61050
#                256           56238 |*                                   56364.78516
#                163           56529 |*                                   56659.00613
#                162           56820 |*                                   56957.12346
#                 84           57111 |*                                   57255.00000
#                 72           57402 |*                                   57541.20833
#                 40           57693 |*                                   57825.90000
#                 32           57984 |*                                   58121.06250
#                 28           58275 |*                                   58403.46429
#                 40           58566 |*                                   58707.80000
#                 28           58857 |*                                   59016.82143
#                 32           59148 |*                                   59297.59375
#                106           59439 |*                                   59631.80189
#                289           59730 |*                                   59881.45675
#                277           60021 |*                                   60182.79061
#                292           60312 |*                                   60457.25685
#                297           60603 |*                                   60749.42088
#                314           60894 |*                                   61031.12420
#                273           61185 |*                                   61325.66667
#                269           61476 |*                                   61619.47955
#                254           61767 |*                                   61913.69685
#                248           62058 |*                                   62204.43145
#                205           62349 |*                                   62484.20000
#
#                902           > 95% |*****                               63515.46009
#
#        mean of 95%     56076.52587
#          95th %ile           62622
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
         prc thr      nsecs/call      samples   errors cnt/samp     size
read_t1k   1   1           25226        18024        0       35     1024
# bin/../bin-riscv64/read -N read_t1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     24532                      24532
#                        max    214186                      30526
#                       mean     26584.20964                25974.42149
#                     median     25248                      25226*
#                     stddev      4541.89266                 1518.95999
#             standard error        32.95122                   11.31412
#       99% confidence level        84.88234                   29.14517
#                       skew        13.49509                    1.42308
#                   kurtosis       312.49656                    0.47374
#           time correlation         0.39051                    0.23832
#
#               elapsed time        20.00391
#                   run time        17.99670
#          getnsecs overhead      1429
#
#          number of samples     18999
#         number of outliers       975
#    number of final samples     18024
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 90           24532 |*                                   24629.15556
#                140           24680 |*                                   24756.57857
#               2611           24828 |*******************                 24937.80123
#               4377           24976 |********************************    25043.66073
#               2723           25124 |*******************                 25198.46787
#               2026           25272 |**************                      25337.16288
#                933           25420 |******                              25481.54126
#                337           25568 |**                                  25630.83086
#                168           25716 |*                                   25783.80357
#                146           25864 |*                                   25934.70548
#                 98           26012 |*                                   26078.74490
#                105           26160 |*                                   26237.61905
#                 78           26308 |*                                   26374.10256
#                 59           26456 |*                                   26521.57627
#                 42           26604 |*                                   26674.59524
#                 45           26752 |*                                   26822.68889
#                 42           26900 |*                                   26976.38095
#                 38           27048 |*                                   27128.18421
#                 47           27196 |*                                   27270.04255
#                 55           27344 |*                                   27414.89091
#                 61           27492 |*                                   27559.85246
#                113           27640 |*                                   27718.88496
#                214           27788 |*                                   27862.42991
#                253           27936 |*                                   28011.72727
#                345           28084 |**                                  28158.23768
#                406           28232 |**                                  28302.07635
#                399           28380 |**                                  28449.05263
#                328           28528 |**                                  28601.31402
#                241           28676 |*                                   28750.11618
#                237           28824 |*                                   28893.09705
#                209           28972 |*                                   29043.91866
#                156           29120 |*                                   29188.12179
#
#                902           > 95% |******                              29777.50554
#
#        mean of 95%     25774.07213
#          95th %ile           29251
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
           prc thr      nsecs/call      samples   errors cnt/samp     size
read_z100k   1   1          243757         5200        0        2   102400
# bin/../bin-riscv64/read -N read_z100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    230690                     233024
#                        max   2796924                     256724
#                       mean    258188.49828               244759.61173
#                     median    245457                     243757*
#                     stddev     66008.68758                 3995.30058
#             standard error       807.20796                   55.40485
#       99% confidence level      2079.36771                  142.72289
#                       skew        20.28499                    0.64856
#                   kurtosis       642.18370                    0.30177
#           time correlation        11.88265                    2.52190
#
#               elapsed time        20.00364
#                   run time         5.01236
#          getnsecs overhead      1429
#
#          number of samples      6687
#         number of outliers      1487
#    number of final samples      5200
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          233024 |*                                  233223.66667
#                  8          233645 |*                                  233927.75000
#                 16          234266 |*                                  234565.37500
#                 22          234887 |*                                  235235.72727
#                 16          235508 |*                                  235838.12500
#                 24          236129 |*                                  236372.20833
#                 15          236750 |*                                  237139.20000
#                 20          237371 |*                                  237683.65000
#                 23          237992 |*                                  238313.52174
#                 23          238613 |*                                  238943.86957
#                 48          239234 |**                                 239632.27083
#                 80          239855 |****                               240208.55000
#                261          240476 |*************                      240841.55556
#                534          241097 |***************************        241438.76779
#                629          241718 |********************************   242018.34499
#                426          242339 |*********************              242644.29577
#                347          242960 |*****************                  243290.68876
#                301          243581 |***************                    243877.29236
#                247          244202 |************                       244519.65587
#                298          244823 |***************                    245092.69463
#                241          245444 |************                       245725.54357
#                222          246065 |***********                        246363.78378
#                168          246686 |********                           246986.79167
#                181          247307 |*********                          247639.03867
#                140          247928 |*******                            248238.62143
#                146          248549 |*******                            248842.18493
#                102          249170 |*****                              249493.88235
#                 73          249791 |***                                250102.19178
#                 88          250412 |****                               250749.26136
#                 79          251033 |****                               251335.20253
#                 85          251654 |****                               251967.97647
#                 74          252275 |***                                252561.41892
#
#                260           > 95% |*************                      254243.17692
#
#        mean of 95%    244260.47672
#          95th %ile          252871
#
# WARNINGS
#     Actual benchmark run time only accounts for 25.1% of elapsed time.
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
          prc thr      nsecs/call      samples   errors cnt/samp     size
read_z10k   1   1           37694        18304        0       23    10240
# bin/../bin-riscv64/read -N read_z10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     36381                      36381
#                        max    385645                      45153
#                       mean     39975.13901                38779.86615
#                     median     37765                      37694*
#                     stddev      8420.93643                 2124.22646
#             standard error        60.45724                   15.70102
#       99% confidence level       155.73786                   40.44582
#                       skew        13.31014                    1.52164
#                   kurtosis       318.12784                    0.73401
#           time correlation         0.62743                    0.31930
#
#               elapsed time        20.00461
#                   run time        17.94348
#          getnsecs overhead      1429
#
#          number of samples     19401
#         number of outliers      1097
#    number of final samples     18304
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 31           36381 |*                                   36521.83871
#                116           36604 |*                                   36731.50862
#                129           36827 |*                                   36942.37984
#                163           37050 |*                                   37159.32515
#               2314           37273 |***********                         37435.06698
#               6612           37496 |********************************    37587.06715
#               1820           37719 |********                            37842.16703
#               2033           37942 |*********                           38027.05509
#                489           38165 |**                                  38265.38241
#                272           38388 |*                                   38487.67279
#                141           38611 |*                                   38721.35461
#                102           38834 |*                                   38945.73529
#                 84           39057 |*                                   39168.46429
#                 54           39280 |*                                   39397.57407
#                 53           39503 |*                                   39608.60377
#                 35           39726 |*                                   39829.80000
#                 28           39949 |*                                   40062.53571
#                 17           40172 |*                                   40294.05882
#                 24           40395 |*                                   40508.54167
#                 40           40618 |*                                   40768.10000
#                 90           40841 |*                                   40958.06667
#                117           41064 |*                                   41173.53846
#                166           41287 |*                                   41405.90361
#                217           41510 |*                                   41617.70046
#                254           41733 |*                                   41851.63780
#                280           41956 |*                                   42067.60714
#                288           42179 |*                                   42288.38542
#                329           42402 |*                                   42513.66261
#                320           42625 |*                                   42736.58437
#                299           42848 |*                                   42958.32776
#                252           43071 |*                                   43179.98810
#                219           43294 |*                                   43389.10046
#
#                916           > 95% |****                                44168.84716
#
#        mean of 95%     38495.97458
#          95th %ile           43490
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
         prc thr      nsecs/call      samples   errors cnt/samp     size
read_z1k   1   1           45254        18160        0       19     1024
# bin/../bin-riscv64/read -N read_z1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     43088                      43088
#                        max    496074                      54117
#                       mean     47390.26906                46462.17759
#                     median     45289                      45254*
#                     stddev      8024.63627                 2552.12277
#             standard error        58.18316                   18.93842
#       99% confidence level       149.87981                   48.78536
#                       skew        18.46718                    1.45750
#                   kurtosis       657.51202                    0.56706
#           time correlation         0.62995                    0.39569
#
#               elapsed time        20.00374
#                   run time        17.92735
#          getnsecs overhead      1429
#
#          number of samples     19022
#         number of outliers       862
#    number of final samples     18160
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5           43088 |*                                   43207.00000
#                  4           43367 |*                                   43499.00000
#                  9           43646 |*                                   43825.22222
#                 63           43925 |*                                   44092.44444
#                469           44204 |***                                 44385.94243
#               1770           44483 |**************                      44645.97684
#               3658           44762 |*****************************       44911.27447
#               3929           45041 |********************************    45174.96462
#               2286           45320 |******************                  45446.24541
#               1260           45599 |**********                          45714.20714
#                339           45878 |**                                  45975.18879
#                102           46157 |*                                   46290.48039
#                 75           46436 |*                                   46577.97333
#                 78           46715 |*                                   46832.83333
#                 51           46994 |*                                   47144.11765
#                 38           47273 |*                                   47444.02632
#                 30           47552 |*                                   47695.00000
#                 29           47831 |*                                   47951.58621
#                 16           48110 |*                                   48228.25000
#                 20           48389 |*                                   48539.45000
#                 31           48668 |*                                   48829.70968
#                 82           48947 |*                                   49094.71951
#                165           49226 |*                                   49377.46667
#                246           49505 |**                                  49652.68699
#                274           49784 |**                                  49924.60584
#                367           50063 |**                                  50202.89646
#                336           50342 |**                                  50472.28274
#                364           50621 |**                                  50762.65934
#                367           50900 |**                                  51036.18529
#                304           51179 |**                                  51319.26645
#                260           51458 |**                                  51597.17692
#                225           51737 |*                                   51860.57333
#
#                908           > 95% |*******                             52864.84692
#
#        mean of 95%     46125.19499
#          95th %ile           51984
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
            prc thr      nsecs/call      samples   errors cnt/samp     size
read_zw100k   1   1          248024        17213        0        2   102400
# bin/../bin-riscv64/read -N read_zw100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -w -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    235524                     243224
#                        max   3158886                     253790
#                       mean    259722.41080               248506.80160
#                     median    248490                     248024*
#                     stddev     49693.46184                 1765.52816
#             standard error       329.73995                   13.45694
#       99% confidence level       849.41010                   34.66508
#                       skew        18.43858                    0.78454
#                   kurtosis       696.22079                    0.11199
#           time correlation         2.81029                    0.33596
#
#               elapsed time        20.00462
#                   run time        17.31594
#          getnsecs overhead      1429
#
#          number of samples     22712
#         number of outliers      5499
#    number of final samples     17213
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 16          243224 |*                                  243346.62500
#                 12          243497 |*                                  243668.08333
#                 13          243770 |*                                  243900.61538
#                 18          244043 |*                                  244184.66667
#                 18          244316 |*                                  244408.88889
#                 28          244589 |*                                  244751.17857
#                 24          244862 |*                                  245038.08333
#                 31          245135 |*                                  245286.90323
#                 61          245408 |*                                  245550.78689
#                116          245681 |**                                 245839.05172
#                261          245954 |*****                              246102.71264
#                520          246227 |**********                         246381.10385
#                882          246500 |*****************                  246655.01814
#               1153          246773 |**********************             246916.10494
#               1274          247046 |************************           247169.17818
#               1560          247319 |******************************     247457.49423
#               1616          247592 |*******************************    247748.20297
#               1633          247865 |********************************   248004.62890
#               1483          248138 |*****************************      248260.33581
#                878          248411 |*****************                  248531.47836
#                485          248684 |*********                          248803.93402
#                354          248957 |******                             249079.04520
#                314          249230 |******                             249376.95223
#                351          249503 |******                             249639.60684
#                412          249776 |********                           249906.04369
#                440          250049 |********                           250175.73409
#                520          250322 |**********                         250459.00385
#                378          250595 |*******                            250744.56614
#                439          250868 |********                           251007.26424
#                466          251141 |*********                          251272.51502
#                356          251414 |******                             251543.13764
#                240          251687 |****                               251801.22083
#
#                861           > 95% |****************                   252703.77816
#
#        mean of 95%    248285.81354
#          95th %ile          251957
#
# Usage: read
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'read')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-read (default /dev/zero)]
#     [-s buffer-size (default 1024)]
#     [-w (store a byte to each page after read)]
# notes: measures read()
             prc thr      nsecs/call      samples   errors cnt/samp 
realpath_tmp   1   1          870671        12288        0        1 
# bin/../bin-riscv64/realpath -N realpath_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /tmp/libmicro.2370/0/1/2/3/4/5/6/7/8/9 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    841871                     841871
#                        max   5517471                     904371
#                       mean    989786.21356               872623.27865
#                     median    878571                     870671*
#                     stddev    353244.81323                10606.11567
#             standard error      2617.34641                   95.67881
#       99% confidence level      6742.28435                  246.46861
#                       skew         4.71968                    0.72825
#                   kurtosis        24.42081                    0.09778
#           time correlation        34.36683                    2.87986
#
#               elapsed time        20.00431
#                   run time        18.05877
#          getnsecs overhead      1429
#
#          number of samples     18215
#         number of outliers      5927
#    number of final samples     12288
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          841871 |*                                  842437.66667
#                  1          843484 |*                                  843571.00000
#                  2          845097 |*                                  846171.00000
#                  9          846710 |*                                  847715.44444
#                 12          848323 |*                                  849029.33333
#                 13          849936 |*                                  850755.61538
#                 28          851549 |*                                  852392.42857
#                 41          853162 |*                                  854051.48780
#                 82          854775 |**                                 855757.58537
#                196          856388 |******                             857328.14286
#                368          858001 |************                       858939.47826
#                592          859614 |********************               860446.67568
#                820          861227 |****************************       862063.80488
#                888          862840 |******************************     863632.03604
#                920          864453 |*******************************    865203.28261
#                936          866066 |********************************   866904.54701
#                708          867679 |************************           868506.45198
#                613          869292 |********************               870082.90865
#                612          870905 |********************               871754.33333
#                570          872518 |*******************                873322.57895
#                655          874131 |**********************             874876.19084
#                607          875744 |********************               876497.19440
#                517          877357 |*****************                  878091.88975
#                484          878970 |****************                   879778.02479
#                412          880583 |**************                     881376.58252
#                332          882196 |***********                        882984.25301
#                296          883809 |**********                         884628.43243
#                218          885422 |*******                            886199.44037
#                229          887035 |*******                            887792.39738
#                202          888648 |******                             889409.61386
#                162          890261 |*****                              891080.87654
#                145          891874 |****                               892671.68966
#
#                615           > 95% |*********************              898486.60976
#
#        mean of 95%    871260.65133
#          95th %ile          893471
#
# Usage: realpath
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'realpath')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f directory (default = /)]
# notes: measures realpath()
             prc thr      nsecs/call      samples   errors cnt/samp 
realpath_usr   1   1          967271        11333        0        1 
# bin/../bin-riscv64/realpath -N realpath_usr -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /var/tmp/libmicro.2370/0/1/2/3/4/5/6/7/8/9 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    932271                     938371
#                        max  13676686                    1000471
#                       mean   1074181.65891               968776.62075
#                     median    975271                     967271*
#                     stddev    331289.64800                10579.90828
#             standard error      2530.32974                   99.38239
#       99% confidence level      6518.12941                  256.00905
#                       skew         7.87000                    0.65392
#                   kurtosis       147.18820                    0.07928
#           time correlation        32.41881                    3.12498
#
#               elapsed time        20.00550
#                   run time        18.45179
#          getnsecs overhead      1429
#
#          number of samples     17142
#         number of outliers      5809
#    number of final samples     11333
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2          938371 |*                                  939021.00000
#                  3          939975 |*                                  940937.66667
#                  4          941579 |*                                  942396.00000
#                  5          943183 |*                                  944511.00000
#                 12          944787 |*                                  945821.00000
#                 26          946391 |*                                  947013.30769
#                 54          947995 |**                                 948833.96296
#                 82          949599 |***                                950502.70732
#                 97          951203 |***                                952023.57732
#                227          952807 |********                           953659.54626
#                358          954411 |*************                      955273.79330
#                501          956015 |*******************                956858.42515
#                765          957619 |*****************************      958470.60784
#                756          959223 |*****************************      960029.20106
#                719          960827 |***************************        961592.14047
#                822          962431 |********************************   963201.29197
#                612          964035 |***********************            964837.99346
#                585          965639 |**********************             966386.38462
#                662          967243 |*************************          967980.21450
#                558          968847 |*********************              969626.73477
#                584          970451 |**********************             971210.38356
#                600          972055 |***********************            972800.83333
#                502          973659 |*******************                974399.28685
#                455          975263 |*****************                  975963.30769
#                390          976867 |***************                    977581.25641
#                299          978471 |***********                        979270.66555
#                252          980075 |*********                          980943.61905
#                227          981679 |********                           982528.26872
#                191          983283 |*******                            984116.54974
#                159          984887 |******                             985781.69182
#                132          986491 |*****                              987343.72727
#                125          988095 |****                               988865.40000
#
#                567           > 95% |**********************             994300.80600
#
#        mean of 95%    967432.36913
#          95th %ile          989671
#
# Usage: realpath
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'realpath')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f directory (default = /)]
# notes: measures realpath()
        prc thr      nsecs/call      samples   errors cnt/samp 
recurse   1   1            2609        18166        0      361 
# bin/../bin-riscv64/recurse -N recurse -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2513                       2513
#                        max    146636                       2896
#                       mean      2690.37117                 2640.42959
#                     median      2612                       2609*
#                     stddev      1143.25627                   85.03854
#             standard error         8.30477                    0.63094
#       99% confidence level        21.39308                    1.62529
#                       skew       107.70675                    1.15492
#                   kurtosis     13314.54994                    0.26236
#           time correlation         0.02857                    0.01477
#
#               elapsed time        20.00439
#                   run time        18.36069
#          getnsecs overhead      1429
#
#          number of samples     18951
#         number of outliers       785
#    number of final samples     18166
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 26            2513 |*                                    2518.34615
#                109            2523 |**                                   2528.56881
#                255            2533 |****                                 2538.30980
#                552            2543 |**********                           2547.95109
#               1041            2553 |*******************                  2557.94428
#               1327            2563 |*************************            2567.45441
#               1377            2573 |*************************            2577.71750
#               1552            2583 |*****************************        2587.60374
#               1698            2593 |********************************     2597.60247
#               1635            2603 |******************************       2607.45199
#               1209            2613 |**********************               2617.16460
#                982            2623 |******************                   2627.03666
#                806            2633 |***************                      2637.27916
#                548            2643 |**********                           2647.35766
#                379            2653 |*******                              2657.01055
#                203            2663 |***                                  2667.28079
#                144            2673 |**                                   2677.13889
#                142            2683 |**                                   2687.87324
#                155            2693 |**                                   2698.18065
#                149            2703 |**                                   2707.65772
#                160            2713 |***                                  2717.31875
#                209            2723 |***                                  2727.71292
#                278            2733 |*****                                2737.59353
#                307            2743 |*****                                2747.55375
#                317            2753 |*****                                2757.76972
#                360            2763 |******                               2767.13056
#                351            2773 |******                               2777.21083
#                350            2783 |******                               2787.27143
#                293            2793 |*****                                2797.53584
#                251            2803 |****                                 2807.19522
#                 92            2813 |*                                    2815.11957
#
#                909           > 95% |*****************                    2850.34873
#
#        mean of 95%      2629.37225
#          95th %ile            2818
#
# Usage: recurse
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'recurse')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-d depth-limit (default = 100)]
# notes: measures recursion performance
            prc thr      nsecs/call      samples   errors cnt/samp 
recurse_10k   1   1          268124        20213        0        2 
# bin/../bin-riscv64/recurse -N recurse_10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 10k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    256571                     256571
#                        max  22475586                     296157
#                       mean    276566.73234               271215.24766
#                     median    268557                     268124*
#                     stddev    153634.08049                 8317.09161
#             standard error      1039.82606                   58.50003
#       99% confidence level      2678.59193                  150.69608
#                       skew       138.48755                    1.45957
#                   kurtosis     19969.30568                    0.94610
#           time correlation         2.39483                    1.22994
#
#               elapsed time        20.00423
#                   run time        17.84271
#          getnsecs overhead      1429
#
#          number of samples     21830
#         number of outliers      1617
#    number of final samples     20213
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          256571 |*                                  256571.00000
#                  5          257622 |*                                  258131.00000
#                  7          258673 |*                                  259327.00000
#                 43          259724 |*                                  260428.30233
#                106          260775 |*                                  261474.29245
#                367          261826 |****                               262401.64850
#                971          262877 |***********                        263493.44284
#               1630          263928 |********************               264538.22822
#               2138          264979 |**************************         265497.39570
#               2590          266030 |********************************   266514.08147
#               2266          267081 |***************************        267634.35702
#               1753          268132 |*********************              268629.19395
#               1498          269183 |******************                 269667.88852
#               1100          270234 |*************                      270778.53909
#                787          271285 |*********                          271785.71919
#                578          272336 |*******                            272805.14533
#                415          273387 |*****                              273851.34217
#                200          274438 |**                                 274906.54000
#                147          275489 |*                                  275959.63265
#                 90          276540 |*                                  277067.30000
#                 68          277591 |*                                  278088.97059
#                 51          278642 |*                                  279138.60784
#                 52          279693 |*                                  280227.00000
#                 61          280744 |*                                  281378.31148
#                 91          281795 |*                                  282349.62637
#                189          282846 |**                                 283431.06349
#                272          283897 |***                                284400.76471
#                380          284948 |****                               285489.26579
#                337          285999 |****                               286516.08012
#                349          287050 |****                               287578.77650
#                337          288101 |****                               288647.50148
#                323          289152 |***                                289646.47988
#
#               1011           > 95% |************                       292689.31652
#
#        mean of 95%    270084.62150
#          95th %ile          290190
#
# Usage: recurse
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'recurse')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-d depth-limit (default = 100)]
# notes: measures recursion performance
           prc thr      nsecs/call      samples   errors cnt/samp 
recurse_1k   1   1           26392        18171        0       35 
# bin/../bin-riscv64/recurse -N recurse_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     25541                      25541
#                        max    885336                      29196
#                       mean     27178.16414                26731.05377
#                     median     26422                      26392*
#                     stddev      7297.54611                  822.25134
#             standard error        52.70257                    6.09979
#       99% confidence level       135.76183                   15.71307
#                       skew        90.71276                    1.21974
#                   kurtosis     10187.43315                    0.18020
#           time correlation         0.25497                    0.13911
#
#               elapsed time        20.00422
#                   run time        18.35264
#          getnsecs overhead      1429
#
#          number of samples     19173
#         number of outliers      1002
#    number of final samples     18171
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 22           25541 |*                                   25594.72727
#                 17           25632 |*                                   25699.58824
#                141           25723 |*                                   25761.31206
#                394           25814 |*****                               25865.79188
#                640           25905 |*********                           25959.06719
#               1339           25996 |******************                  26039.47946
#               2259           26087 |********************************    26133.08189
#               1924           26178 |***************************         26227.06081
#               1904           26269 |**************************          26308.39496
#               1391           26360 |*******************                 26406.94968
#               1237           26451 |*****************                   26495.25303
#                936           26542 |*************                       26584.79380
#                755           26633 |**********                          26674.17881
#                458           26724 |******                              26765.46943
#                258           26815 |***                                 26857.76357
#                160           26906 |**                                  26947.00625
#                 95           26997 |*                                   27038.29474
#                 66           27088 |*                                   27126.62121
#                 35           27179 |*                                   27223.40000
#                 44           27270 |*                                   27312.04545
#                 53           27361 |*                                   27405.15094
#                 88           27452 |*                                   27494.19318
#                146           27543 |**                                  27588.57534
#                207           27634 |**                                  27682.66667
#                338           27725 |****                                27770.79290
#                389           27816 |*****                               27863.25707
#                404           27907 |*****                               27948.95297
#                385           27998 |*****                               28041.64416
#                347           28089 |****                                28134.11527
#                312           28180 |****                                28224.05449
#                316           28271 |****                                28314.62342
#                202           28362 |**                                  28395.30693
#
#                909           > 95% |************                        28715.62156
#
#        mean of 95%     26626.54837
#          95th %ile           28435
#
# Usage: recurse
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'recurse')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-d depth-limit (default = 100)]
# notes: measures recursion performance
            prc thr      nsecs/call      samples   errors cnt/samp     size
scasecmp_10   1   1             100        19877        0     7919       10
# bin/../bin-riscv64/strcasecmp -N scasecmp_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        97                         97
#                        max     86587                        111
#                       mean       109.58382                  101.10837
#                     median       100                        100*
#                     stddev       604.91186                    3.24937
#             standard error         4.11371                    0.02305
#       99% confidence level        10.59693                    0.05937
#                       skew       136.93475                    1.46475
#                   kurtosis     19375.72030                    0.93067
#           time correlation         0.00269                    0.00048
#
#               elapsed time        20.00442
#                   run time        17.63157
#          getnsecs overhead      1429
#
#          number of samples     21623
#         number of outliers      1746
#    number of final samples     19877
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 31              97 |*                                             -
#               1588              98 |*******                                       -
#               6736              99 |********************************              -
#               4623             100 |*********************                         -
#               2208             101 |**********                                    -
#                625             102 |**                                            -
#                213             103 |*                                             -
#                138             104 |*                                             -
#                432             105 |**                                            -
#                876             106 |****                                          -
#                884             107 |****                                          -
#                529             108 |**                                            -
#
#                994           > 95% |****                                  109.60865
#
#        mean of 95%       100.66091
#          95th %ile             108
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: strcasecmp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strcasecmp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned cmp]
# notes: measures strcasecmp()
            prc thr      nsecs/call      samples   errors cnt/samp     size
scasecmp_1k   1   1            4818        17576        0      195     1024
# bin/../bin-riscv64/strcasecmp -N scasecmp_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      4660                       4660
#                        max    103397                       5325
#                       mean      4993.01186                 4878.22576
#                     median      4825                       4818*
#                     stddev      1074.77270                  148.93801
#             standard error         7.83921                    1.12343
#       99% confidence level        20.19381                    2.89395
#                       skew        48.45307                    1.18967
#                   kurtosis      3940.11898                    0.16652
#           time correlation         0.05701                    0.02630
#
#               elapsed time        20.00376
#                   run time        18.24291
#          getnsecs overhead      1429
#
#          number of samples     18797
#         number of outliers      1221
#    number of final samples     17576
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 36            4660 |*                                    4669.02778
#                 22            4677 |*                                    4688.77273
#                154            4694 |**                                   4701.81169
#                390            4711 |*****                                4720.68974
#                723            4728 |**********                           4737.50899
#               1391            4745 |********************                 4752.55859
#               2149            4762 |********************************     4769.95207
#               1879            4779 |***************************          4787.53912
#               1646            4796 |************************             4802.70292
#               1374            4813 |********************                 4821.17322
#               1065            4830 |***************                      4837.70329
#                913            4847 |*************                        4854.46331
#                734            4864 |**********                           4871.47003
#                414            4881 |******                               4888.55072
#                238            4898 |***                                  4905.12605
#                141            4915 |**                                   4922.32624
#                103            4932 |*                                    4939.97087
#                 95            4949 |*                                    4957.15789
#                 72            4966 |*                                    4973.81944
#                 86            4983 |*                                    4991.22093
#                 89            5000 |*                                    5008.48315
#                153            5017 |**                                   5025.14379
#                203            5034 |***                                  5041.44828
#                288            5051 |****                                 5059.19444
#                396            5068 |*****                                5076.11869
#                395            5085 |*****                                5093.01519
#                381            5102 |*****                                5110.62730
#                344            5119 |*****                                5127.06105
#                340            5136 |*****                                5143.89412
#                268            5153 |***                                  5161.19030
#                215            5170 |***                                  5177.93023
#
#                879           > 95% |*************                        5239.78498
#
#        mean of 95%      4859.19177
#          95th %ile            5186
#
# Usage: strcasecmp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strcasecmp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned cmp]
# notes: measures strcasecmp()
            prc thr      nsecs/call      samples   errors cnt/samp   method
sched_yield   1   1            6826        17946        0      135     libc
# bin/../bin-riscv64/sched_yield -N sched_yield -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      6320                       6320
#                        max     98636                       8111
#                       mean      7117.68506                 6993.46512
#                     median      6832                       6826*
#                     stddev      1135.78870                  372.47937
#             standard error         8.29684                    2.78047
#       99% confidence level        21.37266                    7.16249
#                       skew        33.21255                    1.23646
#                   kurtosis      2317.54631                    0.12802
#           time correlation         0.09323                    0.06195
#
#               elapsed time        20.00423
#                   run time        18.05626
#          getnsecs overhead      1429
#
#          number of samples     18740
#         number of outliers       794
#    number of final samples     17946
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3            6320 |*                                    6334.33333
#                  4            6365 |*                                    6395.25000
#                 40            6410 |*                                    6440.67500
#                116            6455 |*                                    6478.40517
#                103            6500 |*                                    6521.19417
#                 86            6545 |*                                    6569.43023
#                102            6590 |*                                    6612.30392
#                324            6635 |***                                  6663.57407
#               1621            6680 |*****************                    6705.73658
#               3006            6725 |********************************     6748.01031
#               2838            6770 |******************************       6791.54616
#               2646            6815 |****************************         6835.81859
#               1565            6860 |****************                     6879.62492
#                603            6905 |******                               6922.52902
#                201            6950 |**                                   6968.19403
#                122            6995 |*                                    7015.58197
#                 84            7040 |*                                    7063.33333
#                 70            7085 |*                                    7105.71429
#                 60            7130 |*                                    7148.48333
#                 49            7175 |*                                    7196.79592
#                 56            7220 |*                                    7242.05357
#                 69            7265 |*                                    7290.11594
#                110            7310 |*                                    7335.56364
#                123            7355 |*                                    7377.99187
#                188            7400 |**                                   7424.50000
#                276            7445 |**                                   7469.41667
#                519            7490 |*****                                7513.24855
#                581            7535 |******                               7556.33219
#                543            7580 |*****                                7600.74401
#                456            7625 |****                                 7646.41667
#                332            7670 |***                                  7691.45482
#                152            7715 |*                                    7729.47368
#
#                898           > 95% |*********                            7886.82739
#
#        mean of 95%      6946.40744
#          95th %ile            7743
#
# Usage: sched_yield
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'sched_yield')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -s skip libc making system call directly
# note: measures sched_yield()
              prc thr      nsecs/call      samples   errors cnt/samp   method
sched_yield_s   1   1            7358         6788        0      121  syscall
# bin/../bin-riscv64/sched_yield -N sched_yield_s -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      6672                       6672
#                        max    147686                       8944
#                       mean      7780.28997                 7539.79847
#                     median      7385                       7358*
#                     stddev      2251.93327                  468.28500
#             standard error        26.63378                    5.68381
#       99% confidence level        68.60863                   14.64149
#                       skew        36.91522                    1.03092
#                   kurtosis      2126.31066                    0.12606
#           time correlation         0.38744                    0.22265
#
#               elapsed time        20.00672
#                   run time         6.69594
#          getnsecs overhead      1429
#
#          number of samples      7149
#         number of outliers       361
#    number of final samples      6788
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2            6672 |*                                    6683.50000
#                  1            6730 |*                                    6782.00000
#                 35            6788 |*                                    6832.00000
#                 55            6846 |**                                   6867.34545
#                 52            6904 |**                                   6934.73077
#                 51            6962 |**                                   6990.13725
#                231            7020 |**********                           7060.75325
#                682            7078 |********************************     7105.48827
#                632            7136 |*****************************        7164.23734
#                597            7194 |****************************         7222.90620
#                609            7252 |****************************         7279.21675
#                518            7310 |************************             7337.12355
#                327            7368 |***************                      7395.50765
#                262            7426 |************                         7451.73664
#                269            7484 |************                         7512.00372
#                197            7542 |*********                            7570.50254
#                173            7600 |********                             7628.16185
#                159            7658 |*******                              7684.72956
#                120            7716 |*****                                7746.70000
#                130            7774 |******                               7801.35385
#                155            7832 |*******                              7860.94194
#                138            7890 |******                               7919.08696
#                136            7948 |******                               7978.74265
#                134            8006 |******                               8035.13433
#                119            8064 |*****                                8093.57143
#                115            8122 |*****                                8147.30435
#                 93            8180 |****                                 8209.91398
#                 90            8238 |****                                 8265.24444
#                114            8296 |*****                                8327.49123
#                112            8354 |*****                                8380.43750
#                 93            8412 |****                                 8439.23656
#                 47            8470 |**                                   8486.12766
#
#                340           > 95% |***************                      8691.82059
#
#        mean of 95%      7479.05288
#          95th %ile            8508
#
# WARNINGS
#     Actual benchmark run time only accounts for 33.5% of elapsed time.
#
# Usage: sched_yield
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'sched_yield')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -s skip libc making system call directly
# note: measures sched_yield()
          prc thr      nsecs/call      samples   errors cnt/samp    maxfd flags
select_10   1   1           41571        18402        0       21       10   ---
# bin/../bin-riscv64/select -N select_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     39761                      39761
#                        max    652336                      49740
#                       mean     43750.72714                42743.35192
#                     median     41653                      41571*
#                     stddev      9161.72946                 2333.28422
#             standard error        65.81811                   17.20026
#       99% confidence level       169.54745                   44.30788
#                       skew        29.84704                    1.44586
#                   kurtosis      1594.92785                    0.57882
#           time correlation         0.61131                    0.35882
#
#               elapsed time        20.00433
#                   run time        17.99079
#          getnsecs overhead      1429
#
#          number of samples     19376
#         number of outliers       974
#    number of final samples     18402
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 18           39761 |*                                   39947.22222
#                 86           40014 |*                                   40150.24419
#                 85           40267 |*                                   40390.90588
#                 75           40520 |*                                   40659.77333
#                183           40773 |*                                   40929.20219
#               2731           41026 |***************                     41201.69022
#               5698           41279 |********************************    41373.86153
#               1944           41532 |**********                          41668.42798
#               1955           41785 |**********                          41882.61432
#                561           42038 |***                                 42152.55615
#                370           42291 |**                                  42398.39730
#                166           42544 |*                                   42671.63253
#                143           42797 |*                                   42908.28671
#                117           43050 |*                                   43166.07692
#                 70           43303 |*                                   43426.28571
#                 51           43556 |*                                   43690.31373
#                 70           43809 |*                                   43964.01429
#                 52           44062 |*                                   44169.19231
#                 35           44315 |*                                   44427.97143
#                 39           44568 |*                                   44704.76923
#                 91           44821 |*                                   44976.81319
#                198           45074 |*                                   45195.79798
#                177           45327 |*                                   45461.23164
#                230           45580 |*                                   45699.43043
#                295           45833 |*                                   45966.19322
#                309           46086 |*                                   46206.26537
#                277           46339 |*                                   46465.40072
#                313           46592 |*                                   46714.58147
#                319           46845 |*                                   46965.30408
#                351           47098 |*                                   47223.64672
#                275           47351 |*                                   47481.31273
#                197           47604 |*                                   47717.85787
#
#                921           > 95% |*****                               48614.67535
#
#        mean of 95%     42434.01670
#          95th %ile           47826
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: select
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'select')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures select()
           prc thr      nsecs/call      samples   errors cnt/samp    maxfd flags
select_100   1   1           72552        18036        0       12      100   ---
# bin/../bin-riscv64/select -N select_100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     70481                      70481
#                        max    577695                      84914
#                       mean     75585.04477                74243.52489
#                     median     72652                      72552*
#                     stddev      9980.68814                 3559.85273
#             standard error        72.30674                   26.50708
#       99% confidence level       186.26217                   68.28224
#                       skew        17.94879                    1.38403
#                   kurtosis       608.49315                    0.42904
#           time correlation         0.89391                    0.57186
#
#               elapsed time        20.00409
#                   run time        18.11510
#          getnsecs overhead      1429
#
#          number of samples     19053
#         number of outliers      1017
#    number of final samples     18036
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 31           70481 |*                                   70716.93548
#                 73           70837 |*                                   70998.57534
#                277           71193 |**                                  71477.60650
#               3892           71549 |********************************    71768.26978
#               3671           71905 |******************************      72019.64397
#               1393           72261 |***********                         72453.17947
#               2059           72617 |****************                    72776.61583
#                870           72973 |*******                             73130.23793
#                429           73329 |***                                 73501.04429
#                416           73685 |***                                 73866.17548
#                338           74041 |**                                  74203.89053
#                177           74397 |*                                   74554.33898
#                123           74753 |*                                   74921.25203
#                106           75109 |*                                   75291.45283
#                 67           75465 |*                                   75635.25373
#                 43           75821 |*                                   75993.44186
#                 36           76177 |*                                   76321.47222
#                 32           76533 |*                                   76709.43750
#                 41           76889 |*                                   77061.82927
#                 23           77245 |*                                   77389.47826
#                 34           77601 |*                                   77811.64706
#                139           77957 |*                                   78183.51079
#                302           78313 |**                                  78500.17550
#                298           78669 |**                                  78857.83557
#                322           79025 |**                                  79193.66149
#                314           79381 |**                                  79553.70382
#                322           79737 |**                                  79905.79503
#                307           80093 |**                                  80273.06515
#                293           80449 |**                                  80630.44027
#                267           80805 |**                                  80981.76779
#                219           81161 |*                                   81328.83562
#                220           81517 |*                                   81684.24091
#
#                902           > 95% |*******                             83110.27051
#
#        mean of 95%     73776.74513
#          95th %ile           81867
#
# Usage: select
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'select')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures select()
            prc thr      nsecs/call      samples   errors cnt/samp    maxfd flags
select_1000   1   1          413986        18922        0        1     1000   ---
# bin/../bin-riscv64/select -N select_1000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 1000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    399171                     399171
#                        max   4508271                     488686
#                       mean    444862.80618               423736.70976
#                     median    415536                     413986*
#                     stddev    100356.04133                21653.75110
#             standard error       690.33985                  157.41627
#       99% confidence level      1778.31546                  405.50432
#                       skew         9.25659                    1.47852
#                   kurtosis       178.53228                    0.82704
#           time correlation         8.06243                    3.34058
#
#               elapsed time        20.00503
#                   run time        17.70078
#          getnsecs overhead      1429
#
#          number of samples     21133
#         number of outliers      2211
#    number of final samples     18922
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7          399171 |*                                  400408.85714
#                 59          401449 |*                                  402918.11864
#                408          403727 |***                                405198.00980
#               2039          406005 |*****************                  407321.95635
#               3712          408283 |********************************   409419.51967
#               2453          410561 |*********************              411583.26457
#               1560          412839 |*************                      413976.00962
#               1542          415117 |*************                      416223.34112
#               1049          417395 |*********                          418438.96949
#                642          419673 |*****                              420731.23364
#                409          421951 |***                                423060.52323
#                341          424229 |**                                 425334.07918
#                257          426507 |**                                 427570.37743
#                204          428785 |*                                  429910.53431
#                178          431063 |*                                  432145.60674
#                169          433341 |*                                  434446.82840
#                102          435619 |*                                  436749.67647
#                101          437897 |*                                  438974.06931
#                108          440175 |*                                  441407.38889
#                 96          442453 |*                                  443599.90625
#                100          444731 |*                                  445793.45000
#                 87          447009 |*                                  448190.31034
#                 73          449287 |*                                  450414.69863
#                 99          451565 |*                                  452800.14141
#                217          453843 |*                                  455067.47465
#                294          456121 |**                                 457258.72109
#                316          458399 |**                                 459537.83544
#                295          460677 |**                                 461788.33898
#                324          462955 |**                                 464060.64506
#                302          465233 |**                                 466332.19205
#                223          467511 |*                                  468606.02242
#                209          469789 |*                                  470830.64115
#
#                947           > 95% |********                           479758.84055
#
#        mean of 95%    420785.22392
#          95th %ile          472036
#
# Usage: select
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'select')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures select()
           prc thr      nsecs/call      samples   errors cnt/samp    maxfd flags
select_w10   1   1           57804        18511        0       15       10   -w-
# bin/../bin-riscv64/select -N select_w10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 10 -w 1 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     55351                      55351
#                        max    988271                      67912
#                       mean     60508.39557                59245.92421
#                     median     57879                      57804*
#                     stddev     12234.32533                 2888.64391
#             standard error        87.75144                   21.23142
#       99% confidence level       226.04770                   54.69214
#                       skew        34.71070                    1.42847
#                   kurtosis      2154.11770                    0.53953
#           time correlation         0.76236                    0.44199
#
#               elapsed time        20.00401
#                   run time        18.05704
#          getnsecs overhead      1429
#
#          number of samples     19438
#         number of outliers       927
#    number of final samples     18511
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 47           55351 |*                                   55582.46809
#                135           55670 |*                                   55848.48889
#                136           55989 |*                                   56126.84559
#                 83           56308 |*                                   56464.56627
#                 97           56627 |*                                   56786.67010
#                344           56946 |**                                  57182.91570
#               5152           57265 |********************************    57462.78630
#               3860           57584 |***********************             57691.48005
#               1944           57903 |************                        58088.87449
#               1555           58222 |*********                           58342.01093
#                446           58541 |**                                  58677.98430
#                226           58860 |*                                   59005.30973
#                148           59179 |*                                   59331.20270
#                 92           59498 |*                                   59646.88043
#                 75           59817 |*                                   59984.32000
#                 60           60136 |*                                   60277.90000
#                 42           60455 |*                                   60615.54762
#                 32           60774 |*                                   60921.40625
#                 25           61093 |*                                   61284.12000
#                 30           61412 |*                                   61555.46667
#                 26           61731 |*                                   61896.11538
#                 30           62050 |*                                   62209.56667
#                 91           62369 |*                                   62569.85714
#                327           62688 |**                                  62867.37309
#                380           63007 |**                                  63176.47368
#                427           63326 |**                                  63489.98361
#                385           63645 |**                                  63806.90649
#                336           63964 |**                                  64122.59226
#                307           64283 |*                                   64444.39739
#                259           64602 |*                                   64757.59846
#                274           64921 |*                                   65081.45985
#                214           65240 |*                                   65389.83645
#
#                926           > 95% |*****                               66484.92333
#
#        mean of 95%     58864.72926
#          95th %ile           65548
#
# Usage: select
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'select')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures select()
            prc thr      nsecs/call      samples   errors cnt/samp    maxfd flags
select_w100   1   1           90497        18465        0        9      100   -w-
# bin/../bin-riscv64/select -N select_w100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 100 -w 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     87152                      87152
#                        max   1181586                     106037
#                       mean     95099.47813                92563.59079
#                     median     90647                      90497*
#                     stddev     20304.81425                 4492.37510
#             standard error       145.13068                   33.05989
#       99% confidence level       373.85663                   85.16227
#                       skew        19.68518                    1.47035
#                   kurtosis       713.41562                    0.72479
#           time correlation         1.34405                    0.69964
#
#               elapsed time        20.00405
#                   run time        17.84620
#          getnsecs overhead      1429
#
#          number of samples     19574
#         number of outliers      1109
#    number of final samples     18465
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 42           87152 |*                                   87492.35714
#                158           87637 |*                                   87908.08861
#                104           88122 |*                                   88361.73077
#                144           88607 |*                                   88943.40278
#               2411           89092 |****************                    89400.66902
#               4607           89577 |********************************    89790.79184
#               1921           90062 |*************                       90269.49922
#               1816           90547 |************                        90781.09967
#               1506           91032 |**********                          91249.14077
#                692           91517 |****                                91711.61561
#                359           92002 |**                                  92250.28412
#                331           92487 |**                                  92704.90332
#                167           92972 |*                                   93188.46108
#                121           93457 |*                                   93687.42149
#                 91           93942 |*                                   94158.32967
#                 75           94427 |*                                   94659.18667
#                 45           94912 |*                                   95172.02222
#                 38           95397 |*                                   95647.73684
#                 33           95882 |*                                   96120.81818
#                 41           96367 |*                                   96592.53659
#                 53           96852 |*                                   97120.03774
#                134           97337 |*                                   97611.50000
#                245           97822 |*                                   98098.79592
#                338           98307 |**                                  98548.28994
#                313           98792 |**                                  99044.92332
#                304           99277 |**                                  99501.25329
#                268           99762 |*                                   99998.39925
#                269          100247 |*                                  100495.98885
#                238          100732 |*                                  100970.92437
#                259          101217 |*                                  101463.30502
#                221          101702 |*                                  101960.79638
#                197          102187 |*                                  102420.73096
#
#                924           > 95% |******                             104079.20779
#
#        mean of 95%     91956.98740
#          95th %ile          102647
#
# Usage: select
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'select')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures select()
             prc thr      nsecs/call      samples   errors cnt/samp    maxfd flags
select_w1000   1   1          512571         7378        0        1     1000   -w-
# bin/../bin-riscv64/select -N select_w1000 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -n 1000 -w 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    468671                     468671
#                        max   5361171                     723871
#                       mean    590402.46222               538643.35023
#                     median    520271                     512571*
#                     stddev    197089.45910                61834.35607
#             standard error      2168.83223                  719.88068
#       99% confidence level      5586.91182                 1854.41263
#                       skew         5.38102                    1.11730
#                   kurtosis        61.20359                    0.14588
#           time correlation        53.91965                   26.62025
#
#               elapsed time        20.00808
#                   run time         4.88980
#          getnsecs overhead      1429
#
#          number of samples      8258
#         number of outliers       880
#    number of final samples      7378
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 81          468671 |***                                473458.65432
#                528          474900 |**********************             478340.50758
#                748          481129 |********************************   484121.13369
#                660          487358 |****************************       490466.45455
#                697          493587 |*****************************      496805.43329
#                547          499816 |***********************            502730.23218
#                418          506045 |*****************                  509073.15311
#                352          512274 |***************                    515358.21591
#                304          518503 |*************                      521356.52632
#                260          524732 |***********                        527546.00000
#                178          530961 |*******                            533949.65169
#                157          537190 |******                             540144.24841
#                123          543419 |*****                              546771.00000
#                110          549648 |****                               552677.36364
#                123          555877 |*****                              558917.34146
#                 94          562106 |****                               565247.59574
#                107          568335 |****                               571602.77570
#                112          574564 |****                               577567.42857
#                109          580793 |****                               583544.39450
#                137          587022 |*****                              590422.09489
#                127          593251 |*****                              596067.06299
#                 98          599480 |****                               602460.79592
#                115          605709 |****                               608787.52174
#                113          611938 |****                               615046.22124
#                109          618167 |****                               621416.87156
#                 60          624396 |**                                 627339.33333
#                 92          630625 |***                                633562.30435
#                103          636854 |****                               639921.48544
#                106          643083 |****                               646255.90566
#                 79          649312 |***                                652578.59494
#                 72          655541 |***                                658719.61111
#                 90          661770 |***                                665107.66667
#
#                369           > 95% |***************                    690945.25474
#
#        mean of 95%    530625.17321
#          95th %ile          667971
#
# WARNINGS
#     Actual benchmark run time only accounts for 24.4% of elapsed time.
#
# Usage: select
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'select')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-n fds-per-thread (default 256)]
#     [-r readable-fds (default 0)]
#     [-w writeable-fds (default 0)]
#     [-x] (start -r option with highest fd first; default is lowest first)
# notes: measures select()
      prc thr      nsecs/call      samples   errors cnt/samp 
semop   1   1           39699        12672        0       20 
# bin/../bin-riscv64/semop -N semop -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     38341                      38656
#                        max   1504786                      40956
#                       mean     44414.77992                39799.70297
#                     median     40037                      39699*
#                     stddev     17567.74617                  385.43972
#             standard error       129.01079                    3.42400
#       99% confidence level       332.33181                    8.82023
#                       skew        33.81596                    0.53000
#                   kurtosis      2591.72372                    0.19785
#           time correlation         1.32522                    0.10094
#
#               elapsed time        20.00387
#                   run time        17.01696
#          getnsecs overhead      1429
#
#          number of samples     18543
#         number of outliers      5871
#    number of final samples     12672
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4           38656 |*                                   38689.25000
#                  3           38715 |*                                   38753.00000
#                 15           38774 |*                                   38807.26667
#                 24           38833 |*                                   38864.20833
#                 51           38892 |*                                   38928.47059
#                 80           38951 |*                                   38981.47500
#                 81           39010 |*                                   39039.83951
#                141           39069 |***                                 39101.79433
#                151           39128 |***                                 39154.32450
#                 99           39187 |**                                  39214.35354
#                 99           39246 |**                                  39271.22222
#                171           39305 |***                                 39340.35088
#                475           39364 |**********                          39398.48842
#                639           39423 |*************                       39452.90454
#                931           39482 |********************                39514.10741
#               1472           39541 |********************************    39571.54620
#               1287           39600 |***************************         39627.16550
#                816           39659 |*****************                   39686.43750
#                702           39718 |***************                     39745.43590
#                431           39777 |*********                           39805.73782
#                424           39836 |*********                           39867.08255
#                499           39895 |**********                          39925.71543
#                447           39954 |*********                           39982.78076
#                539           40013 |***********                         40042.09462
#                543           40072 |***********                         40100.45120
#                544           40131 |***********                         40159.61581
#                403           40190 |********                            40214.99752
#                277           40249 |******                              40274.60650
#                208           40308 |****                                40334.48558
#                189           40367 |****                                40394.86243
#                159           40426 |***                                 40454.83019
#                134           40485 |**                                  40508.13433
#
#                634           > 95% |*************                       40714.79495
#
#        mean of 95%     39751.50822
#          95th %ile           40532
#
# Usage: semop
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'semop')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures semop()
           prc thr      nsecs/call      samples   errors cnt/samp 
setcontext   1   1           13600        17844        0       68 
# bin/../bin-riscv64/setcontext -N setcontext -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     12992                      12992
#                        max    161357                      16837
#                       mean     14345.15214                14082.59538
#                     median     13625                      13600*
#                     stddev      2234.90585                  919.12986
#             standard error        16.36646                    6.88067
#       99% confidence level        42.16000                   17.72461
#                       skew        21.00719                    1.37663
#                   kurtosis      1067.97056                    0.32615
#           time correlation         0.20929                    0.14492
#
#               elapsed time        20.00489
#                   run time        18.29881
#          getnsecs overhead      1429
#
#          number of samples     18647
#         number of outliers       803
#    number of final samples     17844
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10           12992 |*                                   13061.30000
#                132           13087 |*                                   13143.43939
#                157           13182 |*                                   13227.84076
#                171           13277 |*                                   13330.54971
#                572           13372 |**                                  13427.12587
#               6129           13467 |********************************    13527.71121
#               2843           13562 |**************                      13597.24411
#               2660           13657 |*************                       13694.41880
#                347           13752 |*                                   13790.24207
#                184           13847 |*                                   13891.01087
#                145           13942 |*                                   13984.43448
#                 99           14037 |*                                   14085.46465
#                 61           14132 |*                                   14175.26230
#                 45           14227 |*                                   14272.24444
#                 33           14322 |*                                   14368.45455
#                 27           14417 |*                                   14458.33333
#                 34           14512 |*                                   14559.94118
#                 31           14607 |*                                   14657.16129
#                 22           14702 |*                                   14751.45455
#                 43           14797 |*                                   14855.55814
#                 58           14892 |*                                   14946.25862
#                 65           14987 |*                                   15033.49231
#                 88           15082 |*                                   15137.92045
#                287           15177 |*                                   15231.75261
#                476           15272 |**                                  15323.52311
#                494           15367 |**                                  15413.23279
#                433           15462 |**                                  15508.92841
#                367           15557 |*                                   15602.14441
#                247           15652 |*                                   15696.92308
#                252           15747 |*                                   15792.18651
#                245           15842 |*                                   15889.77143
#                194           15937 |*                                   15978.03608
#
#                893           > 95% |****                                16347.07839
#
#        mean of 95%     13963.29957
#          95th %ile           16022
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: setcontext
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'setcontext')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures setcontext()
           prc thr      nsecs/call      samples   errors cnt/samp 
setsockopt   1   1           21859        10395        0       36 
# bin/../bin-riscv64/setsockopt -N setsockopt -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     21094                      21094
#                        max    505586                      23169
#                       mean     26490.77445                21962.88870
#                     median     22099                      21859*
#                     stddev     12270.37987                  401.99181
#             standard error        98.84224                    3.94280
#       99% confidence level       254.61762                   10.15666
#                       skew         7.28831                    1.16399
#                   kurtosis       175.02997                    0.85282
#           time correlation         1.55472                    0.12318
#
#               elapsed time        20.00963
#                   run time        14.80987
#          getnsecs overhead      1429
#
#          number of samples     15411
#         number of outliers      5016
#    number of final samples     10395
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1           21094 |*                                   21094.00000
#                 14           21151 |*                                   21182.64286
#                 15           21208 |*                                   21240.66667
#                 32           21265 |*                                   21298.21875
#                 61           21322 |*                                   21352.60656
#                178           21379 |*****                               21410.83708
#                286           21436 |********                            21467.91259
#                369           21493 |**********                          21521.34417
#                459           21550 |*************                       21579.93900
#                675           21607 |*******************                 21636.06667
#                854           21664 |*************************           21694.63583
#               1084           21721 |********************************    21747.43173
#                821           21778 |************************            21806.04629
#                877           21835 |*************************           21863.56556
#                677           21892 |*******************                 21918.92467
#                532           21949 |***************                     21976.67857
#                484           22006 |**************                      22034.02479
#                404           22063 |***********                         22089.17327
#                348           22120 |**********                          22148.97701
#                268           22177 |*******                             22202.77239
#                217           22234 |******                              22260.48848
#                167           22291 |****                                22317.64671
#                137           22348 |****                                22374.35036
#                106           22405 |***                                 22431.33962
#                 92           22462 |**                                  22489.36957
#                 90           22519 |**                                  22547.63333
#                108           22576 |***                                 22606.95370
#                124           22633 |***                                 22661.18548
#                 87           22690 |**                                  22715.47126
#                111           22747 |***                                 22776.22523
#                112           22804 |***                                 22834.00893
#                 85           22861 |**                                  22877.00000
#
#                520           > 95% |***************                     23017.94038
#
#        mean of 95%     21907.33154
#          95th %ile           22894
#
# WARNINGS
#     Actual benchmark run time only accounts for 74.0% of elapsed time.
#
# Usage: setsockopt
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'setsockopt')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# setsockopt(TCP_NODELAY)
          prc thr      nsecs/call      samples   errors cnt/samp 
sigaction   1   1           24165        18122        0       37 
# bin/../bin-riscv64/sigaction -N sigaction -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     23202                      23202
#                        max    648271                      28968
#                       mean     25513.58316                24875.73954
#                     median     24202                      24165*
#                     stddev      7012.15135                 1365.01143
#             standard error        50.55321                   10.13989
#       99% confidence level       130.22507                   26.12036
#                       skew        57.18871                    1.47415
#                   kurtosis      4583.04892                    0.63526
#           time correlation         0.36770                    0.20912
#
#               elapsed time        20.00432
#                   run time        18.08480
#          getnsecs overhead      1429
#
#          number of samples     19240
#         number of outliers      1118
#    number of final samples     18122
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 85           23202 |*                                   23298.29412
#                128           23347 |*                                   23415.46094
#                102           23492 |*                                   23560.86275
#                 92           23637 |*                                   23704.52174
#                215           23782 |*                                   23874.88837
#               2736           23927 |*************                       24028.52595
#               6387           24072 |********************************    24121.87396
#               1953           24217 |*********                           24304.06759
#               1511           24362 |*******                             24410.30443
#                354           24507 |*                                   24572.90960
#                227           24652 |*                                   24714.51101
#                133           24797 |*                                   24864.85714
#                 83           24942 |*                                   25004.31325
#                 58           25087 |*                                   25153.60345
#                 46           25232 |*                                   25302.00000
#                 39           25377 |*                                   25441.07692
#                 36           25522 |*                                   25593.97222
#                 33           25667 |*                                   25739.48485
#                 33           25812 |*                                   25872.51515
#                 36           25957 |*                                   26032.69444
#                 54           26102 |*                                   26185.51852
#                 55           26247 |*                                   26322.85455
#                 88           26392 |*                                   26466.94318
#                194           26537 |*                                   26617.36082
#                310           26682 |*                                   26757.86774
#                346           26827 |*                                   26901.73410
#                419           26972 |**                                  27049.19093
#                426           27117 |**                                  27181.63380
#                338           27262 |*                                   27328.00296
#                306           27407 |*                                   27476.98039
#                209           27552 |*                                   27624.72249
#                183           27697 |*                                   27767.31148
#
#                907           > 95% |****                                28342.56891
#
#        mean of 95%     24693.08405
#          95th %ile           27839
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: sigaction
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'sigaction')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures sigaction()
           prc thr      nsecs/call      samples   errors cnt/samp 
siglongjmp   1   1           14801        18037        0       61 
# bin/../bin-riscv64/siglongjmp -N siglongjmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     14048                      14048
#                        max    579024                      18198
#                       mean     15677.87995                15303.23424
#                     median     14820                      14801*
#                     stddev      5009.36484                  964.81837
#             standard error        36.44548                    7.18395
#       99% confidence level        93.88356                   18.50586
#                       skew        78.06130                    1.38861
#                   kurtosis      8503.88700                    0.42084
#           time correlation         0.24868                    0.15207
#
#               elapsed time        20.00384
#                   run time        18.04637
#          getnsecs overhead      1429
#
#          number of samples     18892
#         number of outliers       855
#    number of final samples     18037
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  2           14048 |*                                   14081.50000
#                 20           14153 |*                                   14238.75000
#                116           14258 |*                                   14318.12931
#                121           14363 |*                                   14412.37190
#                156           14468 |*                                   14526.91667
#               1800           14573 |*********                           14649.87889
#               6346           14678 |********************************    14724.43256
#               2644           14783 |*************                       14836.40431
#               1371           14888 |******                              14926.11087
#                431           14993 |**                                  15037.90719
#                232           15098 |*                                   15144.61638
#                130           15203 |*                                   15250.91538
#                 84           15308 |*                                   15356.97619
#                 87           15413 |*                                   15473.28736
#                112           15518 |*                                   15581.06250
#                116           15623 |*                                   15669.43966
#                 56           15728 |*                                   15774.44643
#                 47           15833 |*                                   15883.06383
#                 48           15938 |*                                   15986.68750
#                 52           16043 |*                                   16096.78846
#                 85           16148 |*                                   16198.96471
#                117           16253 |*                                   16303.65812
#                180           16358 |*                                   16416.04444
#                313           16463 |*                                   16516.52077
#                451           16568 |**                                  16621.54767
#                422           16673 |**                                  16724.60190
#                417           16778 |**                                  16830.57074
#                330           16883 |*                                   16931.78182
#                278           16988 |*                                   17040.39928
#                243           17093 |*                                   17142.60494
#                214           17198 |*                                   17251.77103
#                114           17303 |*                                   17339.25439
#
#                902           > 95% |****                                17724.24945
#
#        mean of 95%     15175.79008
#          95th %ile           17379
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: siglongjmp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'siglongjmp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures siglongjmp()
       prc thr      nsecs/call      samples   errors cnt/samp 
signal   1   1          204857         8979        0       10 
# bin/../bin-riscv64/signal -N signal -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    187567                     187567
#                        max    757367                     228847
#                       mean    207493.65494               204501.05279
#                     median    205567                     204857*
#                     stddev     21436.97893                 8118.78877
#             standard error       221.29397                   85.67957
#       99% confidence level       570.05327                  220.71056
#                       skew        10.69851                    0.61795
#                   kurtosis       190.57937                   -0.50987
#           time correlation         4.50211                    3.01270
#
#               elapsed time        20.00433
#                   run time        19.48462
#          getnsecs overhead      1429
#
#          number of samples      9384
#         number of outliers       405
#    number of final samples      8979
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          187567 |*                                  187993.66667
#                  2          188569 |*                                  189377.00000
#                  5          189571 |*                                  190063.00000
#                 17          190573 |*                                  191075.23529
#                 11          191575 |*                                  191985.18182
#                 30          192577 |*                                  193113.00000
#                 39          193579 |*                                  194106.23077
#                332          194581 |*******                            195295.70482
#               1141          195583 |*************************          196097.86766
#               1444          196585 |********************************   197056.34903
#                596          197587 |*************                      197985.18792
#                295          198589 |******                             199072.18644
#                189          199591 |****                               200074.19577
#                120          200593 |**                                 201075.83333
#                 64          201595 |*                                  202060.12500
#                 41          202597 |*                                  203133.09756
#                103          203599 |**                                 204174.08738
#                273          204601 |******                             205148.02564
#                462          205603 |**********                         206141.04762
#                533          206605 |***********                        207072.04690
#                467          207607 |**********                         208088.60600
#                383          208609 |********                           209098.30548
#                352          209611 |*******                            210110.63636
#                312          210613 |******                             211100.65385
#                283          211615 |******                             212087.95406
#                247          212617 |*****                              213103.80162
#                192          213619 |****                               214094.81250
#                138          214621 |***                                215140.40580
#                145          215623 |***                                216084.10345
#                112          216625 |**                                 217142.98214
#                108          217627 |**                                 218132.00000
#                 91          218629 |**                                 219123.04396
#
#                449           > 95% |*********                          223171.69933
#
#        mean of 95%    203518.27198
#          95th %ile          219627
#
# Usage: signal
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'signal')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures kill()
            prc thr      nsecs/call      samples   errors cnt/samp 
sigprocmask   1   1           23534        17672        0       39 
# bin/../bin-riscv64/sigprocmask -N sigprocmask -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     22467                      22467
#                        max    251192                      28569
#                       mean     24719.17328                24293.88711
#                     median     23574                      23534*
#                     stddev      3543.20776                 1425.13250
#             standard error        26.02487                   10.72043
#       99% confidence level        67.04007                   27.61584
#                       skew        20.64374                    1.39530
#                   kurtosis       985.83148                    0.40728
#           time correlation         0.32935                    0.22569
#
#               elapsed time        20.00363
#                   run time        18.20568
#          getnsecs overhead      1429
#
#          number of samples     18536
#         number of outliers       864
#    number of final samples     17672
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 21           22467 |*                                   22579.85714
#                176           22618 |*                                   22701.15341
#                128           22769 |*                                   22846.07031
#                 95           22920 |*                                   22987.53684
#                 66           23071 |*                                   23136.36364
#                513           23222 |**                                  23336.14035
#               7547           23373 |********************************    23462.61561
#               1842           23524 |*******                             23597.80727
#               2449           23675 |**********                          23731.36464
#                272           23826 |*                                   23880.65809
#                148           23977 |*                                   24053.69595
#                 92           24128 |*                                   24195.59783
#                 65           24279 |*                                   24344.49231
#                 52           24430 |*                                   24498.59615
#                 34           24581 |*                                   24662.05882
#                 37           24732 |*                                   24797.91892
#                 23           24883 |*                                   24948.86957
#                 20           25034 |*                                   25110.05000
#                 26           25185 |*                                   25266.34615
#                 27           25336 |*                                   25420.18519
#                 48           25487 |*                                   25554.64583
#                 68           25638 |*                                   25720.41176
#                106           25789 |*                                   25882.54717
#                209           25940 |*                                   26019.66507
#                328           26091 |*                                   26171.23476
#                439           26242 |*                                   26319.55353
#                512           26393 |**                                  26470.24414
#                399           26544 |*                                   26620.14035
#                382           26695 |*                                   26770.26963
#                273           26846 |*                                   26917.09890
#                216           26997 |*                                   27068.89815
#                175           27148 |*                                   27225.51429
#
#                884           > 95% |***                                 27849.32127
#
#        mean of 95%     24106.66982
#          95th %ile           27294
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: sigprocmask
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'sigprocmask')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures sigprocmask()
         prc thr      nsecs/call      samples   errors cnt/samp 
socket_i   1   1           76634          336        0      400 
# bin/../bin-riscv64/socket -N socket_i -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 400 -f PF_INET 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     62786                      62786
#                        max    248705                     217733
#                       mean     97504.64307                96263.46429
#                     median     76786                      76634*
#                     stddev     42795.06817                40892.23339
#             standard error      2324.30905                 2230.85422
#       99% confidence level      5987.42012                 5746.68048
#                       skew         1.46759                    1.43015
#                   kurtosis         1.07220                    0.85779
#           time correlation       374.23290                  361.97652
#
#               elapsed time        20.05937
#                   run time        13.22212
#          getnsecs overhead      1429
#
#          number of samples       339
#         number of outliers         3
#    number of final samples       336
#             ops per sample       400.00000 (-B 400)
#
#       recommended -B value        10
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 59           62786 |****************************        64912.03390
#                 66           66902 |********************************    68527.22727
#                 33           71018 |****************                    72699.06061
#                 40           75134 |*******************                 77341.65000
#                  9           79250 |****                                81037.44444
#                  3           83366 |*                                   85701.00000
#                  9           87482 |****                                89902.22222
#                  6           91598 |**                                  93654.83333
#                 10           95714 |****                                97880.90000
#                  7           99830 |***                                102261.28571
#                  6          103946 |**                                 106254.00000
#                  8          108062 |***                                110148.37500
#                  1          112178 |*                                  113802.00000
#                  7          116294 |***                                117959.71429
#                  1          120410 |*                                  123738.00000
#                  2          124526 |*                                  125503.50000
#                  7          128642 |***                                130648.14286
#                  4          132758 |*                                  134140.50000
#                  3          136874 |*                                  139399.66667
#                  4          140990 |*                                  143953.75000
#                  5          145106 |**                                 146659.80000
#                  3          149222 |*                                  151151.33333
#                  1          153338 |*                                  156792.00000
#                  3          157454 |*                                  158624.33333
#                  3          161570 |*                                  163036.33333
#                  4          165686 |*                                  168241.00000
#                  3          169802 |*                                  172694.00000
#                  4          173918 |*                                  175850.25000
#                  0          178034 |                                              -
#                  3          182150 |*                                  185084.33333
#                  3          186266 |*                                  187780.66667
#                  2          190382 |*                                  192154.00000
#
#                 17           > 95% |********                           203711.11765
#
#        mean of 95%     90537.41379
#          95th %ile          194474
#
# WARNINGS
#     Actual benchmark run time only accounts for 65.9% of elapsed time.
#
# Usage: socket
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'socket')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f socket-family (default PF_UNIX)]
# notes: measures socket
         prc thr      nsecs/call      samples   errors cnt/samp 
socket_u   1   1           76632          243        0      600 
# bin/../bin-riscv64/socket -N socket_u -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 600 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     60350                      60350
#                        max    205711                     205711
#                       mean     94767.71605                94767.71605
#                     median     76632                      76632*
#                     stddev     38252.38013                38252.38013
#             standard error      2453.89133                 2453.89133
#       99% confidence level      6321.22406                 6321.22406
#                       skew         1.16835                    1.16835
#                   kurtosis         0.01898                    0.01898
#           time correlation       484.59566                  484.59566
#
#               elapsed time        20.06593
#                   run time        13.81748
#          getnsecs overhead      1429
#
#          number of samples       243
#         number of outliers         0
#    number of final samples       243
#             ops per sample       600.00000 (-B 600)
#
#       recommended -B value        11
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 28           60350 |************************            62397.92857
#                 36           63746 |********************************    65278.52778
#                 32           67142 |****************************        68708.00000
#                 15           70538 |*************                       71971.73333
#                 15           73934 |*************                       75546.40000
#                 14           77330 |************                        78802.71429
#                  8           80726 |*******                             82108.37500
#                  8           84122 |*******                             85909.12500
#                  4           87518 |***                                 88896.50000
#                  4           90914 |***                                 91678.50000
#                  1           94310 |*                                   96100.00000
#                  5           97706 |****                                99876.40000
#                  4          101102 |***                                102994.25000
#                  2          104498 |*                                  107154.00000
#                  3          107894 |**                                 108605.33333
#                  1          111290 |*                                  114012.00000
#                  4          114686 |***                                115981.75000
#                  3          118082 |**                                 119257.00000
#                  0          121478 |                                              -
#                  3          124874 |**                                 126366.66667
#                  3          128270 |**                                 130343.00000
#                  1          131666 |*                                  133964.00000
#                  4          135062 |***                                137004.50000
#                  3          138458 |**                                 140803.00000
#                  1          141854 |*                                  145135.00000
#                  2          145250 |*                                  147906.50000
#                  3          148646 |**                                 150440.33333
#                  5          152042 |****                               153232.80000
#                  4          155438 |***                                157817.00000
#                  5          158834 |****                               160447.60000
#                  5          162230 |****                               164270.40000
#                  4          165626 |***                                167423.50000
#
#                 13           > 95% |***********                        185344.76923
#
#        mean of 95%     89648.14348
#          95th %ile          169014
#
# WARNINGS
#     Actual benchmark run time only accounts for 68.9% of elapsed time.
#
# Usage: socket
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'socket')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f socket-family (default PF_UNIX)]
# notes: measures socket
           prc thr      nsecs/call      samples   errors cnt/samp 
socketpair   1   1          210422          270        0      150 
# bin/../bin-riscv64/socketpair -N socketpair -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -B 300 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    199252                     199252
#                        max    678538                     299166
#                       mean    281676.04632               222684.39630
#                     median    216356                     210422*
#                     stddev    112210.63012                25546.83405
#             standard error      5857.34721                 1554.73081
#       99% confidence level     15088.52642                 4004.98656
#                       skew         1.55923                    1.66479
#                   kurtosis         1.30483                    1.54811
#           time correlation       877.82903                  266.24492
#
#               elapsed time        20.02225
#                   run time        15.50680
#          getnsecs overhead      1429
#
#          number of samples       367
#         number of outliers        97
#    number of final samples       270
#             ops per sample       150.00000 (-B 300)
#
#       recommended -B value         4
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1          199252 |*                                  199252.00000
#                 14          201964 |*******                            203720.35714
#                 56          204676 |****************************       206087.48214
#                 62          207388 |********************************   208636.45161
#                 35          210100 |******************                 211424.40000
#                 10          212812 |*****                              213864.20000
#                  9          215524 |****                               216606.77778
#                  8          218236 |****                               219860.00000
#                  5          220948 |**                                 222289.80000
#                  2          223660 |*                                  224803.50000
#                  3          226372 |*                                  228770.00000
#                  0          229084 |                                              -
#                  6          231796 |***                                233367.33333
#                  5          234508 |**                                 235537.40000
#                  3          237220 |*                                  238242.00000
#                  1          239932 |*                                  240122.00000
#                  3          242644 |*                                  244086.33333
#                  1          245356 |*                                  246636.00000
#                  3          248068 |*                                  249937.00000
#                  5          250780 |**                                 252561.20000
#                  2          253492 |*                                  254851.50000
#                  2          256204 |*                                  258151.50000
#                  1          258916 |*                                  260784.00000
#                  2          261628 |*                                  263379.50000
#                  5          264340 |**                                 265476.00000
#                  1          267052 |*                                  267473.00000
#                  0          269764 |                                              -
#                  1          272476 |*                                  273695.00000
#                  6          275188 |***                                276125.66667
#                  2          277900 |*                                  278872.50000
#                  1          280612 |*                                  283137.00000
#                  1          283324 |*                                  286001.00000
#
#                 14           > 95% |*******                            293778.78571
#
#        mean of 95%    218796.42188
#          95th %ile          286030
#
# WARNINGS
#     Actual benchmark run time only accounts for 77.4% of elapsed time.
#
# Usage: socketpair
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'socketpair')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures socketpair
         prc thr      nsecs/call      samples   errors cnt/samp 
stat_tmp   1   1          207093        13525        0        3 
# bin/../bin-riscv64/stat -N stat_tmp -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    195618                     202243
#                        max   1162243                     212893
#                       mean    226132.31507               207568.48547
#                     median    208443                     207093*
#                     stddev     61529.24220                 1778.08824
#             standard error       436.41053                   15.28920
#       99% confidence level      1124.19353                   39.38497
#                       skew         5.96172                    0.61631
#                   kurtosis        43.32414                   -0.01231
#           time correlation         5.11112                    0.43702
#
#               elapsed time        20.00411
#                   run time        17.94857
#          getnsecs overhead      1429
#
#          number of samples     19878
#         number of outliers      6353
#    number of final samples     13525
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11          202243 |*                                  202343.00000
#                 13          202512 |*                                  202671.84615
#                 17          202781 |*                                  202940.05882
#                 12          203050 |*                                  203205.50000
#                 15          203319 |*                                  203461.33333
#                 17          203588 |*                                  203716.52941
#                 46          203857 |*                                  204001.69565
#                 55          204126 |*                                  204292.09091
#                 84          204395 |**                                 204544.78571
#                120          204664 |***                                204805.29167
#                200          204933 |*****                              205078.87500
#                353          205202 |*********                          205353.14448
#                468          205471 |************                       205616.69444
#                767          205740 |*******************                205873.68579
#               1000          206009 |*************************          206145.12600
#               1159          206278 |******************************     206424.77826
#               1232          206547 |********************************   206680.52029
#               1145          206816 |*****************************      206934.83057
#                963          207085 |*************************          207211.47767
#                645          207354 |****************                   207492.93178
#                525          207623 |*************                      207747.66667
#                371          207892 |*********                          208005.26415
#                362          208161 |*********                          208293.34530
#                356          208430 |*********                          208577.12079
#                357          208699 |*********                          208831.16527
#                420          208968 |**********                         209099.26429
#                481          209237 |************                       209364.83576
#                463          209506 |************                       209640.57019
#                403          209775 |**********                         209911.41687
#                289          210044 |*******                            210169.55709
#                297          210313 |*******                            210434.15152
#                202          210582 |*****                              210699.06436
#
#                677           > 95% |*****************                  211688.50517
#
#        mean of 95%    207351.38917
#          95th %ile          210843
#
# Usage: stat
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'stat')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-stat (default /dev/null)]
# notes: measures stat()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strchr_10   1   1              70        19963        0    12108       10
# bin/../bin-riscv64/strchr -N strchr_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        68                         68
#                        max     29327                         78
#                       mean        74.19936                   70.58523
#                     median        70                         70*
#                     stddev       211.20162                    2.30747
#             standard error         1.46329                    0.01633
#       99% confidence level         3.76945                    0.04207
#                       skew       130.40410                    1.41206
#                   kurtosis     17774.79003                    0.84703
#           time correlation         0.00133                    0.00034
#
#               elapsed time        20.00469
#                   run time        18.00697
#          getnsecs overhead      1429
#
#          number of samples     20832
#         number of outliers       869
#    number of final samples     19963
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                514              68 |*                                             -
#               8695              69 |********************************              -
#               5143              70 |******************                            -
#               1199              71 |****                                          -
#                228              72 |*                                             -
#                630              73 |**                                            -
#               1541              74 |*****                                         -
#               1014              75 |***                                           -
#
#                999           > 95% |***                                    76.63363
#
#        mean of 95%        70.26661
#          95th %ile              75
#
# Usage: strchr
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strchr')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned strchr]
# notes: measures strchr()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strchr_1k   1   1             358        17821        0     2692     1024
# bin/../bin-riscv64/strchr -N strchr_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       346                        346
#                        max     10337                        395
#                       mean       366.89634                  362.11515
#                     median       358                        358*
#                     stddev        83.02732                   10.96815
#             standard error         0.60738                    0.08216
#       99% confidence level         1.56462                    0.21165
#                       skew        98.91978                    1.13254
#                   kurtosis     11413.32665                    0.09604
#           time correlation         0.00318                    0.00194
#
#               elapsed time        20.00489
#                   run time        18.45003
#          getnsecs overhead      1429
#
#          number of samples     18686
#         number of outliers       865
#    number of final samples     17821
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5             346 |*                                     346.80000
#                100             348 |*                                     348.83000
#                848             350 |*********                             350.67099
#               2732             352 |********************************      352.54978
#               2433             354 |****************************          354.36334
#               2199             356 |*************************             356.52888
#               2453             358 |****************************          358.48390
#               1214             360 |**************                        360.44481
#                703             362 |********                              362.47937
#                502             364 |*****                                 364.32271
#                222             366 |**                                    366.41441
#                139             368 |*                                     368.51799
#                192             370 |**                                    370.56250
#                334             372 |***                                   372.56886
#                504             374 |*****                                 374.59325
#                632             376 |*******                               376.53956
#                579             378 |******                                378.52332
#                530             380 |******                                380.49057
#                436             382 |*****                                 382.48394
#                172             384 |**                                    384.00000
#
#                892           > 95% |**********                            388.69619
#
#        mean of 95%       360.71457
#          95th %ile             385
#
# Usage: strchr
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strchr')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned strchr]
# notes: measures strchr()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strcmp_10   1   1              49        19176        0    17954       10
# bin/../bin-riscv64/strcmp -N strcmp_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        46                         46
#                        max     15637                         55
#                       mean        51.45093                   49.55032
#                     median        49                         49*
#                     stddev       111.66427                    1.85353
#             standard error         0.78978                    0.01339
#       99% confidence level         2.03448                    0.03448
#                       skew       136.43218                    1.14158
#                   kurtosis     18991.27457                    0.37804
#           time correlation         0.00083                    0.00030
#
#               elapsed time        20.00412
#                   run time        18.06506
#          getnsecs overhead      1429
#
#          number of samples     19990
#         number of outliers       814
#    number of final samples     19176
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14              46 |*                                             -
#                470              47 |**                                            -
#               6113              48 |*****************************                 -
#               6565              49 |********************************              -
#               1083              50 |*****                                         -
#               1378              51 |******                                        -
#               1594              52 |*******                                       -
#               1000              53 |****                                          -
#
#                959           > 95% |****                                   54.24192
#
#        mean of 95%        49.30334
#          95th %ile              53
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: strcmp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strcmp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned cmp]
# notes: measures strcmp()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strcmp_1k   1   1             398        18068        0     2239     1024
# bin/../bin-riscv64/strcmp -N strcmp_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       382                        382
#                        max     33297                        443
#                       mean       418.33655                  402.08523
#                     median       400                        398*
#                     stddev       264.51767                   13.56370
#             standard error         1.88888                    0.10091
#       99% confidence level         4.86576                    0.25994
#                       skew       103.45845                    0.98543
#                   kurtosis     12413.51696                    0.13685
#           time correlation         0.00673                    0.00245
#
#               elapsed time        20.00438
#                   run time        18.11140
#          getnsecs overhead      1429
#
#          number of samples     19611
#         number of outliers      1543
#    number of final samples     18068
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 29             382 |*                                     382.93103
#                432             384 |*******                               384.86806
#               1320             386 |**********************                386.58561
#                910             388 |***************                       388.51758
#               1355             390 |**********************                390.61993
#               1894             392 |********************************      392.50370
#               1439             394 |************************              394.44823
#               1196             396 |********************                  396.46823
#               1151             398 |*******************                   398.52302
#               1146             400 |*******************                   400.49738
#               1082             402 |******************                    402.48152
#                762             404 |************                          404.44094
#                496             406 |********                              406.44758
#                378             408 |******                                408.45503
#                348             410 |*****                                 410.50287
#                350             412 |*****                                 412.49143
#                374             414 |******                                414.53476
#                396             416 |******                                416.49747
#                443             418 |*******                               418.52144
#                370             420 |******                                420.43514
#                378             422 |******                                422.48677
#                292             424 |****                                  424.45205
#                298             426 |*****                                 426.48658
#                263             428 |****                                  428.47909
#                 62             430 |*                                     430.00000
#
#                904           > 95% |***************                       435.40597
#
#        mean of 95%       400.33028
#          95th %ile             430
#
# Usage: strcmp
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strcmp')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned cmp]
# notes: measures strcmp()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strcpy_10   1   1              86        19436        0     9795       10
# bin/../bin-riscv64/strcpy -N strcpy_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        82                         82
#                        max     35547                         96
#                       mean        91.81599                   86.99923
#                     median        86                         86*
#                     stddev       263.39783                    2.90176
#             standard error         1.82669                    0.02081
#       99% confidence level         4.70554                    0.05362
#                       skew       123.59775                    1.28374
#                   kurtosis     16106.49904                    0.62864
#           time correlation         0.00174                    0.00046
#
#               elapsed time        20.00325
#                   run time        18.01559
#          getnsecs overhead      1429
#
#          number of samples     20792
#         number of outliers      1356
#    number of final samples     19436
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4              82 |*                                             -
#                 90              83 |*                                             -
#               1588              84 |*******                                       -
#               6403              85 |********************************              -
#               4230              86 |*********************                         -
#               1996              87 |*********                                     -
#                639              88 |***                                           -
#                309              89 |*                                             -
#                745              90 |***                                           -
#               1226              91 |******                                        -
#                883              92 |****                                          -
#                351              93 |*                                             -
#
#                972           > 95% |****                                   94.45679
#
#        mean of 95%        86.60664
#          95th %ile              93
#
# Usage: strcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned cmp]
# notes: measures strcpy()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strcpy_1k   1   1             395        18422        0     2222     1024
# bin/../bin-riscv64/strcpy -N strcpy_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       374                        374
#                        max     73997                        464
#                       mean       420.23389                  403.78520
#                     median       400                        395*
#                     stddev       546.58145                   19.91135
#             standard error         3.89453                    0.14670
#       99% confidence level        10.03230                    0.37790
#                       skew       126.09321                    0.78693
#                   kurtosis     16746.54194                   -0.22698
#           time correlation         0.00778                    0.00356
#
#               elapsed time        20.00363
#                   run time        18.08150
#          getnsecs overhead      1429
#
#          number of samples     19697
#         number of outliers      1275
#    number of final samples     18422
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 12             374 |*                                     375.33333
#                149             377 |*                                     378.65101
#                983             380 |************                          381.29298
#               2463             383 |********************************      384.04507
#               2431             386 |*******************************       386.97614
#               1789             389 |***********************               389.92063
#               1190             392 |***************                       392.82185
#                595             395 |*******                               395.84706
#                292             398 |***                                   398.84932
#                156             401 |**                                    401.80128
#                168             404 |**                                    405.09524
#                365             407 |****                                  408.16712
#                866             410 |***********                           411.19053
#               1434             413 |******************                    414.05509
#               1365             416 |*****************                     416.95311
#               1062             419 |*************                         419.93879
#                659             422 |********                              422.88316
#                406             425 |*****                                 425.85222
#                257             428 |***                                   428.86381
#                166             431 |**                                    431.98193
#                124             434 |*                                     435.04032
#                175             437 |**                                    438.09714
#                237             440 |***                                   441.04641
#                156             443 |**                                    443.40385
#
#                922           > 95% |***********                           451.88937
#
#        mean of 95%       401.25080
#          95th %ile             444
#
# Usage: strcpy
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strcpy')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned cmp]
# notes: measures strcpy()
         prc thr      nsecs/call      samples   errors cnt/samp   format
strftime   1   1            3610        18233        0      258       %c
# bin/../bin-riscv64/strftime -N strftime -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      3214                       3220
#                        max    259317                       4075
#                       mean      3739.22450                 3647.27258
#                     median      3614                       3610*
#                     stddev      2493.29996                  142.61570
#             standard error        18.08307                    1.05618
#       99% confidence level        46.58198                    2.72072
#                       skew        91.12490                    0.37665
#                   kurtosis      8779.24431                    0.71494
#           time correlation         0.05061                    0.02493
#
#               elapsed time        20.00412
#                   run time        18.15641
#          getnsecs overhead      1429
#
#          number of samples     19011
#         number of outliers       778
#    number of final samples     18233
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 14            3220 |*                                    3230.92857
#                 48            3242 |*                                    3257.45833
#                161            3264 |**                                   3275.57764
#                247            3286 |***                                  3296.12146
#                120            3308 |*                                    3317.31667
#                 71            3330 |*                                    3340.95775
#                 54            3352 |*                                    3361.81481
#                 24            3374 |*                                    3382.95833
#                 12            3396 |*                                    3405.66667
#                 17            3418 |*                                    3428.35294
#                 13            3440 |*                                    3448.30769
#                  7            3462 |*                                    3473.57143
#                133            3484 |*                                    3498.47368
#                634            3506 |********                             3519.05363
#               1453            3528 |*******************                  3539.43978
#               2006            3550 |***************************          3560.80658
#               2329            3572 |********************************     3582.65264
#               2287            3594 |*******************************      3603.97595
#               1700            3616 |***********************              3625.95471
#               1037            3638 |**************                       3647.99711
#                641            3660 |********                             3669.74883
#                416            3682 |*****                                3691.71875
#                251            3704 |***                                  3715.03586
#                302            3726 |****                                 3737.00993
#                335            3748 |****                                 3759.13433
#                462            3770 |******                               3781.04978
#                515            3792 |*******                              3802.24466
#                554            3814 |*******                              3824.89170
#                542            3836 |*******                              3845.95203
#                398            3858 |*****                                3867.91960
#                368            3880 |*****                                3889.88043
#                170            3902 |**                                   3907.48824
#
#                912           > 95% |************                         3973.31250
#
#        mean of 95%      3630.10565
#          95th %ile            3913
#
# Usage: strftime
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strftime')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f format (default = "%c")]
# notes: measures strftime()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strlen_10   1   1              48        21182        0    16339       10
# bin/../bin-riscv64/strlen -N strlen_10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        46                         46
#                        max     37927                         54
#                       mean        52.48396                   48.29044
#                     median        48                         48*
#                     stddev       271.40859                    1.73975
#             standard error         1.81777                    0.01195
#       99% confidence level         4.68258                    0.03079
#                       skew       128.40494                    1.43531
#                   kurtosis     17349.82553                    1.24490
#           time correlation         0.00133                    0.00024
#
#               elapsed time        20.00524
#                   run time        17.83594
#          getnsecs overhead      1429
#
#          number of samples     22293
#         number of outliers      1111
#    number of final samples     21182
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                244              46 |*                                             -
#               9179              47 |********************************              -
#               6196              48 |*********************                         -
#               1042              49 |***                                           -
#               1383              50 |****                                          -
#               1627              51 |*****                                         -
#                451              52 |*                                             -
#
#               1060           > 95% |***                                    53.02453
#
#        mean of 95%        48.04105
#          95th %ile              52
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: strlen
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strlen')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned strlen]
# notes: measures strlen()
          prc thr      nsecs/call      samples   errors cnt/samp     size
strlen_1k   1   1             254        18478        0     3596     1024
# bin/../bin-riscv64/strlen -N strlen_1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       247                        247
#                        max     25817                        283
#                       mean       264.23389                  257.77655
#                     median       255                        254*
#                     stddev       196.83471                    8.27017
#             standard error         1.41655                    0.06084
#       99% confidence level         3.64904                    0.15672
#                       skew       116.67668                    1.21377
#                   kurtosis     14835.35435                    0.28681
#           time correlation         0.00320                    0.00139
#
#               elapsed time        20.00400
#                   run time        18.15455
#          getnsecs overhead      1429
#
#          number of samples     19308
#         number of outliers       830
#    number of final samples     18478
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7             247 |*                                             -
#                 86             248 |*                                             -
#                369             249 |*****                                         -
#               1145             250 |****************                              -
#               2066             251 |******************************                -
#               2160             252 |********************************              -
#               1920             253 |****************************                  -
#               1708             254 |*************************                     -
#               1461             255 |*********************                         -
#               1119             256 |****************                              -
#                755             257 |***********                                   -
#                473             258 |*******                                       -
#                289             259 |****                                          -
#                220             260 |***                                           -
#                149             261 |**                                            -
#                123             262 |*                                             -
#                 76             263 |*                                             -
#                 87             264 |*                                             -
#                140             265 |**                                            -
#                272             266 |****                                          -
#                363             267 |*****                                         -
#                432             268 |******                                        -
#                403             269 |*****                                         -
#                432             270 |******                                        -
#                383             271 |*****                                         -
#                341             272 |*****                                         -
#                265             273 |***                                           -
#                227             274 |***                                           -
#                 83             275 |*                                             -
#
#                924           > 95% |*************                         278.36580
#
#        mean of 95%       256.69278
#          95th %ile             275
#
# Usage: strlen
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strlen')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-s string size (default 100)]
#     [-n causes unaligned strlen]
# notes: measures strlen()
       prc thr      nsecs/call      samples   errors cnt/samp 
strtol   1   1             101        21045        0     7369 
# bin/../bin-riscv64/strtol -N strtol -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min        97                         97
#                        max    116547                        113
#                       mean       114.22864                  102.69751
#                     median       102                        101*
#                     stddev       884.95837                    3.37430
#             standard error         5.87031                    0.02326
#       99% confidence level        15.12193                    0.05992
#                       skew       117.65910                    1.41597
#                   kurtosis     14463.72599                    0.89175
#           time correlation         0.00339                    0.00048
#
#               elapsed time        20.00453
#                   run time        17.52872
#          getnsecs overhead      1429
#
#          number of samples     22726
#         number of outliers      1681
#    number of final samples     21045
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1              97 |*                                             -
#                 59              98 |*                                             -
#                844              99 |****                                          -
#               3997             100 |*********************                         -
#               6048             101 |********************************              -
#               3932             102 |********************                          -
#               1397             103 |*******                                       -
#                515             104 |**                                            -
#                246             105 |*                                             -
#                253             106 |*                                             -
#                576             107 |***                                           -
#                856             108 |****                                          -
#                810             109 |****                                          -
#                458             110 |**                                            -
#
#               1053           > 95% |*****                                 111.46534
#
#        mean of 95%       102.23569
#          95th %ile             110
#
# WARNINGS
#     Quantization error likely; perhaps increasing batch size (-B option, currently 2) 1X will avoid this.
#
# Usage: strtol
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'strtol')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# note: measures strtol()
       prc thr      nsecs/call      samples   errors cnt/samp  command
system   1   1       104940071          199        0        1     A=$$
# bin/../bin-riscv64/system -N system -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min  69263371                   69263371
#                        max 188819371                  173400471
#                       mean 104256938.07500            103832001.22613
#                     median 109850271                  104940071*
#                     stddev  27958962.38378             27374347.75589
#             standard error   1976997.18965              1940516.06235
#       99% confidence level   5092744.76054              4998769.37662
#                       skew         0.42587                    0.35373
#                   kurtosis        -0.65571                   -0.87545
#           time correlation    460966.59114               455074.05922
#
#               elapsed time        21.00456
#                   run time        20.97908
#          getnsecs overhead      1429
#
#          number of samples       200
#         number of outliers         1
#    number of final samples       199
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7        69263371 |*****                            70920985.28571
#                 42        71922822 |******************************** 73262292.42857
#                 14        74582273 |**********                       75938649.57143
#                  5        77241724 |***                              78782131.00000
#                  6        79901175 |****                             81686437.66667
#                  5        82560626 |***                              84094971.00000
#                  5        85220077 |***                              86582931.00000
#                  0        87879528 |                                              -
#                  2        90538979 |*                                91138771.00000
#                  5        93198430 |***                              93949331.00000
#                  5        95857881 |***                              96906591.00000
#                  2        98517332 |*                                99880121.00000
#                  0       101176783 |                                              -
#                  2       103836234 |*                               104651771.00000
#                  0       106495685 |                                              -
#                  4       109155136 |***                             110505846.00000
#                  2       111814587 |*                               113722621.00000
#                  2       114474038 |*                               116221971.00000
#                  5       117133489 |***                             118865171.00000
#                 16       119792940 |************                    121303246.00000
#                 26       122452391 |*******************             123923694.07692
#                 11       125111842 |********                        126141899.63636
#                 12       127771293 |*********                       128981979.33333
#                  3       130430744 |**                              131829871.00000
#                  5       133090195 |***                             133988951.00000
#                  0       135749646 |                                              -
#                  1       138409097 |*                               140579771.00000
#                  0       141068548 |                                              -
#                  1       143727999 |*                               144588071.00000
#                  1       146387450 |*                               148571571.00000
#
#                 10           > 95% |*******                         164929941.00000
#
#        mean of 95% 100599306.00000
#          95th %ile       154365771
#
# Usage: system
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'system')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-c command (default A=$$)]
# notes: measures system()
     prc thr      nsecs/call      samples   errors cnt/samp 
time   1   1             125        19417        0     6977 
# bin/../bin-riscv64/time -N time -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min       118                        118
#                        max     33657                        140
#                       mean       131.35031                  126.01375
#                     median       125                        125*
#                     stddev       248.83684                    4.50473
#             standard error         1.74826                    0.03233
#       99% confidence level         4.50351                    0.08328
#                       skew       124.76361                    1.01766
#                   kurtosis     16436.57180                    0.22947
#           time correlation         0.00223                    0.00075
#
#               elapsed time        20.00448
#                   run time        18.03995
#          getnsecs overhead      1429
#
#          number of samples     20259
#         number of outliers       842
#    number of final samples     19417
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10             118 |*                                             -
#                 75             119 |*                                             -
#                457             120 |*****                                         -
#               1295             121 |***************                               -
#               2477             122 |*****************************                 -
#               2701             123 |********************************              -
#               2437             124 |****************************                  -
#               2058             125 |************************                      -
#               1481             126 |*****************                             -
#               1012             127 |***********                                   -
#                646             128 |*******                                       -
#                506             129 |*****                                         -
#                579             130 |******                                        -
#                675             131 |*******                                       -
#                651             132 |*******                                       -
#                571             133 |******                                        -
#                515             134 |******                                        -
#                300             135 |***                                           -
#
#                971           > 95% |***********                           137.11843
#
#        mean of 95%       125.42920
#          95th %ile             135
#
# Usage: time
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'time')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures time()
      prc thr      nsecs/call      samples   errors cnt/samp 
times   1   1           26732        16380        0       39 
# bin/../bin-riscv64/times -N times -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     24199                      24199
#                        max    210447                      32392
#                       mean     27562.78002                27135.03071
#                     median     26752                      26732*
#                     stddev      3825.07799                 1752.51147
#             standard error        29.35515                   13.69317
#       99% confidence level        75.61886                   35.27360
#                       skew        13.44443                    0.93311
#                   kurtosis       397.99144                   -0.02733
#           time correlation         0.45958                    0.34708
#
#               elapsed time        20.00431
#                   run time        18.51907
#          getnsecs overhead      1429
#
#          number of samples     16979
#         number of outliers       599
#    number of final samples     16380
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3           24199 |*                                   24261.00000
#                 11           24401 |*                                   24534.54545
#                 25           24603 |*                                   24718.56000
#                 77           24805 |*                                   24924.67532
#                673           25007 |*******                             25161.51114
#               2253           25209 |*************************           25308.18686
#               1429           25411 |****************                    25499.28202
#                509           25613 |*****                               25689.02161
#                138           25815 |*                                   25910.55797
#                128           26017 |*                                   26114.63281
#                122           26219 |*                                   26326.22131
#               1029           26421 |***********                         26563.49854
#               2852           26623 |********************************    26712.14586
#               1572           26825 |*****************                   26929.77417
#                677           27027 |*******                             27099.62629
#                178           27229 |*                                   27319.26404
#                116           27431 |*                                   27529.29310
#                164           27633 |*                                   27739.00610
#                219           27835 |**                                  27942.48402
#                267           28037 |**                                  28143.05618
#                248           28239 |**                                  28342.13710
#                205           28441 |**                                  28538.40488
#                186           28643 |**                                  28745.09140
#                210           28845 |**                                  28949.52381
#                263           29047 |**                                  29150.60076
#                311           29249 |***                                 29352.86495
#                407           29451 |****                                29555.64373
#                363           29653 |****                                29753.81267
#                315           29855 |***                                 29948.89524
#                236           30057 |**                                  30160.44492
#                204           30259 |**                                  30354.39216
#                171           30461 |*                                   30558.14035
#
#                819           > 95% |*********                           31329.44811
#
#        mean of 95%     26914.27190
#          95th %ile           30657
#
# Usage: times
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'times')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
# notes: measures times()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_a128k   1   1          122493        13070        0        4   131072   a---
# bin/../bin-riscv64/munmap -N unmap_a128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     92790                      92790
#                        max   2861218                     562534
#                       mean    217135.56342               202536.99594
#                     median    123234                     122493*
#                     stddev    174381.24277               120205.68175
#             standard error      1512.02030                 1051.44655
#       99% confidence level      3894.96429                 2708.52632
#                       skew         4.46794                    0.89516
#                   kurtosis        39.11525                   -0.84950
#           time correlation        32.93200                   27.85223
#
#               elapsed time        20.00424
#                   run time        13.34048
#          getnsecs overhead      1429
#
#          number of samples     13301
#         number of outliers       231
#    number of final samples     13070
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 34           92790 |*                                  100030.79412
#               2132          102883 |***************                    110225.94512
#               4467          112976 |********************************   116686.52899
#                859          123069 |******                             127717.87893
#                556          133162 |***                                137799.78058
#                244          143255 |*                                  147631.72131
#                151          153348 |*                                  158218.60265
#                120          163441 |*                                  168573.16667
#                 63          173534 |*                                  178058.55556
#                 55          183627 |*                                  188665.76364
#                 27          193720 |*                                  198086.92593
#                 22          203813 |*                                  208255.27273
#                 19          213906 |*                                  219264.52632
#                 18          223999 |*                                  229096.27778
#                 35          234092 |*                                  238481.71429
#                 51          244185 |*                                  249030.31373
#                 51          254278 |*                                  259283.23529
#                 62          264371 |*                                  269357.00000
#                 85          274464 |*                                  279344.38824
#                 68          284557 |*                                  288950.48529
#                 67          294650 |*                                  299953.23881
#                 80          304743 |*                                  310094.61250
#                133          314836 |*                                  320736.69925
#                276          324929 |*                                  330628.38768
#                432          335022 |***                                340117.60880
#                491          345115 |***                                350214.93279
#                406          355208 |**                                 359856.62315
#                373          365301 |**                                 370327.82842
#                361          375394 |**                                 380193.08587
#                300          385487 |**                                 390098.69333
#                223          395580 |*                                  400540.80269
#                155          405673 |*                                  410421.14839
#
#                654           > 95% |****                               455228.46636
#
#        mean of 95%    189226.73325
#          95th %ile          415734
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 66.7% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_a8k   1   1          122954        13181        0        4     8192   a---
# bin/../bin-riscv64/munmap -N unmap_a8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     92390                      92390
#                        max   3044745                     561168
#                       mean    213679.05227               200309.28678
#                     median    123674                     122954*
#                     stddev    163894.23316               120542.33604
#             standard error      1414.19565                 1049.94228
#       99% confidence level      3642.96800                 2704.65131
#                       skew         3.79376                    0.98091
#                   kurtosis        31.67373                   -0.66482
#           time correlation        31.77895                   27.38659
#
#               elapsed time        20.01083
#                   run time        13.11502
#          getnsecs overhead      1429
#
#          number of samples     13431
#         number of outliers       250
#    number of final samples     13181
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 20           92390 |*                                   99554.60000
#               2246          102636 |****************                   109906.64871
#               4365          112882 |********************************   117144.95578
#               1031          123128 |*******                            127464.78565
#                541          133374 |***                                138184.86876
#                339          143620 |**                                 147985.89971
#                187          153866 |*                                  158478.94118
#                109          164112 |*                                  169039.74312
#                 91          174358 |*                                  179504.19780
#                 60          184604 |*                                  188755.08333
#                 34          194850 |*                                  199403.38235
#                 32          205096 |*                                  210212.53125
#                 20          215342 |*                                  221792.10000
#                 20          225588 |*                                  231679.90000
#                 20          235834 |*                                  241323.45000
#                 28          246080 |*                                  251645.53571
#                 34          256326 |*                                  261769.73529
#                 45          266572 |*                                  271380.60000
#                 49          276818 |*                                  281629.83673
#                 52          287064 |*                                  291581.13462
#                 55          297310 |*                                  302448.61818
#                 69          307556 |*                                  312804.21739
#                195          317802 |*                                  323497.61538
#                370          328048 |**                                 333554.18649
#                478          338294 |***                                343288.95607
#                410          348540 |***                                353306.98049
#                316          358786 |**                                 363770.45886
#                349          369032 |**                                 374014.52149
#                327          379278 |**                                 384349.22018
#                265          389524 |*                                  395041.10566
#                196          399770 |*                                  405052.50000
#                168          410016 |*                                  415351.54762
#
#                660           > 95% |****                               461862.06212
#
#        mean of 95%    186522.46210
#          95th %ile          420254
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 65.5% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_ra128k   1   1          388236         7575        0        2   131072   ar--
# bin/../bin-riscv64/munmap -N unmap_ra128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    143736                     143736
#                        max   3176286                     690186
#                       mean    419433.75185               387722.61901
#                     median    396336                     388236*
#                     stddev    162504.50996               100855.46060
#             standard error      1804.26966                 1158.79896
#       99% confidence level      4647.79866                 2985.06613
#                       skew         2.73531                    0.57271
#                   kurtosis        19.00019                   -0.05643
#           time correlation        58.62721                   44.75579
#
#               elapsed time        20.00430
#                   run time         6.96225
#          getnsecs overhead      1429
#
#          number of samples      8112
#         number of outliers       537
#    number of final samples      7575
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 12          143736 |*                                  149249.25000
#                  9          157335 |*                                  163263.33333
#                 20          170934 |*                                  177320.75000
#                 11          184533 |*                                  190121.09091
#                  7          198132 |*                                  205172.57143
#                 15          211731 |*                                  217925.73333
#                 63          225330 |***                                233233.61905
#                117          238929 |******                             246341.21368
#                275          252528 |**************                     259943.42909
#                577          266127 |*******************************    273351.76603
#                588          279726 |********************************   286415.95578
#                536          293325 |*****************************      299820.83022
#                355          306924 |*******************                313324.54085
#                202          320523 |**********                         326519.09901
#                200          334122 |**********                         341093.39500
#                188          347721 |**********                         354490.67553
#                252          361320 |*************                      367979.71825
#                366          374919 |*******************                382265.29235
#                487          388518 |**************************         395818.21561
#                468          402117 |*************************          409085.36538
#                424          415716 |***********************            422436.04009
#                369          429315 |********************               436300.05149
#                314          442914 |*****************                  449124.00637
#                278          456513 |***************                    463164.07914
#                231          470112 |************                       476807.51948
#                207          483711 |***********                        490232.98068
#                151          497310 |********                           504067.12583
#                120          510909 |******                             517749.57500
#                119          524508 |******                             531119.98319
#                 78          538107 |****                               544997.85897
#                 74          551706 |****                               558251.54054
#                 83          565305 |****                               571726.01205
#
#                379           > 95% |********************               629065.03694
#
#        mean of 95%    375011.56059
#          95th %ile          578886
#
# WARNINGS
#     Actual benchmark run time only accounts for 34.8% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_ra8k   1   1          351286        13693        0        2     8192   ar--
# bin/../bin-riscv64/munmap -N unmap_ra8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    163193                     163193
#                        max   3771086                     631986
#                       mean    411308.16740               352111.26780
#                     median    372036                     351286*
#                     stddev    197609.10095                93344.96982
#             standard error      1581.37893                  797.70372
#       99% confidence level      4073.63212                 2054.88477
#                       skew         2.82480                    0.45003
#                   kurtosis        16.63922                   -0.24963
#           time correlation        36.11785                   23.13051
#
#               elapsed time        20.00423
#                   run time        13.07535
#          getnsecs overhead      1429
#
#          number of samples     15615
#         number of outliers      1922
#    number of final samples     13693
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 48          163193 |**                                 169823.64583
#                 37          174334 |*                                  178289.94595
#                 25          185475 |*                                  191347.24000
#                129          196616 |******                             203339.02326
#                320          207757 |***************                    214034.91250
#                562          218898 |**************************         224900.99288
#                643          230039 |******************************     235503.39813
#                573          241180 |***************************        246719.43979
#                563          252321 |**************************         257863.54174
#                539          263462 |*************************          269054.11874
#                555          274603 |**************************         279961.01982
#                587          285744 |***************************        291380.27257
#                576          296885 |***************************        302407.56597
#                496          308026 |***********************            313366.41532
#                413          319167 |*******************                324845.10412
#                405          330308 |*******************                335855.38519
#                424          341449 |********************               347294.73821
#                511          352590 |************************           358253.16634
#                539          363731 |*************************          369506.86456
#                635          374872 |******************************     380593.69606
#                629          386013 |*****************************      391524.99046
#                672          397154 |********************************   402869.93750
#                606          408295 |****************************       413785.89274
#                596          419436 |****************************       424907.57550
#                481          430577 |**********************             435817.85239
#                408          441718 |*******************                446771.69608
#                284          452859 |*************                      458146.47535
#                189          464000 |*********                          469463.77778
#                165          475141 |*******                            480473.01212
#                160          486282 |*******                            491968.18750
#                129          497423 |******                             502590.94574
#                109          508564 |*****                              514155.54128
#
#                685           > 95% |********************************   569073.60146
#
#        mean of 95%    340686.05266
#          95th %ile          519686
#
# WARNINGS
#     Actual benchmark run time only accounts for 65.4% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_rt128k   1   1          383436         5424        0        2   131072   -r--
# bin/../bin-riscv64/munmap -N unmap_rt128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    147171                     168690
#                        max   3106857                     622890
#                       mean    424115.35467               395289.21202
#                     median    389236                     383436*
#                     stddev    137060.05123                75868.93796
#             standard error      1793.20571                 1030.15877
#       99% confidence level      4619.29791                 2653.68899
#                       skew         3.38939                    0.53501
#                   kurtosis        31.76460                    0.58802
#           time correlation        64.89730                   45.88149
#
#               elapsed time        20.00600
#                   run time         5.22945
#          getnsecs overhead      1429
#
#          number of samples      5842
#         number of outliers       418
#    number of final samples      5424
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 19          168690 |*                                  174707.47368
#                 14          180470 |*                                  186012.00000
#                 11          192250 |*                                  196674.72727
#                  5          204030 |*                                  208773.00000
#                  1          215810 |*                                  216190.00000
#                  5          227590 |*                                  233606.20000
#                 21          239370 |*                                  246626.90476
#                 18          251150 |*                                  258409.50000
#                 56          262930 |***                                270562.30357
#                195          274710 |************                       280851.30256
#                151          286490 |*********                          292167.98675
#                 91          298270 |*****                              304256.39560
#                108          310050 |******                             316491.50926
#                131          321830 |********                           328469.32824
#                293          333610 |******************                 340120.06143
#                518          345390 |********************************   351570.07722
#                492          357170 |******************************     362892.26016
#                473          368950 |*****************************      375061.53277
#                447          380730 |***************************        386609.42506
#                381          392510 |***********************            398142.84252
#                337          404290 |********************               409554.18991
#                238          416070 |**************                     421743.86555
#                177          427850 |**********                         433748.19774
#                166          439630 |**********                         445429.90361
#                139          451410 |********                           457402.54676
#                118          463190 |*******                            469261.54237
#                123          474970 |*******                            480731.06504
#                 90          486750 |*****                              492599.10000
#                103          498530 |******                             503803.29126
#                 85          510310 |*****                              515655.07059
#                 82          522090 |*****                              527762.43902
#                 64          533870 |***                                538852.17188
#
#                272           > 95% |****************                   579180.63603
#
#        mean of 95%    385580.65858
#          95th %ile          545636
#
# WARNINGS
#     Actual benchmark run time only accounts for 26.1% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_rt8k   1   1          374086        10776        0        2     8192   -r--
# bin/../bin-riscv64/munmap -N unmap_rt8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    108393                     203134
#                        max   2180636                     554486
#                       mean    446849.54100               376615.23209
#                     median    387486                     374086*
#                     stddev    182347.00754                59292.37052
#             standard error      1580.85196                  571.17609
#       99% confidence level      4072.27464                 1471.34962
#                       skew         2.29751                    0.44478
#                   kurtosis         8.37279                    0.54755
#           time correlation        38.66844                   18.21852
#
#               elapsed time        20.00454
#                   run time        12.11904
#          getnsecs overhead      1429
#
#          number of samples     13305
#         number of outliers      2529
#    number of final samples     10776
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 10          203134 |*                                  206495.00000
#                  9          212147 |*                                  217750.00000
#                 20          221160 |*                                  225378.80000
#                 26          230173 |*                                  234668.57692
#                 43          239186 |*                                  243687.97674
#                 55          248199 |**                                 252820.87273
#                 82          257212 |***                                261362.08537
#                116          266225 |****                               271261.81897
#                153          275238 |*****                              280345.90196
#                225          284251 |********                           288855.66667
#                260          293264 |*********                          298047.74615
#                358          302277 |*************                      307187.39665
#                398          311290 |***************                    315825.28141
#                437          320303 |****************                   324822.05492
#                478          329316 |******************                 333862.77406
#                520          338329 |*******************                342954.04231
#                655          347342 |*************************          352198.26107
#                779          356355 |*****************************      360913.61746
#                789          365368 |******************************     369861.76046
#                749          374381 |****************************       378992.46595
#                836          383394 |********************************   387961.11603
#                750          392407 |****************************       396742.31867
#                610          401420 |***********************            405719.81311
#                450          410433 |*****************                  414631.80667
#                305          419446 |***********                        423370.92131
#                236          428459 |*********                          432875.63559
#                196          437472 |*******                            441769.41837
#                186          446485 |*******                            451187.66129
#                163          455498 |******                             460043.13497
#                135          464511 |*****                              469286.92593
#                102          473524 |***                                478165.94118
#                106          482537 |****                               486995.57547
#
#                539           > 95% |********************               522352.37477
#
#        mean of 95%    368941.85904
#          95th %ile          491536
#
# WARNINGS
#     Actual benchmark run time only accounts for 60.6% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_rz128k   1   1          302957         6002        0        2   131072   -r--
# bin/../bin-riscv64/munmap -N unmap_rz128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -r -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    107629                     168662
#                        max   1852136                     471424
#                       mean    335614.36919               318854.19194
#                     median    305390                     302957*
#                     stddev    105939.90350                51006.86334
#             standard error      1303.14186                  658.38605
#       99% confidence level      3356.89344                 1696.00247
#                       skew         3.82382                    0.87481
#                   kurtosis        31.40154                    0.46524
#           time correlation        42.04380                   27.56442
#
#               elapsed time        20.00391
#                   run time         6.07062
#          getnsecs overhead      1429
#
#          number of samples      6609
#         number of outliers       607
#    number of final samples      6002
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  6          168662 |*                                  171801.00000
#                  5          176736 |*                                  180796.80000
#                  1          184810 |*                                  189479.00000
#                  5          192884 |*                                  198472.00000
#                  9          200958 |*                                  205810.55556
#                 15          209032 |*                                  213961.86667
#                 21          217106 |*                                  220628.28571
#                 26          225180 |*                                  229313.57692
#                 44          233254 |*                                  237697.52273
#                 77          241328 |***                                245622.57143
#                104          249402 |****                               254034.83654
#                205          257476 |********                           261490.40488
#                267          265550 |***********                        269584.37453
#                366          273624 |***************                    278023.06557
#                656          281698 |***************************        285925.53811
#                771          289772 |********************************   293813.99222
#                613          297846 |*************************          301530.57912
#                373          305920 |***************                    309704.79625
#                304          313994 |************                       318123.09211
#                218          322068 |*********                          325881.39908
#                230          330142 |*********                          334462.86522
#                189          338216 |*******                            342051.04233
#                196          346290 |********                           350536.29592
#                165          354364 |******                             358433.38182
#                141          362438 |*****                              366841.47518
#                132          370512 |*****                              374303.15909
#                126          378586 |*****                              382409.56349
#                105          386660 |****                               390383.18095
#                107          394734 |****                               398658.04673
#                 74          402808 |***                                406777.70270
#                 81          410882 |***                                415440.40741
#                 69          418956 |**                                 422627.98551
#
#                301           > 95% |************                       446353.05316
#
#        mean of 95%    312122.53833
#          95th %ile          427024
#
# WARNINGS
#     Actual benchmark run time only accounts for 30.3% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_rz8k   1   1          359236        12959        0        2     8192   -r--
# bin/../bin-riscv64/munmap -N unmap_rz8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -r -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    100393                     161357
#                        max   2410436                     554436
#                       mean    400658.59535               356396.39579
#                     median    366736                     359236*
#                     stddev    162690.02743                66022.93651
#             standard error      1334.28702                  579.97476
#       99% confidence level      3437.12337                 1494.01497
#                       skew         3.09782                    0.23795
#                   kurtosis        17.79076                    0.65861
#           time correlation        29.47932                   16.79123
#
#               elapsed time        20.01200
#                   run time        12.56082
#          getnsecs overhead      1429
#
#          number of samples     14867
#         number of outliers      1908
#    number of final samples     12959
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          161357 |*                                  164717.00000
#                 16          171265 |*                                  176917.43750
#                 43          181173 |*                                  185399.67442
#                 59          191081 |*                                  196178.84746
#                 84          200989 |**                                 206014.00000
#                131          210897 |***                                215879.46565
#                131          220805 |***                                225772.16031
#                143          230713 |****                               235862.87413
#                131          240621 |***                                245911.10687
#                185          250529 |*****                              255544.45946
#                216          260437 |******                             265426.75463
#                267          270345 |*******                            275353.71536
#                348          280253 |*********                          285463.31034
#                570          290161 |****************                   295243.64737
#                641          300069 |******************                 304980.27457
#                567          309977 |***************                    314696.89418
#                624          319885 |*****************                  324835.97596
#                674          329793 |******************                 334931.69733
#                749          339701 |*********************              344792.03338
#                917          349609 |*************************          354644.51145
#               1071          359517 |******************************     364717.41083
#               1138          369425 |********************************   374240.46749
#               1075          379333 |******************************     384207.45023
#                773          389241 |*********************              393736.30272
#                425          399149 |***********                        403540.55059
#                244          409057 |******                             414152.81967
#                235          418965 |******                             423439.77872
#                219          428873 |******                             434061.48402
#                181          438781 |*****                              443845.12707
#                195          448689 |*****                              453434.81538
#                147          458597 |****                               463189.45578
#                108          468505 |***                                473134.11111
#
#                648           > 95% |******************                 515230.57407
#
#        mean of 95%    348036.02315
#          95th %ile          478386
#
# WARNINGS
#     Actual benchmark run time only accounts for 62.8% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_t128k   1   1           48929         7622        0       12   131072   ----
# bin/../bin-riscv64/munmap -N unmap_t128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     39543                      39543
#                        max   1059505                     195859
#                       mean     75837.65068                71065.48714
#                     median     49167                      48929*
#                     stddev     59932.89088                41683.57472
#             standard error       680.57239                  477.45284
#       99% confidence level      1753.15447                 1229.91852
#                       skew         4.98009                    1.43008
#                   kurtosis        47.82139                    0.39664
#           time correlation        18.07158                   15.18989
#
#               elapsed time        20.01049
#                   run time         7.52936
#          getnsecs overhead      1429
#
#          number of samples      7755
#         number of outliers       133
#    number of final samples      7622
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                208           39543 |**                                  42603.00000
#               2764           43327 |********************************    45268.24674
#               1423           47111 |****************                    48717.67533
#                539           50895 |******                              52479.26531
#                394           54679 |****                                56527.29188
#                211           58463 |**                                  60241.90047
#                144           62247 |*                                   63907.72917
#                 86           66031 |*                                   67841.33721
#                 53           69815 |*                                   71597.84906
#                 32           73599 |*                                   75646.75000
#                 23           77383 |*                                   78830.43478
#                 15           81167 |*                                   83080.93333
#                 11           84951 |*                                   86238.72727
#                 13           88735 |*                                   90697.38462
#                  6           92519 |*                                   94860.33333
#                 18           96303 |*                                   98279.88889
#                 22          100087 |*                                  101870.95455
#                 29          103871 |*                                  105650.89655
#                 35          107655 |*                                  109536.28571
#                 42          111439 |*                                  113432.52381
#                 42          115223 |*                                  117071.71429
#                 36          119007 |*                                  121065.44444
#                 27          122791 |*                                  124501.92593
#                 52          126575 |*                                  128697.46154
#                 98          130359 |*                                  132539.01020
#                148          134143 |*                                  136084.14865
#                174          137927 |**                                 139842.76437
#                110          141711 |*                                  143537.69091
#                123          145495 |*                                  147600.05691
#                128          149279 |*                                  151043.65625
#                137          153063 |*                                  154785.02920
#                 97          156847 |*                                  158590.75258
#
#                382           > 95% |****                               172109.39005
#
#        mean of 95%     65734.16519
#          95th %ile          160605
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 37.6% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_t8k   1   1           48144         7988        0       12     8192   ----
# bin/../bin-riscv64/munmap -N unmap_t8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     39697                      39697
#                        max   1095334                     186321
#                       mean     73639.81722                67930.53393
#                     median     48382                      48144*
#                     stddev     59570.55904                39560.24957
#             standard error       658.24827                  442.62913
#       99% confidence level      1695.64754                 1140.21265
#                       skew         5.35257                    1.62075
#                   kurtosis        54.67777                    0.97744
#           time correlation        16.44091                   13.28589
#
#               elapsed time        20.00913
#                   run time         7.52232
#          getnsecs overhead      1429
#
#          number of samples      8190
#         number of outliers       202
#    number of final samples      7988
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                429           39697 |****                                42654.04662
#               3053           43404 |********************************    45124.38945
#               1284           47111 |*************                       48632.75779
#                555           50818 |*****                               52614.47387
#                423           54525 |****                                56220.77778
#                264           58232 |**                                  59859.36364
#                166           61939 |*                                   63588.54819
#                 94           65646 |*                                   67277.74468
#                 74           69353 |*                                   71001.74324
#                 36           73060 |*                                   74963.77778
#                 24           76767 |*                                   78360.12500
#                 17           80474 |*                                   81962.88235
#                 16           84181 |*                                   85692.81250
#                 16           87888 |*                                   90402.25000
#                 14           91595 |*                                   93859.71429
#                 10           95302 |*                                   96665.10000
#                 23           99009 |*                                  100974.69565
#                 15          102716 |*                                  104701.80000
#                 20          106423 |*                                  108535.05000
#                 34          110130 |*                                  112058.85294
#                 30          113837 |*                                  115634.53333
#                 23          117544 |*                                  119379.86957
#                 17          121251 |*                                  123491.35294
#                 35          124958 |*                                  126617.82857
#                 56          128665 |*                                  130670.69643
#                103          132372 |*                                  134405.30097
#                154          136079 |*                                  137879.90909
#                125          139786 |*                                  141624.58400
#                136          143493 |*                                  145468.90441
#                124          147200 |*                                  148958.73387
#                114          150907 |*                                  152570.05263
#                104          154614 |*                                  156689.21154
#
#                400           > 95% |****                               168676.38000
#
#        mean of 95%     62619.73550
#          95th %ile          158313
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 37.6% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_wa128k   1   1          518571         8473        0        1   131072   a-w-
# bin/../bin-riscv64/munmap -N unmap_wa128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    210871                     236171
#                        max   3312671                     858271
#                       mean    585752.43160               544123.26897
#                     median    523071                     518571*
#                     stddev    184699.47017               104801.52540
#             standard error      1926.04384                 1138.54185
#       99% confidence level      4961.48893                 2932.88382
#                       skew         2.50019                    0.86608
#                   kurtosis        11.44192                    0.47861
#           time correlation        57.15160                   40.25510
#
#               elapsed time        20.00528
#                   run time         5.45289
#          getnsecs overhead      1429
#
#          number of samples      9196
#         number of outliers       723
#    number of final samples      8473
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          236171 |*                                  241046.00000
#                  1          252709 |*                                  265671.00000
#                  2          269247 |*                                  275171.00000
#                  4          285785 |*                                  295446.00000
#                  8          302323 |*                                  311521.00000
#                 21          318861 |*                                  328913.85714
#                 18          335399 |*                                  344475.44444
#                 34          351937 |*                                  359844.52941
#                 65          368475 |*                                  376632.46154
#                221          385013 |******                             394723.78281
#                300          401551 |********                           409672.31667
#                329          418089 |*********                          427041.83587
#                350          434627 |*********                          442580.92857
#                369          451165 |**********                         459767.09756
#                531          467703 |**************                     476620.48211
#                742          484241 |********************               492950.44070
#               1139          500779 |********************************   510060.13521
#               1062          517317 |*****************************      524610.16667
#                466          533855 |*************                      540813.61803
#                235          550393 |******                             557734.82979
#                161          566931 |****                               574996.52795
#                211          583469 |*****                              592148.32227
#                292          600007 |********                           608610.77740
#                266          616545 |*******                            624192.10902
#                216          633083 |******                             641434.42593
#                202          649621 |*****                              657321.49505
#                215          666159 |******                             674048.27907
#                174          682697 |****                               691129.41954
#                148          699235 |****                               707427.75676
#                118          715773 |***                                722874.38983
#                 71          732311 |*                                  740963.95775
#                 74          748849 |**                                 756621.00000
#
#                424           > 95% |***********                        810101.81368
#
#        mean of 95%    530112.22375
#          95th %ile          765371
#
# WARNINGS
#     Actual benchmark run time only accounts for 27.3% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_wa8k   1   1          412671        16266        0        1     8192   a-w-
# bin/../bin-riscv64/munmap -N unmap_wa8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f MAP_ANON 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    185071                     185071
#                        max   3759371                     821171
#                       mean    500186.39884               450837.94209
#                     median    421071                     412671*
#                     stddev    217599.67327               123546.85196
#             standard error      1636.08777                  968.70446
#       99% confidence level      4214.56209                 2495.38269
#                       skew         2.73581                    1.32447
#                   kurtosis        13.13834                    1.23260
#           time correlation        33.94758                   23.52367
#
#               elapsed time        20.00805
#                   run time        11.91099
#          getnsecs overhead      1429
#
#          number of samples     17689
#         number of outliers      1423
#    number of final samples     16266
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11          185071 |*                                  196617.81818
#                 15          202815 |*                                  214215.33333
#                 18          220559 |*                                  231262.11111
#                 67          238303 |*                                  249521.82090
#                130          256047 |*                                  265290.46154
#                230          273791 |***                                283587.36957
#                397          291535 |*****                              300855.45844
#                474          309279 |******                             317882.97257
#                695          327023 |**********                         337063.50360
#               1070          344767 |***************                    353700.24299
#               1049          362511 |***************                    371649.83222
#               2171          380255 |********************************   390351.85214
#               2084          397999 |******************************     405889.43810
#               1248          415743 |******************                 424057.90705
#                963          433487 |**************                     442147.67186
#                979          451231 |**************                     459974.68233
#                747          468975 |***********                        477159.62115
#                494          486719 |*******                            494768.23684
#                317          504463 |****                               513110.85804
#                306          522207 |****                               531034.02288
#                282          539951 |****                               548755.62766
#                256          557695 |***                                566378.65625
#                161          575439 |**                                 583497.58385
#                136          593183 |**                                 600324.41912
#                107          610927 |*                                  619519.92523
#                122          628671 |*                                  638049.60656
#                108          646415 |*                                  655312.94444
#                121          664159 |*                                  673818.56198
#                136          681903 |**                                 690921.22059
#                116          699647 |*                                  708260.13793
#                162          717391 |**                                 727541.03086
#                280          735135 |****                               744302.19643
#
#                814           > 95% |***********                        781140.33661
#
#        mean of 95%    433437.85478
#          95th %ile          752871
#
# WARNINGS
#     Actual benchmark run time only accounts for 59.5% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_wt128k   1   1          459886         4230        0        2   131072   --w-
# bin/../bin-riscv64/munmap -N unmap_wt128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    216571                     216571
#                        max   1629686                     770236
#                       mean    483294.43545               465910.57612
#                     median    461786                     459886*
#                     stddev    137726.35809               101571.13449
#             standard error      2080.08839                 1561.70902
#       99% confidence level      5358.30770                 4022.96244
#                       skew         1.77776                    0.21493
#                   kurtosis         6.54895                    0.45869
#           time correlation        93.59161                   78.48871
#
#               elapsed time        20.00446
#                   run time         4.39014
#          getnsecs overhead      1429
#
#          number of samples      4384
#         number of outliers       154
#    number of final samples      4230
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  4          216571 |*                                  224496.00000
#                  5          230306 |*                                  236831.00000
#                 25          244041 |*                                  254129.68000
#                130          257776 |******                             265651.58462
#                135          271511 |******                             277738.95556
#                 73          285246 |***                                291591.83562
#                 39          298981 |*                                  305851.53846
#                 29          312716 |*                                  319489.06897
#                 31          326451 |*                                  331511.96774
#                 36          340186 |*                                  348857.38889
#                129          353921 |******                             362781.22481
#                149          367656 |*******                            374286.06711
#                 96          381391 |****                               388232.94792
#                 84          395126 |****                               401195.67857
#                 73          408861 |***                                416261.00000
#                138          422596 |******                             430326.73913
#                417          436331 |********************               444690.21103
#                657          450066 |********************************   456005.24353
#                316          463801 |***************                    470137.96835
#                307          477536 |**************                     484784.05863
#                269          491271 |*************                      496958.19703
#                119          505006 |*****                              511536.42017
#                103          518741 |*****                              525617.64078
#                 99          532476 |****                               539519.01010
#                107          546211 |*****                              553438.42056
#                 84          559946 |****                               566340.41667
#                 92          573681 |****                               580104.31522
#                 75          587416 |***                                594084.05333
#                 64          601151 |***                                607919.40625
#                 53          614886 |**                                 623348.26415
#                 46          628621 |**                                 634275.13043
#                 34          642356 |*                                  648844.82353
#
#                212           > 95% |**********                         704169.66981
#
#        mean of 95%    453339.41439
#          95th %ile          656086
#
# WARNINGS
#     Actual benchmark run time only accounts for 21.9% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_wt8k   1   1          422886        10864        0        1     8192   --w-
# bin/../bin-riscv64/munmap -N unmap_wt8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    142386                     238486
#                        max   3111836                     610786
#                       mean    501164.20903               424408.07299
#                     median    433486                     422886*
#                     stddev    208324.59538                62189.38427
#             standard error      1823.55410                  596.65238
#       99% confidence level      4697.47536                 1536.97653
#                       skew         2.76965                    0.29481
#                   kurtosis        12.43024                    0.66620
#           time correlation        42.63085                   18.81703
#
#               elapsed time        20.00466
#                   run time        11.64479
#          getnsecs overhead      1429
#
#          number of samples     13051
#         number of outliers      2187
#    number of final samples     10864
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  3          238486 |*                                  241342.66667
#                 18          247970 |*                                  253009.88889
#                 40          257454 |*                                  262735.37500
#                 39          266938 |*                                  272386.64103
#                 76          276422 |**                                 282131.19737
#                 63          285906 |**                                 291081.23810
#                 92          295390 |***                                300210.94565
#                107          304874 |***                                309998.14953
#                136          314358 |****                               319401.22059
#                167          323842 |*****                              328817.88623
#                230          333326 |*******                            338166.97826
#                238          342810 |********                           347528.50000
#                331          352294 |***********                        357195.56193
#                346          361778 |***********                        367047.44509
#                379          371262 |************                       376072.86016
#                457          380746 |***************                    385611.89716
#                607          390230 |********************               395251.56837
#                768          399714 |**************************         404640.05599
#                933          409198 |********************************   414014.59057
#                910          418682 |*******************************    423431.39560
#                919          428166 |*******************************    432861.14146
#                891          437650 |******************************     442044.98990
#                617          447134 |*********************              451514.43598
#                445          456618 |***************                    460997.32584
#                304          466102 |**********                         470503.91118
#                202          475586 |******                             480129.14356
#                209          485070 |*******                            489983.60766
#                201          494554 |******                             498970.55224
#                171          504038 |*****                              509116.64327
#                165          513522 |*****                              518186.54545
#                133          523006 |****                               527346.45113
#                123          532490 |****                               536916.44715
#
#                544           > 95% |******************                 573227.88603
#
#        mean of 95%    416563.30766
#          95th %ile          541971
#
# WARNINGS
#     Actual benchmark run time only accounts for 58.2% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
             prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_wz128k   1   1          445671         7056        0        1   131072   --w-
# bin/../bin-riscv64/munmap -N unmap_wz128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -w -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    302471                     302471
#                        max   2113471                     647971
#                       mean    519787.91564               459264.34821
#                     median    465471                     445671*
#                     stddev    171654.45839                62953.75953
#             standard error      1881.77341                  749.44952
#       99% confidence level      4847.44830                 1930.58196
#                       skew         2.54509                    0.72363
#                   kurtosis         8.68209                    0.29841
#           time correlation        56.69019                   29.57021
#
#               elapsed time        20.00546
#                   run time         5.14170
#          getnsecs overhead      1429
#
#          number of samples      8321
#         number of outliers      1265
#    number of final samples      7056
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5          302471 |*                                  308070.00000
#                  7          311397 |*                                  318543.85714
#                 20          320323 |*                                  326030.25000
#                 30          329249 |*                                  333954.66667
#                 33          338175 |*                                  343256.75758
#                 57          347101 |**                                 352127.40351
#                104          356027 |****                               360963.25962
#                121          364953 |*****                              369659.71901
#                154          373879 |*******                            378343.53247
#                173          382805 |********                           387384.69942
#                245          391731 |***********                        396696.59184
#                454          400657 |*********************              405379.38106
#                528          409583 |*************************          414020.91477
#                668          418509 |********************************   422925.62575
#                541          427435 |*************************          431823.10721
#                375          436361 |*****************                  440370.54667
#                281          445287 |*************                      449640.05694
#                273          454213 |*************                      458772.02564
#                354          463139 |****************                   467669.71469
#                408          472065 |*******************                476539.50490
#                319          480991 |***************                    485151.10972
#                274          489917 |*************                      494471.93066
#                213          498843 |**********                         502948.32394
#                222          507769 |**********                         512098.59009
#                175          516695 |********                           520928.65714
#                150          525621 |*******                            530098.63333
#                131          534547 |******                             538514.74046
#                 81          543473 |***                                547587.11111
#                 73          552399 |***                                556435.38356
#                 98          561325 |****                               566136.61224
#                 73          570251 |***                                573985.24658
#                 63          579177 |***                                582807.58730
#
#                353           > 95% |****************                   615491.90652
#
#        mean of 95%    451036.93839
#          95th %ile          588071
#
# WARNINGS
#     Actual benchmark run time only accounts for 25.7% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
           prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_wz8k   1   1          404071        11385        0        1     8192   --w-
# bin/../bin-riscv64/munmap -N unmap_wz8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -w -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    141718                     248571
#                        max   3244871                     563171
#                       mean    500517.58876               404958.58691
#                     median    417236                     404071*
#                     stddev    224643.27676                52856.90541
#             standard error      1850.56191                  495.37629
#       99% confidence level      4767.04748                 1276.08932
#                       skew         2.45085                    0.21288
#                   kurtosis        10.27982                    0.73151
#           time correlation        41.93782                   15.24971
#
#               elapsed time        20.01174
#                   run time        11.40495
#          getnsecs overhead      1429
#
#          number of samples     14736
#         number of outliers      3351
#    number of final samples     11385
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 26          248571 |*                                  253074.07692
#                 44          256602 |*                                  261119.18182
#                 50          264633 |*                                  268696.38000
#                 42          272664 |*                                  276876.04762
#                 41          280695 |*                                  284731.95122
#                 67          288726 |**                                 292722.10448
#                 83          296757 |**                                 301036.26506
#                136          304788 |****                               308917.61765
#                165          312819 |****                               316998.25455
#                184          320850 |*****                              324881.21196
#                196          328881 |*****                              333220.48980
#                274          336912 |********                           341337.04380
#                350          344943 |**********                         349060.74286
#                413          352974 |************                       357209.88378
#                431          361005 |*************                      364994.59165
#                445          369036 |*************                      373127.43820
#                568          377067 |*****************                  381249.76585
#                742          385098 |**********************             389286.05526
#               1058          393129 |********************************   397154.49716
#                990          401160 |*****************************      405098.98586
#                866          409191 |**************************         413043.31062
#                801          417222 |************************           421160.78777
#                752          425253 |**********************             429043.36968
#                557          433284 |****************                   437087.64452
#                393          441315 |***********                        444998.54453
#                264          449346 |*******                            453109.67803
#                210          457377 |******                             460967.68095
#                151          465408 |****                               469439.98013
#                140          473439 |****                               477524.27143
#                122          481470 |***                                485727.74590
#                131          489501 |***                                493373.74809
#                123          497532 |***                                501491.02439
#
#                570           > 95% |*****************                  530980.54912
#
#        mean of 95%    398316.65270
#          95th %ile          505536
#
# WARNINGS
#     Actual benchmark run time only accounts for 57.0% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
            prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_z128k   1   1           48890         8018        0       12   131072   ----
# bin/../bin-riscv64/munmap -N unmap_z128k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 128k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     41147                      41147
#                        max   1098881                     185767
#                       mean     75682.20294                68517.08705
#                     median     49248                      48890*
#                     stddev     60943.16096                39101.57259
#             standard error       669.01871                  436.67789
#       99% confidence level      1723.39219                 1124.88223
#                       skew         4.94511                    1.60570
#                   kurtosis        46.70422                    0.94030
#           time correlation        16.92473                   13.15235
#
#               elapsed time        20.01028
#                   run time         7.68122
#          getnsecs overhead      1429
#
#          number of samples      8298
#         number of outliers       280
#    number of final samples      8018
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#               1068           41147 |************                        44030.09270
#               2762           44781 |********************************    46333.22556
#               1002           48415 |***********                         49977.24152
#                550           52049 |******                              53865.57273
#                415           55683 |****                                57335.95663
#                246           59317 |**                                  61130.62195
#                146           62951 |*                                   64566.07534
#                 86           66585 |*                                   68270.96512
#                 64           70219 |*                                   71896.90625
#                 42           73853 |*                                   75763.69048
#                 31           77487 |*                                   79073.54839
#                 15           81121 |*                                   82441.13333
#                 15           84755 |*                                   86777.13333
#                  9           88389 |*                                   89976.66667
#                 12           92023 |*                                   94258.50000
#                 12           95657 |*                                   97901.91667
#                 23           99291 |*                                  101317.04348
#                 19          102925 |*                                  104844.26316
#                 31          106559 |*                                  108553.32258
#                 41          110193 |*                                  112041.60976
#                 32          113827 |*                                  115662.90625
#                 33          117461 |*                                  119260.21212
#                 29          121095 |*                                  122824.93103
#                 27          124729 |*                                  126789.77778
#                 38          128363 |*                                  130377.23684
#                103          131997 |*                                  134107.84466
#                165          135631 |*                                  137467.67879
#                150          139265 |*                                  140952.70000
#                106          142899 |*                                  144666.34906
#                106          146533 |*                                  148519.11321
#                118          150167 |*                                  151963.48305
#                121          153801 |*                                  155718.46281
#
#                401           > 95% |****                               167840.26434
#
#        mean of 95%     63288.17881
#          95th %ile          157429
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#     Actual benchmark run time only accounts for 38.4% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
          prc thr      nsecs/call      samples   errors cnt/samp   length  flags
unmap_z8k   1   1           49005         7690        0       12     8192   ----
# bin/../bin-riscv64/munmap -N unmap_z8k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -l 8k -f /dev/zero 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     40116                      40116
#                        max   1548598                     178347
#                       mean     74509.14241                67056.84317
#                     median     49413                      49005*
#                     stddev     62071.58520                37201.22609
#             standard error       695.89778                  424.22288
#       99% confidence level      1792.63267                 1092.79813
#                       skew         5.89502                    1.70430
#                   kurtosis        71.63233                    1.31209
#           time correlation        17.16770                   12.92771
#
#               elapsed time        20.00906
#                   run time         7.58176
#          getnsecs overhead      1429
#
#          number of samples      7956
#         number of outliers       266
#    number of final samples      7690
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                347           40116 |****                                42967.91643
#               2694           43718 |********************************    45517.86080
#               1378           47320 |****************                    48846.28157
#                620           50922 |*******                             52530.69516
#                414           54524 |****                                56225.14493
#                282           58126 |***                                 59861.78369
#                215           61728 |**                                  63509.85116
#                 96           65330 |*                                   66986.07292
#                 89           68932 |*                                   70768.89888
#                 51           72534 |*                                   74401.82353
#                 40           76136 |*                                   77577.22500
#                 28           79738 |*                                   81549.46429
#                 21           83340 |*                                   84954.52381
#                 16           86942 |*                                   88555.12500
#                 13           90544 |*                                   92319.61538
#                 20           94146 |*                                   96424.50000
#                 25           97748 |*                                   99747.00000
#                 36          101350 |*                                  103194.02778
#                 21          104952 |*                                  106887.71429
#                 27          108554 |*                                  110425.70370
#                 32          112156 |*                                  113953.50000
#                 31          115758 |*                                  117516.25806
#                 23          119360 |*                                  121329.00000
#                 42          122962 |*                                  125050.90476
#                 36          126564 |*                                  128332.38889
#                 44          130166 |*                                  131979.88636
#                117          133768 |*                                  135583.88034
#                143          137370 |*                                  139338.95105
#                100          140972 |*                                  142771.45000
#                105          144574 |*                                  146353.63810
#                101          148176 |*                                  149776.86139
#                 98          151778 |*                                  153443.65306
#
#                385           > 95% |****                               164697.00779
#
#        mean of 95%     61910.85229
#          95th %ile          155356
#
# WARNINGS
#     Actual benchmark run time only accounts for 37.9% of elapsed time.
#
# Usage: munmap
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'munmap')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-map (default /dev/zero)]
#     [-l mapping-length (default 8192)]
#     [-r] (read a byte from each page)
#     [-w] (write a byte to each page)
#     [-s] (use MAP_SHARED instead of MAP_PRIVATE)
# notes: measures munmap()
       prc thr      nsecs/call      samples   errors cnt/samp    delta
usleep   1   1         3893971         4835        0        1        1
# bin/../bin-riscv64/usleep -N usleep -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1089771                    3141871
#                        max   6540571                    4621071
#                       mean   3879824.69374              3882202.79214
#                     median   3893771                    3893971*
#                     stddev    348559.16414               247264.25421
#             standard error      4929.86398                 3556.01102
#       99% confidence level     12699.32962                 9160.28438
#                       skew        -0.24512                   -0.17243
#                   kurtosis        12.67316                    0.57356
#           time correlation       201.27977                  168.41973
#
#               elapsed time        20.00968
#                   run time        19.40610
#          getnsecs overhead      1429
#
#          number of samples      4999
#         number of outliers       164
#    number of final samples      4835
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 15         3141871 |*                                 3153831.00000
#                 21         3178081 |*                                 3200975.76190
#                 28         3214291 |*                                 3232613.85714
#                 21         3250501 |*                                 3271466.23810
#                 39         3286711 |**                                3305624.84615
#                 38         3322921 |**                                3341721.00000
#                 55         3359131 |***                               3376909.18182
#                 38         3395341 |**                                3414899.94737
#                 48         3431551 |***                               3449621.00000
#                 52         3467761 |***                               3486467.15385
#                 70         3503971 |****                              3521142.42857
#                 90         3540181 |*****                             3558673.22222
#                116         3576391 |*******                           3594128.75862
#                122         3612601 |*******                           3631888.21311
#                131         3648811 |********                          3667087.79389
#                178         3685021 |***********                       3704620.52247
#                167         3721231 |**********                        3739344.05389
#                195         3757441 |************                      3778559.20513
#                235         3793651 |**************                    3813389.72340
#                395         3829861 |************************          3848441.63291
#                488         3866071 |******************************    3885342.92623
#                508         3902281 |********************************  3919906.62992
#                357         3938491 |**********************            3954453.35294
#                220         3974701 |*************                     3990790.54545
#                183         4010911 |***********                       4029497.77596
#                161         4047121 |**********                        4064956.71429
#                126         4083331 |*******                           4101833.69841
#                111         4119541 |******                            4138023.25225
#                142         4155751 |********                          4173282.97183
#                117         4191961 |*******                           4209874.41880
#                 72         4228171 |****                              4245986.27778
#                 54         4264381 |***                               4279785.81481
#
#                242           > 95% |***************                   4409982.57025
#
#        mean of 95%   3854394.66971
#          95th %ile         4300571
#
# Usage: usleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'usleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in microseconds (defaults to 1us)
# note: measures usleep()
           prc thr      nsecs/call      samples   errors cnt/samp    delta
usleep_d10   1   1         3896771         4889        0        1       10
# bin/../bin-riscv64/usleep -N usleep_d10 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 10 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1004371                    3075971
#                        max   7636771                    4687071
#                       mean   3881360.81689              3884235.12354
#                     median   3896571                    3896771*
#                     stddev    335568.49183               269674.14159
#             standard error      4747.07946                 3856.81925
#       99% confidence level     12228.47669                 9935.16639
#                       skew        -0.22400                   -0.12902
#                   kurtosis        10.56611                    0.36888
#           time correlation       204.38475                  183.06436
#
#               elapsed time        20.00889
#                   run time        19.40499
#          getnsecs overhead      1429
#
#          number of samples      4997
#         number of outliers       108
#    number of final samples      4889
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13         3075971 |*                                 3098763.30769
#                 11         3115800 |*                                 3142343.72727
#                 24         3155629 |*                                 3176996.00000
#                 18         3195458 |*                                 3213482.11111
#                 30         3235287 |*                                 3257977.66667
#                 51         3275116 |***                               3293572.96078
#                 56         3314945 |***                               3332771.00000
#                 50         3354774 |***                               3375507.00000
#                 49         3394603 |***                               3416246.51020
#                 72         3434432 |****                              3454626.55556
#                 86         3474261 |*****                             3495324.48837
#                 82         3514090 |*****                             3534169.78049
#                127         3553919 |*******                           3577589.11024
#                138         3593748 |********                          3613695.63768
#                145         3633577 |*********                         3653935.13793
#                167         3673406 |**********                        3692918.30539
#                174         3713235 |**********                        3734319.27586
#                203         3753064 |************                      3773333.06897
#                320         3792893 |********************              3813066.93750
#                344         3832722 |*********************             3853785.24419
#                465         3872551 |*****************************     3892577.02151
#                511         3912380 |********************************  3932972.95695
#                329         3952209 |********************              3970683.76596
#                205         3992038 |************                      4010767.09756
#                183         4031867 |***********                       4052497.77596
#                159         4071696 |*********                         4091455.90566
#                155         4111525 |*********                         4133333.58065
#                133         4151354 |********                          4169749.94737
#                129         4191183 |********                          4209799.68217
#                 79         4231012 |****                              4251824.16456
#                 61         4270841 |***                               4290228.37705
#                 75         4310670 |****                              4326727.00000
#
#                245           > 95% |***************                   4454253.85714
#
#        mean of 95%   3854163.07580
#          95th %ile         4350471
#
# Usage: usleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'usleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in microseconds (defaults to 1us)
# note: measures usleep()
            prc thr      nsecs/call      samples   errors cnt/samp    delta
usleep_d100   1   1         3879171         4923        0        1      100
# bin/../bin-riscv64/usleep -N usleep_d100 -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -d 100 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   1333271                    3065471
#                        max   6007971                    4694271
#                       mean   3878466.52121              3878955.80906
#                     median   3879171                    3879171*
#                     stddev    312779.94628               272083.69346
#             standard error      4424.26136                 3877.81956
#       99% confidence level     11396.89727                 9989.26318
#                       skew        -0.18633                   -0.08252
#                   kurtosis         5.58321                    0.32343
#           time correlation       197.83815                  184.23300
#
#               elapsed time        20.00914
#                   run time        19.39482
#          getnsecs overhead      1429
#
#          number of samples      4998
#         number of outliers        75
#    number of final samples      4923
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11         3065471 |*                                 3090599.63636
#                 14         3105503 |*                                 3123971.00000
#                 17         3145535 |*                                 3170182.76471
#                 23         3185567 |*                                 3206462.30435
#                 28         3225599 |**                                3247367.42857
#                 43         3265631 |***                               3284154.72093
#                 56         3305663 |****                              3326585.28571
#                 63         3345695 |****                              3368659.88889
#                 54         3385727 |****                              3407041.37037
#                 70         3425759 |*****                             3444915.28571
#                 67         3465791 |*****                             3485099.35821
#                 76         3505823 |*****                             3527374.94737
#                108         3545855 |********                          3567630.25926
#                144         3585887 |***********                       3604369.61111
#                158         3625919 |************                      3646053.27848
#                195         3665951 |***************                   3685921.76923
#                208         3705983 |****************                  3728063.78846
#                271         3746015 |********************              3767138.89668
#                305         3786047 |***********************           3806253.62295
#                414         3826079 |********************************  3846624.14010
#                391         3866111 |******************************    3885938.77494
#                370         3906143 |****************************      3925577.48649
#                343         3946175 |**************************        3964677.99708
#                200         3986207 |***************                   4006240.00000
#                178         4026239 |*************                     4047460.32584
#                151         4066271 |***********                       4086630.60265
#                182         4106303 |**************                    4126813.30769
#                186         4146335 |**************                    4165202.72043
#                147         4186367 |***********                       4205815.21769
#                 85         4226399 |******                            4247273.35294
#                 53         4266431 |****                              4284799.30189
#                 65         4306463 |*****                             4325061.76923
#
#                247           > 95% |*******************               4455959.66397
#
#        mean of 95%   3848476.77737
#          95th %ile         4346471
#
# Usage: usleep
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'usleep')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     -d delta to wait in microseconds (defaults to 1us)
# note: measures usleep()
            prc thr      nsecs/call      samples   errors cnt/samp     size
write_n100k   1   1            2171        17994        0      422   102400
# bin/../bin-riscv64/write -N write_n100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2097                       2097
#                        max    101336                       2718
#                       mean      2297.02317                 2249.08497
#                     median      2175                       2171*
#                     stddev       803.44215                  156.21479
#             standard error         5.83647                    1.16455
#       99% confidence level        15.03474                    2.99988
#                       skew       101.18783                    1.42155
#                   kurtosis     12236.91558                    0.63299
#           time correlation         0.03629                    0.02520
#
#               elapsed time        20.00334
#                   run time        18.32000
#          getnsecs overhead      1429
#
#          number of samples     18950
#         number of outliers       956
#    number of final samples     17994
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 51            2097 |*                                    2108.11765
#                813            2113 |******                               2122.40836
#               2289            2129 |******************                   2137.63740
#               3876            2145 |********************************     2152.47884
#               2686            2161 |**********************               2167.78034
#               1808            2177 |**************                       2184.10288
#                908            2193 |*******                              2199.19273
#                341            2209 |**                                   2215.58065
#                224            2225 |*                                    2231.92857
#                188            2241 |*                                    2248.40957
#                172            2257 |*                                    2264.58721
#                125            2273 |*                                    2279.60000
#                119            2289 |*                                    2296.06723
#                 91            2305 |*                                    2313.68132
#                105            2321 |*                                    2328.15238
#                101            2337 |*                                    2344.01980
#                 90            2353 |*                                    2360.03333
#                 81            2369 |*                                    2376.40741
#                138            2385 |*                                    2393.12319
#                209            2401 |*                                    2409.08612
#                325            2417 |**                                   2424.69231
#                296            2433 |**                                   2440.21284
#                307            2449 |**                                   2456.30945
#                250            2465 |**                                   2472.10000
#                221            2481 |*                                    2488.26697
#                217            2497 |*                                    2504.67742
#                216            2513 |*                                    2520.98611
#                218            2529 |*                                    2536.52294
#                203            2545 |*                                    2552.21675
#                181            2561 |*                                    2567.77348
#                172            2577 |*                                    2584.13372
#                 73            2593 |*                                    2595.89041
#
#                900           > 95% |*******                              2651.24333
#
#        mean of 95%      2227.91131
#          95th %ile            2599
#
# Usage: write
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'write')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures write()
           prc thr      nsecs/call      samples   errors cnt/samp     size
write_n10k   1   1            2149        18516        0      402    10240
# bin/../bin-riscv64/write -N write_n10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2057                       2057
#                        max     80986                       2680
#                       mean      2315.02249                 2223.26863
#                     median      2155                       2149*
#                     stddev       795.20562                  152.19802
#             standard error         5.66561                    1.11850
#       99% confidence level        14.59460                    2.88125
#                       skew        52.96959                    1.37025
#                   kurtosis      4918.18762                    0.54059
#           time correlation         0.04737                    0.02439
#
#               elapsed time        20.00469
#                   run time        18.12162
#          getnsecs overhead      1429
#
#          number of samples     19700
#         number of outliers      1184
#    number of final samples     18516
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  7            2057 |*                                    2067.00000
#                192            2073 |*                                    2083.75521
#               1141            2089 |**********                           2097.86152
#               2821            2105 |**************************           2113.40269
#               3346            2121 |********************************     2128.13060
#               2103            2137 |********************                 2143.99667
#               1688            2153 |****************                     2160.03495
#                943            2169 |*********                            2175.68929
#                488            2185 |****                                 2191.86885
#                388            2201 |***                                  2207.58505
#                264            2217 |**                                   2224.04545
#                234            2233 |**                                   2240.94017
#                177            2249 |*                                    2255.88701
#                174            2265 |*                                    2272.52874
#                132            2281 |*                                    2288.26515
#                113            2297 |*                                    2304.53097
#                114            2313 |*                                    2319.92982
#                125            2329 |*                                    2336.65600
#                127            2345 |*                                    2352.80315
#                155            2361 |*                                    2368.83226
#                251            2377 |**                                   2385.13147
#                316            2393 |***                                  2400.88608
#                333            2409 |***                                  2416.68769
#                327            2425 |***                                  2431.63914
#                256            2441 |**                                   2448.83203
#                218            2457 |**                                   2464.65596
#                200            2473 |*                                    2480.42000
#                212            2489 |**                                   2496.48113
#                212            2505 |**                                   2512.14151
#                213            2521 |**                                   2528.44131
#                219            2537 |**                                   2544.79909
#                101            2553 |*                                    2556.57426
#
#                926           > 95% |********                             2610.91793
#
#        mean of 95%      2202.86140
#          95th %ile            2560
#
# Usage: write
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'write')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures write()
          prc thr      nsecs/call      samples   errors cnt/samp     size
write_n1k   1   1            2197        18682        0      389     1024
# bin/../bin-riscv64/write -N write_n1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min      2114                       2114
#                        max    256936                       2722
#                       mean      2373.75873                 2269.67819
#                     median      2203                       2197*
#                     stddev      1962.38310                  150.69200
#             standard error        13.87094                    1.10250
#       99% confidence level        35.73155                    2.84004
#                       skew       112.73347                    1.39810
#                   kurtosis     14289.70456                    0.62610
#           time correlation         0.04967                    0.02385
#
#               elapsed time        20.00418
#                   run time        18.15618
#          getnsecs overhead      1429
#
#          number of samples     20015
#         number of outliers      1333
#    number of final samples     18682
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 55            2114 |*                                    2125.27273
#                684            2130 |******                               2139.63889
#               1989            2146 |******************                   2154.39819
#               3351            2162 |********************************     2169.79469
#               2768            2178 |**************************           2184.82262
#               1828            2194 |*****************                    2201.30088
#               1370            2210 |*************                        2216.61971
#                707            2226 |******                               2232.66902
#                420            2242 |****                                 2248.66429
#                320            2258 |***                                  2265.45625
#                248            2274 |**                                   2281.57258
#                212            2290 |**                                   2297.32547
#                186            2306 |*                                    2313.36559
#                148            2322 |*                                    2329.48649
#                121            2338 |*                                    2344.96694
#                144            2354 |*                                    2361.22222
#                125            2370 |*                                    2376.58400
#                130            2386 |*                                    2393.37692
#                105            2402 |*                                    2409.68571
#                149            2418 |*                                    2426.31544
#                222            2434 |**                                   2442.16216
#                319            2450 |***                                  2457.84013
#                329            2466 |***                                  2473.78723
#                315            2482 |***                                  2489.28889
#                262            2498 |**                                   2504.37023
#                258            2514 |**                                   2521.36822
#                227            2530 |**                                   2537.73568
#                241            2546 |**                                   2553.17427
#                187            2562 |*                                    2569.66845
#                193            2578 |*                                    2586.05699
#                134            2594 |*                                    2599.05970
#
#                935           > 95% |********                             2657.58717
#
#        mean of 95%      2249.24122
#          95th %ile            2605
#
# Usage: write
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'write')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures write()
            prc thr      nsecs/call      samples   errors cnt/samp     size
write_t100k   1   1          787871        20171        0        1   102400
# bin/../bin-riscv64/write -N write_t100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    753271                     753271
#                        max   9946371                     926971
#                       mean    822448.49378               807728.40915
#                     median    788971                     787871*
#                     stddev    117238.21908                39750.27938
#             standard error       803.13338                  279.88297
#       99% confidence level      2068.87159                  720.97853
#                       skew        27.84888                    1.51588
#                   kurtosis      1787.09347                    0.85483
#           time correlation         8.74610                    5.57611
#
#               elapsed time        20.00454
#                   run time        17.55914
#          getnsecs overhead      1429
#
#          number of samples     21309
#         number of outliers      1138
#    number of final samples     20171
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11          753271 |*                                  756516.45455
#                 95          757775 |*                                  760294.15789
#                136          762279 |*                                  764690.85294
#                129          766783 |*                                  769077.97674
#                 96          771287 |*                                  773505.37500
#                593          775791 |***                                778931.03373
#               5014          780295 |********************************   782954.96490
#               4712          784799 |******************************     786401.19949
#               1727          789303 |***********                        791636.25767
#               1628          793807 |**********                         795772.78133
#                576          798311 |***                                800198.25694
#                312          802815 |*                                  804913.62821
#                313          807319 |*                                  809319.24281
#                192          811823 |*                                  813896.52083
#                201          816327 |*                                  818658.56219
#                176          820831 |*                                  822878.95455
#                168          825335 |*                                  827353.73810
#                105          829839 |*                                  831950.04762
#                 93          834343 |*                                  836469.92473
#                 88          838847 |*                                  840826.68182
#                 56          843351 |*                                  845804.92857
#                 66          847855 |*                                  850083.12121
#                 52          852359 |*                                  854536.38462
#                 49          856863 |*                                  859064.87755
#                181          861367 |*                                  864064.92265
#                451          865871 |**                                 868297.38581
#                452          870375 |**                                 872683.16814
#                400          874879 |**                                 876980.75000
#                289          879383 |*                                  881629.82353
#                295          883887 |*                                  886199.81356
#                256          888391 |*                                  890521.78125
#                250          892895 |*                                  895157.40000
#
#               1009           > 95% |******                             910272.98216
#
#        mean of 95%    802328.79146
#          95th %ile          897371
#
# Usage: write
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'write')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures write()
           prc thr      nsecs/call      samples   errors cnt/samp     size
write_t10k   1   1          101197        18542        0        8    10240
# bin/../bin-riscv64/write -N write_t10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     96421                      96421
#                        max    682136                     121841
#                       mean    106798.45211               104204.09028
#                     median    101330                     101197*
#                     stddev     17769.67620                 5879.96164
#             standard error       126.96513                   43.18135
#       99% confidence level       327.06218                  111.23515
#                       skew        10.86965                    1.26929
#                   kurtosis       186.71115                    0.27525
#           time correlation         1.57852                    0.95224
#
#               elapsed time        20.00326
#                   run time        17.85511
#          getnsecs overhead      1429
#
#          number of samples     19588
#         number of outliers      1046
#    number of final samples     18542
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 11           96421 |*                                   96732.63636
#                 74           97055 |*                                   97462.39189
#                 82           97689 |*                                   97982.21951
#                 80           98323 |*                                   98650.97500
#                448           98957 |**                                  99361.85268
#               4916           99591 |********************************    99995.06794
#               2762          100225 |*****************                  100474.12165
#               1972          100859 |************                       101200.59077
#               1115          101493 |*******                            101753.94619
#                521          102127 |***                                102450.30902
#                494          102761 |***                                103056.53036
#                352          103395 |**                                 103698.44034
#                321          104029 |**                                 104335.04050
#                245          104663 |*                                  104955.26531
#                178          105297 |*                                  105612.91011
#                157          105931 |*                                  106247.38217
#                131          106565 |*                                  106905.86260
#                 98          107199 |*                                  107497.03061
#                106          107833 |*                                  108187.87736
#                126          108467 |*                                  108811.03968
#                251          109101 |*                                  109447.86056
#                342          109735 |**                                 110035.64912
#                326          110369 |**                                 110684.00307
#                325          111003 |**                                 111304.00923
#                359          111637 |**                                 111955.74930
#                309          112271 |**                                 112579.15858
#                271          112905 |*                                  113225.62362
#                300          113539 |*                                  113859.16000
#                272          114173 |*                                  114496.64338
#                250          114807 |*                                  115104.95600
#                221          115441 |*                                  115724.67421
#                199          116075 |*                                  116391.13065
#
#                928           > 95% |******                             118855.25216
#
#        mean of 95%    103432.18849
#          95th %ile          116708
#
# WARNINGS
#     Mean and median differ by more than one-half the standard deviation.
#
# Usage: write
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'write')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures write()
          prc thr      nsecs/call      samples   errors cnt/samp     size
write_t1k   1   1           40729        17838        0       22     1024
# bin/../bin-riscv64/write -N write_t1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min     38661                      38661
#                        max    174586                      49021
#                       mean     43061.13528                41897.49574
#                     median     40808                      40729*
#                     stddev      7302.34659                 2379.89181
#             standard error        53.01168                   17.81903
#       99% confidence level       136.55808                   45.90183
#                       skew         8.51754                    1.41156
#                   kurtosis        97.23473                    0.61047
#           time correlation         0.67984                    0.39013
#
#               elapsed time        20.00450
#                   run time        17.94676
#          getnsecs overhead      1429
#
#          number of samples     18975
#         number of outliers      1137
#    number of final samples     17838
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  5           38661 |*                                   38799.40000
#                 23           38926 |*                                   39099.82609
#                 81           39191 |*                                   39319.27160
#                162           39456 |*                                   39609.39506
#                181           39721 |*                                   39867.86188
#               2075           39986 |***************                     40157.61831
#               4232           40251 |********************************    40377.52339
#               2513           40516 |*******************                 40630.13848
#               1588           40781 |************                        40907.43955
#                975           41046 |*******                             41165.19795
#                699           41311 |*****                               41442.43348
#                421           41576 |***                                 41701.60570
#                314           41841 |**                                  41970.77389
#                232           42106 |*                                   42232.19828
#                138           42371 |*                                   42503.14493
#                121           42636 |*                                   42753.02479
#                 99           42901 |*                                   43030.60606
#                 68           43166 |*                                   43293.39706
#                 59           43431 |*                                   43552.57627
#                 46           43696 |*                                   43848.47826
#                103           43961 |*                                   44097.82524
#                182           44226 |*                                   44371.47253
#                237           44491 |*                                   44622.99156
#                275           44756 |**                                  44897.34909
#                309           45021 |**                                  45142.34304
#                276           45286 |**                                  45409.74275
#                305           45551 |**                                  45681.33115
#                268           45816 |**                                  45948.03358
#                259           46081 |*                                   46211.69112
#                264           46346 |*                                   46476.57955
#                247           46611 |*                                   46723.74494
#                189           46876 |*                                   46993.15344
#
#                892           > 95% |******                              47971.46637
#
#        mean of 95%     41577.77535
#          95th %ile           47116
#
# Usage: write
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'write')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-c ] (make sure buffer is in cache)
# notes: measures write()
             prc thr      nsecs/call      samples   errors cnt/samp     size  vec
writev_n100k   1   1          152929        14460        0        5   102400   10
# bin/../bin-riscv64/writev -N writev_n100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    144694                     149234
#                        max    855886                     157436
#                       mean    166056.13042               153332.50546
#                     median    153734                     152929*
#                     stddev     42593.73664                 1367.90779
#             standard error       299.03782                   11.37556
#       99% confidence level       770.32143                   29.30344
#                       skew         5.84174                    0.74378
#                   kurtosis        39.75192                    0.06562
#           time correlation         3.49269                    0.31270
#
#               elapsed time        20.00412
#                   run time        17.69166
#          getnsecs overhead      1429
#
#          number of samples     20288
#         number of outliers      5828
#    number of final samples     14460
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 13          149234 |*                                  149336.23077
#                 10          149445 |*                                  149550.40000
#                 16          149656 |*                                  149780.87500
#                 14          149867 |*                                  149977.71429
#                 12          150078 |*                                  150186.33333
#                 14          150289 |*                                  150400.28571
#                 13          150500 |*                                  150600.69231
#                 16          150711 |*                                  150798.68750
#                 26          150922 |*                                  151030.26923
#                 92          151133 |**                                 151255.90217
#                283          151344 |******                             151462.06007
#                415          151555 |*********                          151669.21687
#                733          151766 |*****************                  151880.50205
#               1097          151977 |*************************          152089.53236
#               1230          152188 |****************************       152293.81138
#               1314          152399 |******************************     152498.73820
#               1378          152610 |********************************   152708.84035
#                995          152821 |***********************            152925.54673
#                855          153032 |*******************                153132.12398
#                598          153243 |*************                      153343.02676
#                494          153454 |***********                        153548.40283
#                443          153665 |**********                         153770.82167
#                387          153876 |********                           153986.10594
#                467          154087 |**********                         154196.13490
#                411          154298 |*********                          154403.50852
#                515          154509 |***********                        154613.93981
#                456          154720 |**********                         154829.59211
#                397          154931 |*********                          155031.78589
#                328          155142 |*******                            155247.34756
#                305          155353 |*******                            155453.11803
#                246          155564 |*****                              155670.76829
#                164          155775 |***                                155879.93902
#
#                723           > 95% |****************                   156606.34440
#
#        mean of 95%    153160.19815
#          95th %ile          155974
#
# Usage: writev
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'writev')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-v vector-size (default 10)]
# notes: measures writev()
# IOV_MAX is 1024
# SSIZE_MAX is 9223372036854775807
            prc thr      nsecs/call      samples   errors cnt/samp     size  vec
writev_n10k   1   1          152329        13961        0        5    10240   10
# bin/../bin-riscv64/writev -N writev_n10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    144914                     149014
#                        max   1029794                     156418
#                       mean    162264.89275               152714.21460
#                     median    153279                     152329*
#                     stddev     31182.23740                 1234.95649
#             standard error       222.15860                   10.45186
#       99% confidence level       572.28056                   26.92398
#                       skew         7.72665                    0.69388
#                   kurtosis        86.46408                   -0.09225
#           time correlation         2.64255                    0.29370
#
#               elapsed time        20.00450
#                   run time        17.95111
#          getnsecs overhead      1429
#
#          number of samples     19701
#         number of outliers      5740
#    number of final samples     13961
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  8          149014 |*                                  149083.00000
#                 12          149203 |*                                  149298.75000
#                 10          149392 |*                                  149499.70000
#                 17          149581 |*                                  149686.05882
#                 11          149770 |*                                  149863.45455
#                 14          149959 |*                                  150021.78571
#                 19          150148 |*                                  150249.31579
#                 16          150337 |*                                  150434.00000
#                 34          150526 |*                                  150629.70588
#                 68          150715 |*                                  150828.97059
#                213          150904 |****                               151009.02347
#                435          151093 |**********                         151191.91264
#                627          151282 |**************                     151380.51675
#               1062          151471 |************************           151569.65348
#               1380          151660 |********************************   151753.57464
#               1309          151849 |******************************     151943.42093
#               1105          152038 |*************************          152126.07602
#               1077          152227 |************************           152315.19127
#                673          152416 |***************                    152504.28083
#                528          152605 |************                       152688.82008
#                431          152794 |*********                          152881.84455
#                316          152983 |*******                            153075.89241
#                381          153172 |********                           153260.69816
#                491          153361 |***********                        153450.09980
#                520          153550 |************                       153642.51154
#                523          153739 |************                       153829.69407
#                495          153928 |***********                        154015.84444
#                455          154117 |**********                         154211.76264
#                324          154306 |*******                            154392.65123
#                281          154495 |******                             154582.14591
#                242          154684 |*****                              154765.20248
#                185          154873 |****                               154951.66486
#
#                699           > 95% |****************                   155610.35908
#
#        mean of 95%    152561.56756
#          95th %ile          155034
#
# Usage: writev
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'writev')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-v vector-size (default 10)]
# notes: measures writev()
# IOV_MAX is 1024
# SSIZE_MAX is 9223372036854775807
           prc thr      nsecs/call      samples   errors cnt/samp     size  vec
writev_n1k   1   1          151514        14053        0        5     1024   10
# bin/../bin-riscv64/writev -N writev_n1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /dev/null 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    144543                     147868
#                        max    814186                     155934
#                       mean    162446.90805               151896.63937
#                     median    152379                     151514*
#                     stddev     36074.93087                 1346.25522
#             standard error       255.57434                   11.35646
#       99% confidence level       658.35949                   29.25423
#                       skew         7.03779                    0.72557
#                   kurtosis        60.93155                    0.16601
#           time correlation         2.92319                    0.31608
#
#               elapsed time        20.00401
#                   run time        17.58970
#          getnsecs overhead      1429
#
#          number of samples     19924
#         number of outliers      5871
#    number of final samples     14053
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 16          147868 |*                                  147975.87500
#                 19          148077 |*                                  148188.21053
#                 20          148286 |*                                  148402.85000
#                 22          148495 |*                                  148589.04545
#                 16          148704 |*                                  148777.75000
#                 15          148913 |*                                  149016.20000
#                 14          149122 |*                                  149244.92857
#                 25          149331 |*                                  149445.32000
#                 28          149540 |*                                  149664.82143
#                 67          149749 |*                                  149881.73134
#                222          149958 |*****                              150088.30180
#                423          150167 |*********                          150271.43499
#                675          150376 |***************                    150493.73926
#               1145          150585 |*************************          150690.18341
#               1415          150794 |********************************   150891.87986
#               1271          151003 |****************************       151103.44138
#               1159          151212 |**************************         151312.33305
#                933          151421 |*********************              151522.32476
#                740          151630 |****************                   151726.69865
#                610          151839 |*************                      151935.67869
#                526          152048 |***********                        152148.95627
#                469          152257 |**********                         152368.89126
#                483          152466 |**********                         152572.82816
#                518          152675 |***********                        152777.45560
#                455          152884 |**********                         152981.74066
#                477          153093 |**********                         153197.80713
#                333          153302 |*******                            153406.65165
#                327          153511 |*******                            153611.78593
#                259          153720 |*****                              153816.26641
#                239          153929 |*****                              154030.09623
#                242          154138 |*****                              154250.92562
#                187          154347 |****                               154442.46524
#
#                703           > 95% |***************                    155129.01849
#
#        mean of 95%    151726.42494
#          95th %ile          154545
#
# Usage: writev
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'writev')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-v vector-size (default 10)]
# notes: measures writev()
# IOV_MAX is 1024
# SSIZE_MAX is 9223372036854775807
             prc thr      nsecs/call      samples   errors cnt/samp     size  vec
writev_t100k   1   1         8297771         2184        0        1   102400   10
# bin/../bin-riscv64/writev -N writev_t100k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 100k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min   8047271                    8075571
#                        max  29884736                    8574471
#                       mean   8396672.63425              8313517.24542
#                     median   8305771                    8297771*
#                     stddev    688216.17970                87474.93831
#             standard error     14151.72257                 1871.79088
#       99% confidence level     36454.83733                 4821.73332
#                       skew        20.74303                    0.72353
#                   kurtosis       547.07683                    0.24033
#           time correlation       309.55505                  133.11229
#
#               elapsed time        20.00536
#                   run time        19.89140
#          getnsecs overhead      1429
#
#          number of samples      2365
#         number of outliers       181
#    number of final samples      2184
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                  1         8075571 |*                                 8075571.00000
#                  3         8088597 |*                                 8096337.66667
#                  2         8101623 |*                                 8109471.00000
#                  1         8114649 |*                                 8121871.00000
#                  2         8127675 |*                                 8132221.00000
#                  3         8140701 |*                                 8146437.66667
#                  9         8153727 |*                                 8160782.11111
#                 28         8166753 |*****                             8174767.42857
#                 55         8179779 |**********                        8186909.18182
#                 62         8192805 |***********                       8199188.74194
#                 88         8205831 |****************                  8213081.22727
#                101         8218857 |*******************               8225731.39604
#                112         8231883 |*********************             8239274.57143
#                149         8244909 |****************************      8251494.48993
#                170         8257935 |********************************  8264261.00000
#                151         8270961 |****************************      8277342.52318
#                141         8283987 |**************************        8290252.56028
#                144         8297013 |***************************       8302950.86111
#                120         8310039 |**********************            8316341.00000
#                113         8323065 |*********************             8330197.54867
#                 88         8336091 |****************                  8342096.00000
#                 88         8349117 |****************                  8355009.63636
#                 72         8362143 |*************                     8368723.77778
#                 72         8375169 |*************                     8382729.33333
#                 63         8388195 |***********                       8394955.12698
#                 47         8401221 |********                          8406953.97872
#                 37         8414247 |******                            8420689.91892
#                 57         8427273 |**********                        8433123.63158
#                 27         8440299 |*****                             8445089.51852
#                 28         8453325 |*****                             8458499.57143
#                 20         8466351 |***                               8472231.00000
#                 20         8479377 |***                               8486131.00000
#
#                110           > 95% |********************              8528716.45455
#
#        mean of 95%   8302103.59402
#          95th %ile         8492371
#
# Usage: writev
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'writev')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-v vector-size (default 10)]
# notes: measures writev()
# IOV_MAX is 1024
# SSIZE_MAX is 9223372036854775807
            prc thr      nsecs/call      samples   errors cnt/samp     size  vec
writev_t10k   1   1         1027471        16353        0        1    10240   10
# bin/../bin-riscv64/writev -N writev_t10k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 10k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    975971                     975971
#                        max   9402971                    1209171
#                       mean   1066997.19845              1052722.66025
#                     median   1028471                    1027471*
#                     stddev    111401.99129                52213.62858
#             standard error       851.46430                  408.30543
#       99% confidence level      2193.37203                 1051.79479
#                       skew        26.94768                    1.27800
#                   kurtosis      1846.82877                    0.30821
#           time correlation        13.16910                    9.53977
#
#               elapsed time        20.00374
#                   run time        18.29070
#          getnsecs overhead      1429
#
#          number of samples     17118
#         number of outliers       765
#    number of final samples     16353
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 58          975971 |*                                  979331.34483
#                 57          981868 |*                                  984792.05263
#                 95          987765 |*                                  990884.68421
#                 67          993662 |*                                  996324.73134
#                 65          999559 |*                                 1002377.15385
#                748         1005456 |******                            1009675.41176
#               1694         1011353 |**************                    1014380.85832
#               3830         1017250 |********************************  1020039.01567
#               2152         1023147 |*****************                 1026055.15428
#               1651         1029044 |*************                     1031573.60448
#                725         1034941 |******                            1037517.75862
#                440         1040838 |***                               1043513.95455
#                227         1046735 |*                                 1049295.22907
#                149         1052632 |*                                 1055401.87248
#                 78         1058529 |*                                 1061337.66667
#                 60         1064426 |*                                 1067249.33333
#                 62         1070323 |*                                 1073372.61290
#                 47         1076220 |*                                 1078924.19149
#                 55         1082117 |*                                 1084409.18182
#                 65         1088014 |*                                 1091935.61538
#                166         1093911 |*                                 1097124.01205
#                337         1099808 |**                                1103131.23739
#                376         1105705 |***                               1108625.52128
#                362         1111602 |***                               1114470.72376
#                361         1117499 |***                               1120468.78393
#                281         1123396 |**                                1126330.78648
#                272         1129293 |**                                1132125.04412
#                234         1135190 |*                                 1138207.75214
#                228         1141087 |*                                 1143622.75439
#                208         1146984 |*                                 1149923.88462
#                191         1152881 |*                                 1155693.51309
#                194         1158778 |*                                 1161717.39175
#
#                818           > 95% |******                            1183002.29584
#
#        mean of 95%   1045862.74767
#          95th %ile         1164671
#
# Usage: writev
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'writev')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-v vector-size (default 10)]
# notes: measures writev()
# IOV_MAX is 1024
# SSIZE_MAX is 9223372036854775807
           prc thr      nsecs/call      samples   errors cnt/samp     size  vec
writev_t1k   1   1          346736        17365        0        1     1024   10
# bin/../bin-riscv64/writev -N writev_t1k -E -L -W -O 1429 -R 100 -C 200 -D 20000 -X 25000 -s 1k -f /tmp/libmicro.2370/data 
#
# STATISTICS                      nsecs/call (raw)           nsecs/call (outliers removed)
#                        min    330336                     338586
#                        max   3187886                     356836
#                       mean    365977.46992               347713.97437
#                     median    347936                     346736*
#                     stddev     61238.32431                 3050.14556
#             standard error       401.59084                   23.14638
#       99% confidence level      1034.49801                   59.62509
#                       skew        12.35343                    0.77631
#                   kurtosis       337.31009                    0.16445
#           time correlation         4.43466                    0.57505
#
#               elapsed time        20.00621
#                   run time        16.90607
#          getnsecs overhead      1429
#
#          number of samples     23253
#         number of outliers      5888
#    number of final samples     17365
#
# DISTRIBUTION
#             counts      nsecs/call                                            means
#                 26          338586 |*                                  338812.92308
#                 14          339060 |*                                  339307.42857
#                 18          339534 |*                                  339744.33333
#                 22          340008 |*                                  340267.81818
#                 23          340482 |*                                  340664.26087
#                 19          340956 |*                                  341233.36842
#                 28          341430 |*                                  341646.71429
#                 29          341904 |*                                  342153.24138
#                 57          342378 |*                                  342622.84211
#                 77          342852 |*                                  343126.90909
#                145          343326 |**                                 343594.96552
#                474          343800 |*******                            344085.57806
#               1138          344274 |*****************                  344528.39895
#               1129          344748 |*****************                  344980.10983
#               1361          345222 |*********************              345473.83982
#               1867          345696 |*****************************      345940.47242
#               2060          346170 |********************************   346398.64563
#               1167          346644 |******************                 346868.34790
#                952          347118 |**************                     347349.49790
#                752          347592 |***********                        347820.70745
#                616          348066 |*********                          348286.00000
#                453          348540 |*******                            348774.18985
#                445          349014 |******                             349258.13483
#                437          349488 |******                             349736.80092
#                425          349962 |******                             350212.11765
#                504          350436 |*******                            350665.66270
#                450          350910 |******                             351136.33333
#                509          351384 |*******                            351612.42436
#                404          351858 |******                             352079.89851
#                375          352332 |*****                              352550.00000
#                306          352806 |****                               353030.72222
#                214          353280 |***                                353476.28037
#
#                869           > 95% |*************                      355024.93556
#
#        mean of 95%    347328.83705
#          95th %ile          353736
#
# Usage: writev
#     ---- All Benchmarks ----
#     [-?] (print usage and exit)
#     [-1] (single process; overrides -P > 1)
#     [-A] (align with clock)
#     [-B batch-size (default is calculated)]
#     [-C minimum number of samples (default 100)]
#     [-D minimum duration in ms (default 10000ms)]
#     [-E] (echo name to stderr)
#     [-G framework debugging level]
#     [-H] (suppress headers)
#     [-I nsecs per op] (used to compute batch size)
#     [-L] (print argument line)
#     [-M] (reports mean rather than median)
#     [-N test-name (default 'writev')]
#     [-O getnsecs overhead]
#     [-P processes (default 1)]
#     [-R getnsecs resolution]
#     [-S] (print detailed stats)
#     [-T threads (default 1)]
#     [-V] (print the libMicro version and exit)
#     [-W] (flag possible benchmark problems, implies -S)
#     [-X maximum duration in ms (default 600000ms)]
#     ---- Benchmark Specific ----
#     [-f file-to-write (default /dev/null)]
#     [-s buffer-size (default 1024)]
#     [-v vector-size (default 10)]
# notes: measures writev()
# IOV_MAX is 1024
# SSIZE_MAX is 9223372036854775807
